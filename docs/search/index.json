[{"content":"三角形网格的细分 Loop细分 Loop Subdivision分为两步\n创建更多三角形（顶点） 改变三角形顶点的位置 创建更多的三角形非常简单，只用将三角形每条边的中点相连，我们就得到了四个三角形。\n对于顶点的位置，新的顶点和老的顶点都需要更改。\n对于新的顶点：\n1.jpg 对于老的顶点\n2.jpg 更一般的网格的细分 Catmull-Clark细分 对于不是方形的面和度数（所连边数）不等于4的点要进行细分\n步骤如下：\n在每个面的上添加顶点 在每条边的上添加顶点 连接新顶点 添加的规则如下\n3.jpg 网格简化 二次误差度量 4.jpg 对于如上图的情况，不应该对顶点求平均值，而应该使得新的顶点到原来顶点的平方距离之和最小\n坍缩边的方法 通过坍缩某些边，然后使边的端点重合在一起，使得三角形减少。\n一个想法是将边的中点进行二次误差度量。\n5.jpg 一个更好地想法是选择那些拥有最小二次误差的点。可以用优先队列来维护。\n","date":"2022-07-20T15:08:04+08:00","permalink":"https://kegalas.top/p/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6%E5%9F%BA%E7%A1%80%E7%AC%AC%E4%BA%94%E7%89%88-%E7%AC%AC%E5%8D%81%E4%BA%8C%E7%AB%A0%E7%AC%94%E8%AE%B0/","title":"计算机图形学基础（第五版）-第十二章笔记"},{"content":"有两种方法描述几何：隐式的、显式的。\n几何的隐式表示 取决于某些点是否符合表达式。\n例如描述一个球面\\(x^2+y^2+z^2=1\\)，所有符合这个表达式的点就是一个球面。\n更一般的情况：满足\\(f(x,y,z)=0\\)的所有点。\n它的特点是，采样比较困难，但判断一个点在集合体内外或者在几何体上非常方便。\n隐式表示包含：\n代数方程表示(Algebraic Surfaces) 通过布尔表达式对几何体进行运算(Constructive Solid Geometry) 距离函数(Distance Functions) Blending Distance Functions 水平集(Level Set) 分形(Fractals) 几何的显式表示 所有的点直接给出，或者通过参数映射地给出。\n比如从二维映射到三维\n\\[ f:\\mathbb{R^2\\to R^3};(u,v)\\to(x,y,z) \\]\n特点是，采样简单，但是判断关系较为困难。\n显式表示包含：\n点云(Point Cloud) 多边形网格(Polygon Mesh) 贝赛尔曲线(Bezier Curves) 贝塞尔曲线 Casteljau算法\n考虑平面上的三个点\\(b_0,b_1,b_2\\)，用线性差值的办法插入一个点到每一条边上。\n1.jpg 将新增的两个点再利用相同的办法插入一个点。\n2.jpg 然后对于插值的比例值\\([0,1]\\)上的所有点进行这个算法。\n3.jpg 对于更多点，因为每次在边上进行插值后，新的点比原来的点少一个，反复进行这个算法直到只有一个点。\n4.jpg 将这个过程公式化，对于三个点的情况，即为\n\\[ b_0^1(t)=(1-t)b_0+tb_1\\\\ b_1^1(t)=(1-t)b_1+tb_2\\\\ b_0^2(t)=(1-t)b_0^1+tb_1^1 \\]\n\\[ \\therefore b_0^2(t) = (1-t)^2b_0+2t(1-t)b_1+t^2b_2 \\]\n对于更多点的情况：\n\\[ b^n(t) = b^n_0(t)=\\sum^n_{j=0}b_jB^n_j(t) \\]\n其中\n\\[ B^n_i(t)=\\binom{n}{i}t^i(1-t)^{n-1} \\]\n贝赛尔曲线的一些性质\n\\(t=0\\)是起点，\\(t=1\\)是终点。 曲线与端点段相切 仿射变换中，对控制点仿射变换再画曲线，和对已经画出来的曲线做仿射变换，得到的曲线是一样的。 曲线一定在控制点的凸包内 分段的贝赛尔曲线及其算法\n四个顶点构成的贝赛尔曲线为一段，再将许多贝赛尔曲线接到一起。\n这样的曲线一定是连续的，但光滑还有一个条件。即第一条曲线的第3、4个点的线段和第二条曲线的第1、2个点的线段长度、方向均相同。\n样条(Spline) TODO\n贝塞尔曲面 对于\\(4\\times 4\\)的控制点，首先在\\(u\\)方向上画出四条贝赛尔曲线，然后再在\\(v\\)方向上，根据四条贝塞尔曲线计算出四个控制点，再计算出曲面上的点。\n","date":"2022-07-20T13:47:39+08:00","permalink":"https://kegalas.top/p/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6%E5%9F%BA%E7%A1%80%E7%AC%AC%E4%BA%94%E7%89%88-%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%E7%AC%94%E8%AE%B0/","title":"计算机图形学基础（第五版）-第十五章笔记"},{"content":"纹理映射 纹理映射流程如下\n对于每个光栅化的屏幕采样点\\((x,y)\\)（通常是像素的中心点）\n令\\((u,v)\\)为纹理上对应于\\((x,y)\\)的坐标 对纹理上\\((u,v)\\)进行采样 将采样得到的颜色作为光栅化需要使用的颜色 纹理放大 双线性插值 现在假设纹理上需要采样的点的坐标为(x,y)，显然这个点会落在某个\\(2\\times2\\)的像素矩形中。\n设左下角的像素为\\(u_{00}\\)，左上\\(u_{01}\\)，右下\\(u_{10}\\)，右上\\(u_{11}\\)\n设左下角像素中心点为原点建立坐标系。横轴记为s,纵轴记为t。则\\(u_{00}=(0,0)\\),\\(u_{10}=(1,0)\\),\\(u_{01}=(0,1)\\),\\(u_{11}=(1,1)\\)\n记采样点(x,y)在这个坐标系下的坐标为\\((s,t)\\)\n设函数\\(lerp(x,v_0,v_1)=v_0+x(v_1-v_0)\\)\n这个函数的意义是，假设直线上两个点的值为\\(v_0,v_1\\)，\\(x\\)为这两个点间的坐标，\\(x\\)在\\(x_0\\)处等于\\(0\\)，在\\(x_1\\)处等于\\(1\\)。此时所得的函数值为\\(x\\)处的插值。\n现在我们可以对\\((s,t)\\)这个点进行插值，首先定义\n\\[ u_0 = lerp(s,u_{00},u_{10}) u_1 = lerp(s,u_{01},u_{11}) \\]\n得到这两个点后再进行一次插值得\n\\[ f(x,y) = lerp(t,u_0,u_1) \\]\n当然也可以先进行垂直的插值，再水平插值。\n双立方插值 TODO\n纹理缩小 Mipmap 当一个像素代表了纹理中的一大块时，需要进行纹理缩小。\n之前介绍的超采样等是可以使用的，只不过这样会导致开销过大。\n我们需要找到一种办法直接对区间求平均值。\n引入Mipmap的概念。它允许快速的、近似的（而非准确的）、方形的范围均值查询。\n假设第0层是原纹理图像（方形）。\n则第1层是将长宽各缩小为一半，所所放出来的纹理。第2层则为第1层缩小一半，以此类推直到只有一个像素。\n额外占用的存储空间只有原纹理的$1/3$0\n我们要计算应该使用第几层，首先确定我们要光栅化的像素的坐标(x,y)，然后将其对应到纹理上的坐标记为\\((u,v)\\)。\n找到它的邻居像素，例如右边像素，然后如图进行计算。\n1.jpg 存在的一个问题就是，层数是不连续的，但我们的空间是连续的。所以每一层mipmap在纹理映射时会出现块状的、不连续的现象。\n三线性插值 为了解决mipmap不连续的现象，引入三线性插值。\n在\\(D\\)层进行双线性插值 在\\(D+1\\)层进行双线性插值 对\\(D,D+1\\)层进行一次线性插值 Mipmap的缺陷 相较于超采样，在远处会出现模糊现象。原因在于，只能查询一个方形取余、近似的、以及是插值得到的。\n解决（部分的）办法：各向异性过滤。\n比各向异性过滤更好的：EWA过滤。\n纹理的应用 环境光贴图 将整个环境做成贴图，可以给比较镜面光滑的物体使用，使之反射出环境的样子。\n除了保存成方形的贴图，还可以保存在球面上。\n保存在球面上带来的问题是，越靠近上下的地方，越会出现变形。此时可以将球上的点映射到一个立方体上，来解决这种变形。\n2.jpg 法线贴图 储存一个相对高度，从而改变某一点的法线，从而改变光照效果，从而实现凹凸不平的视觉效果。\n新的法向量的计算方法：\n二维情况：\n假设原来\\(p\\)点的法向量\\(n(p)=(0,1)\\)。\n将\\(p\\)点通过法线贴图的相对高度移到对应位置，则\\(p\\)点此时的导数为\\(dp=c[h(p+1)-h(p)]\\)，其中\\(c\\)是常数，\\(h(x)\\)是高度函数。\n则新的法向量为\\(n(p)=(-dp,1).normalized()\\)\n三维情况\n原始法向量为\\(n(p)=(0,0,1)\\)\n导数为\n\\[ \\frac{dp}{du} = c_1[h(u+1)-h(u)] \\]\n\\[ \\frac{dp}{dv} = c_2[h(v+1)-h(v)] \\]\n新的法向量为\\((-dp/du,-dp/dv,1)\\)\n法向量的一般情况\n对于原法向量为\\(\\bm n=(x,y,z)\\)的，首先令\n\\[ \\bm t = \\left(\\frac{xy}{\\sqrt{x^2+z^2}},\\sqrt{x^2+z^2},\\frac{zy}{\\sqrt{x^2+z^2}}\\right) \\]\n\\[ \\bm b = \\bm n\\times\\bm t \\]\n\\[ TBN = [\\bm{t,b,n}] \\]\n\\[ dU = kh\\cdot kn\\cdot(h(u+1/w,v)-h(u,v)) \\]\n\\[ dV = kh\\cdot kn\\cdot(h(u,v+1/h)-h(u,v)) \\]\n其中\\(kh,kn\\)是常数，\\(h(u,v)\\)是高度函数,\\(h,w\\)是纹理的高度和宽度。\n\\[ \\bm{ln} = (-dU,-dV,1) \\]\n那么最终得到的法向量为\n\\[ \\bm n = normalize(TBN\\cdot \\bm{ln}) \\]\n位移贴图 与法线贴图类似，但是位移贴图真正地移动了顶点的位置，很多时候比法线贴图真实。\n噪声 TODO\n对纹理进行环境光预处理 TODO\n3D贴图和体积渲染 TODO\n阴影贴图 将光源也当作一个相机，进行光栅化，只计算zbuffer的信息。\n然后在相机光栅化时，判断两个zbuffer是否相等，相等才能被相机和光源看见。不相等的则在阴影中。\n","date":"2022-07-14T16:53:03+08:00","permalink":"https://kegalas.top/p/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6%E5%9F%BA%E7%A1%80%E7%AC%AC%E4%BA%94%E7%89%88-%E7%AC%AC%E5%8D%81%E4%B8%80%E7%AB%A0%E7%AC%94%E8%AE%B0/","title":"计算机图形学基础（第五版）-第十一章笔记"},{"content":"点光源 假设点光源的光的强度（能流密度）是\\(E=I\\)，由于点光源向外发送能量是以球面波的形式发送。在距离光源\\(r\\)处的波面上，光的强度是\\(E=\\frac{I}{r^2}\\)。这一点与大学物理相同。\nBlinn-Phong反射模型 首先给出以下定义：\n对于某个物体上需要被着色的某一点。其单位法向量为\\(\\bm n\\)，这一点指向相机的单位向量为\\(\\bm v\\)，指向光源的向量为\\(\\bm l\\)。\n漫反射 漫反射意味着，从四面八方看过来，这个位置的颜色是一致的。\n我们主要关注，这个位置与光源的角度关系，从而得出这个点的颜色。\nLambert’s cosine law\n假设光源到达这个点的强度是\\(E=I\\)，那么经过漫反射后，其强度变为\\(E=Icos\\theta\\)，即\\(E=I\\cdot\\bm l\\cdot\\bm n\\)\n结合点光源，以及漫反射系数，可得\n\\[ L_d=k_d(\\frac{I}{r^2})max(0,\\bm n\\cdot\\bm l) \\]\n其中，\\(k_d\\)是漫反射系数，与材质有关。\\(I\\)是点光源的强度，\\(r\\)是点光源到需要着色的点的距离。后面max的作用是，防止从“内部”或者“下面”射来的光线影响了“表面”的颜色。\n通常，\\(k_d\\)是一个三维向量，如果将纹理颜色赋值给\\(k_d\\)，则会起到给模型贴纹理的效果。\n\\(L_d\\)和\\(I\\)也是三维向量，\\(I\\)不仅可以代表光的强度，也可以表示光的颜色。\\(k_d\\)与\\(I\\)的乘法是元素之间相乘。在Eigen中使用cwiseProduct函数。\n镜面反射 即，某些材质中，反射角等于入射角，或者反射角很接近入射角时，出现的光强明显大于其他角度的情况。\n此时\\(\\bm v\\)非常接近反射角，或者有，半程向量非常接近于法向量\\(\\bm n\\)。\n半程向量即是\\(\\bm l,\\bm n\\)的角平分线的单位向量。有\n\\[ \\bm h = \\frac{\\bm v+\\bm l}{||\\bm v+\\bm l||} \\]\n此时相机收到的光强为\n\\[ L_s = k_s(\\frac{I}{r^2})max(0,\\bm n\\cdot\\bm h)^p \\]\n其中\\(k_s\\)是镜面反射系数，\\(p\\)决定了\\(\\bm v\\)和反射角有多接近才算能触发镜面反射。\\(p\\)越大触发镜面反射的角度范围越小。通常会取到\\(100\\)以上。\n\\(k_s,L_s,I\\)仍然是三维向量，乘法规则同前，只不过这里的\\(k_s\\)通常会采用比较亮的白色，而不会采用其他颜色。\n环境光反射 即通过整个环境其他物体的反射，再次射入该物体，给该物体提供亮度。\n在Blinn-Phong模型中，我们选择添加常数的亮度。\n\\[ L_a = k_aI_a \\]\n\\(k_a\\)是环境光反射常数。\n\\(k_a,L_s,I\\)仍然是三维向量，乘法规则同前，只不过这里的\\(k_s\\)通常会采用比较暗的白色，而不会采用其他颜色。\n注意，有多个光源时，不要重复添加环境光反射。\n三个反射混合 \\[ L = L_a+L_d+L_s \\]\n","date":"2022-07-13T21:49:11+08:00","permalink":"https://kegalas.top/p/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6%E5%9F%BA%E7%A1%80%E7%AC%AC%E4%BA%94%E7%89%88-%E7%AC%AC%E4%BA%94%E7%AB%A0%E7%AC%94%E8%AE%B0/","title":"计算机图形学基础（第五版）-第五章笔记"},{"content":"光栅化 线段绘制 对于一条给定线段\n\\[ f(x,y)\\equiv(y_0-y_1)x+(x_1-x_0)y+x_0y_1-x_1y_0=0 \\]\n假设\\(x_0\\leq x_1\\)，否则交换两个点。\n设\n\\[ m=\\frac{y_1-y_0}{x_1-x_0} \\]\n下面的讨论建立在\\(m\\in (0,1]\\)上，其他的取值情况类似。\n给出伪代码如下\ny=y0 for x=x0 to x1 do draw(x,y) if(some condition) then y = y+1 其中\\(x,y\\)都取整数。\n一种判断\\(y=y+1\\)的方法是，假设当前画出来的点的坐标（而不是序号下标）是\\((x,y)\\)（根据本书的规则，左下角的像素的中心点是原点），则下一个要画的点只有两种情况，要么是右边的点，要么是右上角的点。即\\((x+1,y),(x+1,y+1)\\)，我们取中点，即\\((x+1,y+0.5)\\)，如果直线在这个点的下方，则画右边的点；如果直线在这个点的上方，则画右上方的点。\n如果直线在上方（或者点在下方），那么\\(f(x+1,y+0.5)\u0026lt;0\\)，在下方则大于0.如果刚好等于零，可以任意画。\n所以可以写伪代码如下\nif f(x+1,y+0.5)\u0026lt;0 then y=y+1 对于这个算法有优化的办法。主要是针对每次都要调用\\(f\\)计算来进行的优化。\n注意到我们可能计算过\\(f(x-1,y+0.5),f(x-1,y-0.5)\\)，并且我们有\n\\[ f(x+1,y)=f(x,y)+(y_0-y_1) \\]\n\\[ f(x+1,y+1) = f(x,y)+(y_0-y_1)+(x_1-x_0) \\]\n有如下伪代码\ny = y0 d = f(x0+1,y0+0.5) for x = x0 to x1 do draw(x,y) if d\u0026lt;0 then y = y+1 d = d+(x1-x0)+(y0-y1) else d = d+(y0-y1) 三角形绘制 高洛德插值(Gouraud Interpolation)\n运用重心坐标系，我们可以对颜色进行插值。\n假设三个点的颜色值分别为\\(\\bm c_0,\\bm c_1,\\bm c_2\\)。假设我们要绘制的点的重心坐标为\\((\\alpha,\\beta,\\gamma)\\)，则其颜色为\n\\[ \\bm c = \\alpha\\bm c_0+\\beta\\bm c_1+\\gamma\\bm c_2 \\]\n暴力光栅化算法\n伪代码如下\nfor all x do for all y do compute(alpha,beta,gamma) for (x,y) if(alpha,beta,gamma in [0,1]) then c = alpha*c0+beta*c1+gamma*c2 drawpixel(x,y) with color c 优化后的算法\nxMin = floor(xi) xMax = ceiling(xi) yMin = floor(yi) yMax = ceiling(yi) for y = yMin to yMax do for x = xMin to xMax do alpha = f12(x,y)/f12(x0,y0) beta = f20(x,y)/f20(x1,y1) gamma = f01(x,y)/f01(x2,y2) if(alpha,beta,gamma\u0026gt;0) then c=alpha*c0+beta*c1+gamma*c2 drawpixel(x,y) with color c 其中的\\(f_{ij}\\)为\n\\[ f_{01}(x,y) = (y_0-y_1)x+(x_1-x_0)y+x_0y_1-x_1y_0\\\\ f_{12}(x,y) = (y_1-y_2)x+(x_2-x_1)y+x_1y_2-x_2y_1\\\\ f_{20}(x,y) = (y_2-y_0)x+(x_0-x_2)y+x_2y_0-x_0y_2 \\]\n对于公共边上的点的处理\nxMin = floor(xi) xMax = ceiling(xi) yMin = floor(yi) yMax = ceiling(yi) fAlpha = f12(x0,y0) fBeta = f20(x1,x1) fGamma = f01(x2,y2) for y = yMin to yMax do for x = xMin to xMax do alpha = f12(x,y)/fAlpha beta = f20(x,y)/fBeta gamma = f01(x,y)/fGamma if(alpha,beta,gamma\u0026gt;=0) then if(alpha\u0026gt;0 or fAlpha*f12(-1,-1)\u0026gt;0)and (beta\u0026gt;0 or fBeta*f20(-1,-1)\u0026gt;0)and (gamma\u0026gt;0 or fGamma*f01(-1,-1)\u0026gt;0) then c=alpha*c0+beta*c1+gamma*c2 drawpixel(x,y) with color c 用Z-Buffer处理覆盖问题 为了处理方便，假设\\(z\\)始终为正，且更小的\\(z\\)意味着更近，更大的\\(z\\)意味着更远。\n算法如下\n首先给\\(z-buffer\\)赋值无限大。\n在光栅化过程中，执行如下伪代码\nfor (each triangle T) for (each sample (x,y,z) in T) if(z\u0026lt;zbuffer[x,y]) framebuffer[x,y] = rgb; zbuffer[x,y] = z; else ; 即为，对每个三角形的采样像素，如果他的深度坐标，即\\(z\\)更小，那么在缓冲区更新这个像素的颜色，并且更新最小的\\(z\\)。\n该算法的复杂度是\\(O(n)\\)，对于\\(n\\)个三角形。\n着色频率的问题（Shading Frequencies） 对每个平面着色 又叫Flat着色。\n对每个顶点着色 又叫Gouraud着色。\n一个顶点的单位法向量，可以由以这个点为顶点的所有三角形的法向量求出。\n\\[ N_v=\\frac{\\sum_iN_i}{||\\sum_iN_i||} \\]\n然后这个单位法向量可以用于Blinn-Phong反射模型中。\n再之后，对于平面内的点的着色，需要使用插值算法。\n对每个片元（像素）着色 又称Phong着色。\n对于每个像素的单位法向量，假设我们已经知道顶点的法向量，我们可以采用重心坐标插值的算法来计算出每个像素的单位法向量。\n图形管线的工作流程 程序输入顶点 将顶点在屏幕中定位 根据顶点在屏幕中定位三角形 根据三角形进行光栅化 对于光栅化后的片元进行着色 输出到帧缓冲，最后输出到屏幕。 ","date":"2022-07-03T15:21:12+08:00","permalink":"https://kegalas.top/p/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6%E5%9F%BA%E7%A1%80%E7%AC%AC%E4%BA%94%E7%89%88-%E7%AC%AC%E4%B9%9D%E7%AB%A0%E7%AC%94%E8%AE%B0/","title":"计算机图形学基础（第五版）-第九章笔记"},{"content":"分辨率与坐标 假设屏幕分辨率是\\(n_x\\times n_y\\)，则，按照本书的规则，左下角的像素的中心点定为原点，那么有坐标范围为\\([-0.5,n_x-0.5]\\times [-0.5,n_y-0.5]\\)。若按照games101的规则，则坐标范围为\\([0,n_x]\\times[0,n_y]\\)。\nRGB格式 出于方便目的，RGB的三个分量的取值范围都是\\([0,1]\\)。在具体实现时，如8-bit图片，每个分量的所有可能的取值为\\(0,1/255,2/255,\\)\\(\\cdots,254/255,1\\)。\n","date":"2022-07-03T15:05:15+08:00","permalink":"https://kegalas.top/p/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6%E5%9F%BA%E7%A1%80%E7%AC%AC%E4%BA%94%E7%89%88-%E7%AC%AC%E4%B8%89%E7%AB%A0%E7%AC%94%E8%AE%B0/","title":"计算机图形学基础（第五版）-第三章笔记"},{"content":"在MSYS2中安装程序时遇到如下问题：\nerror: mingw-w64-x86_64-mpc: signature from \u0026#34;David Macek \u0026lt;david.macek.0@gmail.com\u0026gt;\u0026#34; is unknown trust 尝试通过https://packages.msys2.org/中提供的方法，安装了key，解决问题。\n或者直接输入pacman -S msys2-keyring\n","date":"2022-07-01T12:05:59+08:00","permalink":"https://kegalas.top/p/msys2%E6%8A%A5%E9%94%99david-macek-is-unknown-trust/","title":"MSYS2报错David Macek is unknown trust"},{"content":"Viewing Transformations 视口变换（Viewport Transformation） 将\\([-1,1]^2\\)的正方形映射到屏幕上。这个屏幕宽\\(n_x\\)像素，高\\(n_y\\)像素。并且由于左下角像素中心点位置为原点，我们要有负0.5个像素，即映射到\\([-0.5,n_x-0.5]\\times[-0.5,n_y-0.5]\\)。（注，在games101中映射到的是\\([0,n_x]\\times[0,n_y]\\)）\n需要如下变换\n\\[ \\begin{bmatrix} x_{screen} \\\\ y_{screen} \\\\ 1 \\end{bmatrix}= \\begin{bmatrix} n_x/2 \u0026amp; 0 \u0026amp; (n_x-1)/2\\\\ 0 \u0026amp; n_y/2 \u0026amp; (n_y-1)/2\\\\ 0 \u0026amp; 0 \u0026amp; 1 \\end{bmatrix} \\begin{bmatrix} x_{canonical}\\\\ y_{canonical}\\\\ 1 \\end{bmatrix} \\]\n三维形式有\n\\[ M_{vp}= \\begin{bmatrix} n_x/2 \u0026amp; 0 \u0026amp; 0 \u0026amp; (n_x-1)/2\\\\ 0 \u0026amp; n_y/2 \u0026amp; 0 \u0026amp; (n_y-1)/2\\\\ 0 \u0026amp; 0 \u0026amp; 1 \u0026amp;0\\\\ 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 1 \\end{bmatrix} \\]\n正交投影变换（Orthographic Projection Transformation） 将一个\\([l,r]\\times[b,t]\\times[f,n]\\)矩阵变换到\\([-1,1]^3\\)。\n其中\\(l\\)即left是\\(x\\)坐标小的平面，\\(r\\)即right是\\(x\\)坐标大的平面。\n其中\\(b\\)即bottom是\\(y\\)坐标小的平面，\\(t\\)即top是\\(y\\)坐标大的平面。\n其中\\(f\\)即far是\\(z\\)坐标小的平面，\\(n\\)即near是\\(z\\)坐标大的平面。\n注意\\(z\\)可能与常识不太相同，因为我们的相机所看的方向是\\(-z\\)方向。\n这也导致了OpenGL使用左手坐标系。\n完成这个变换的矩阵是\n\\[ \\begin{bmatrix} \\frac{2}{r-l} \u0026amp; 0 \u0026amp; 0 \u0026amp; 0\\\\ 0 \u0026amp; \\frac{2}{t-b} \u0026amp; 0 \u0026amp; 0\\\\ 0 \u0026amp; 0 \u0026amp; \\frac{2}{n-f} \u0026amp; 0\\\\ 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 1 \\end{bmatrix} \\begin{bmatrix} 1 \u0026amp; 0 \u0026amp; 0 \u0026amp; -\\frac{r+l}{2}\\\\ 0 \u0026amp; 1 \u0026amp; 0 \u0026amp; -\\frac{t+b}{2}\\\\ 0 \u0026amp; 0 \u0026amp; 1 \u0026amp; -\\frac{n+f}{2}\\\\ 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 1 \\end{bmatrix}= \\]\n\\[ \\begin{bmatrix} \\frac{2}{r-l} \u0026amp; 0 \u0026amp; 0 \u0026amp; -\\frac{r+l}{r-l}\\\\ 0 \u0026amp; \\frac{2}{t-b} \u0026amp; 0 \u0026amp; -\\frac{t+b}{t-b}\\\\ 0 \u0026amp; 0 \u0026amp; \\frac{2}{n-f} \u0026amp; -\\frac{n+f}{n-f}\\\\ 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 1 \\end{bmatrix} \\]\n相机变换（Camera Transformation） 首先知道三个向量：\n\\(\\bm e\\)，相机位置（eye position）向量 \\(\\hat{\\bm g}\\)，相机视线（gaze）方向。 \\(\\hat{\\bm t}\\)，相机头顶方向。（和视线方向正交） 我们要将相机位置变换到原点，将视线方向定为\\(-z\\)方向，头顶方向为\\(y\\)方向。同时所有物体都跟随相机变换，最终结果相机看到的画面不变。\n首先，显然的，将相机位置变换到原点的矩阵是\n\\[ T_{view} \\begin{bmatrix} 1 \u0026amp; 0 \u0026amp; 0 \u0026amp; -x_e\\\\ 0 \u0026amp; 1 \u0026amp; 0 \u0026amp; -y_e\\\\ 0 \u0026amp; 0 \u0026amp; 1 \u0026amp; -z_e\\\\ 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 1 \\end{bmatrix} \\]\n然后对两个另外两个向量进行旋转，直接想不太方便，可以反过来由\\(z\\)和\\(y\\)变换到\\(-\\hat g\\)和\\(\\hat t\\)，\\(x\\)变换到\\(\\hat g\\times \\hat t\\)\n\\[ R_{view}^{-1}= \\begin{bmatrix} x_{\\hat g\\times \\hat t} \u0026amp; x_{\\hat t} \u0026amp; x_{-\\hat{g}} \u0026amp; 0\\\\ y_{\\hat g\\times \\hat t} \u0026amp; y_{\\hat t} \u0026amp; y_{-\\hat{g}} \u0026amp; 0\\\\ z_{\\hat g\\times \\hat t} \u0026amp; z_{\\hat t} \u0026amp; z_{-\\hat{g}} \u0026amp; 0\\\\ 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 1 \\end{bmatrix} \\]\n然后再得到逆变换，由于这是个正交矩阵，逆矩阵就是转置矩阵\n\\[ R_{view}= \\begin{bmatrix} x_{\\hat g\\times \\hat t} \u0026amp; y_{\\hat g\\times \\hat t} \u0026amp; z_{\\hat g\\times \\hat t} \u0026amp; 0\\\\ x_{\\hat t} \u0026amp; y_{\\hat t} \u0026amp; z_{\\hat t} \u0026amp; 0\\\\ x_{-\\hat{g}} \u0026amp; y_{-\\hat{g}} \u0026amp; z_{-\\hat{g}} \u0026amp; 0\\\\ 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 1 \\end{bmatrix} \\]\n透视投影（Perspective Projection） 由透视投影变换到正交投影，矩阵如下\n\\[ P= \\begin{bmatrix} n \u0026amp; 0 \u0026amp; 0 \u0026amp; 0\\\\ 0 \u0026amp; n \u0026amp; 0 \u0026amp; 0\\\\ 0 \u0026amp; 0 \u0026amp; n+f \u0026amp; -fn\\\\ 0 \u0026amp; 0 \u0026amp; 1 \u0026amp; 0 \\end{bmatrix} \\]\n直观上的理解就是，将视锥中远平面压小到等于近平面。\n视野（Field-of-View） 通常，对于近平面，我们可以用\\(l,r,b,t\\)描述（假设\\(l=-r,b=-t\\)，即平面中心位于\\(-z\\)轴上，且平面与\\(-z\\)垂直），也可以用垂直视野\\(fovY\\)和近平面的宽高比来表示。\n首先相机到近平面的距离为\\(|n|\\)，则有如下关系\n\\[ tan\\frac{fovY}{2} = \\frac{t}{|n|} \\]\n\\[ aspect = \\frac{r}{t} \\]\n","date":"2022-06-28T12:14:24+08:00","permalink":"https://kegalas.top/p/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6%E5%9F%BA%E7%A1%80%E7%AC%AC%E4%BA%94%E7%89%88-%E7%AC%AC%E5%85%AB%E7%AB%A0%E7%AC%94%E8%AE%B0/","title":"计算机图形学基础（第五版）-第八章笔记"},{"content":"放缩 \\[ scale(s_x,s_y)= \\begin{bmatrix} s_x \u0026amp; 0\\\\ 0 \u0026amp; s_y \\end{bmatrix} \\]\n\\[ \\begin{bmatrix} s_x \u0026amp; 0\\\\ 0 \u0026amp; s_y \\end{bmatrix} \\begin{bmatrix} x\\\\ y \\end{bmatrix}= \\begin{bmatrix} s_xx\\\\ s_yy \\end{bmatrix} \\]\n例如长宽各缩小为0.5倍，有\n\\[ scale(0.5,0.5)= \\begin{bmatrix} 0.5 \u0026amp; 0\\\\ 0 \u0026amp; 0.5 \\end{bmatrix} \\]\n切变 切变，想象一个由四根木条和四个钉子组装而成的正方形，我们可以将其“推”成一个平行四边形。但是在图形学中，长和高不变，意味着有两条边的长度会发生变化。\n\\[ shear-x(s)=\\begin{bmatrix} 1 \u0026amp; s\\\\ 0 \u0026amp; 1 \\end{bmatrix}, shear-y(s)=\\begin{bmatrix} 1 \u0026amp; 0\\\\ s \u0026amp; 1 \\end{bmatrix} \\]\n另外一种关于切变的理解是，仅仅对着x坐标或者y坐标进行了旋转操作，例如正向旋转（逆时针）\\(\\phi\\)，则有\n\\[ \\begin{bmatrix} 1 \u0026amp; tan\\phi\\\\ 0 \u0026amp; 1 \\end{bmatrix} or \\begin{bmatrix} 1 \u0026amp; 0\\\\ tan\\phi \u0026amp; 1 \\end{bmatrix} \\]\n旋转 顺时针转过\\(\\phi\\)，则\n\\[ rotate(\\phi) = \\begin{bmatrix} cos\\phi \u0026amp; -sin\\phi\\\\ sin\\phi \u0026amp; cos\\phi \\end{bmatrix} \\]\n镜像 即关于\\(x\\)轴或\\(y\\)轴将整个图像颠倒过来，有\n\\[ reflect-y = \\begin{bmatrix} -1 \u0026amp; 0\\\\ 0 \u0026amp; 1 \\end{bmatrix}, reflect-x = \\begin{bmatrix} 1 \u0026amp; 0\\\\ 0 \u0026amp; -1 \\end{bmatrix} \\]\n线性变换的复合 对于两个变换\\(\\bm S,R\\)\n\\[ first,\\bm v_2=\\bm{Sv}_1,then,\\bm v_3=\\bm{Sv}_2 \\]\n那么就可以写作\n\\[ \\bm v_3=\\bm R(\\bm{Sv}_1) \\]\n根据结合律，写作\n\\[ \\bm v_3=(\\bm{RS})\\bm{v}_1 \\]\n则\\(\\bm{M=RS}\\)就是复合变换，其中变换顺序是从右到左的。\n线性变换的拆分 例如，有一个\\(2\\times 2\\)正方形的左下角在点\\((1,1)\\)处，我们想要将它绕\\((1,1)\\)旋转\\(\\phi\\)度，我们就可以拆分成三个变换。首先，左下角平移到原点；然后，进行旋转；最后再平移回去。\n三维线性变换 总体来说，三维线性变换就是二维的扩展\n\\[ scale(s_x,s_y,s_z)= \\begin{bmatrix} s_x \u0026amp; 0 \u0026amp; 0\\\\ 0 \u0026amp; s_y \u0026amp; 0\\\\ 0 \u0026amp; 0 \u0026amp; s_z \\end{bmatrix} \\]\n\\[ rotate-z(\\phi)= \\begin{bmatrix} cos\\phi \u0026amp; -sin\\phi \u0026amp; 0\\\\ sin\\phi \u0026amp; cos\\phi \u0026amp; 0\\\\ 0 \u0026amp; 0 \u0026amp; 1 \\end{bmatrix} \\]\n\\[ rotate-x(\\phi)= \\begin{bmatrix} 1 \u0026amp; 0 \u0026amp; 0\\\\ 0 \u0026amp; cos\\phi \u0026amp; -sin\\phi\\\\ 0 \u0026amp; sin\\phi \u0026amp; cos\\phi \\end{bmatrix} \\]\n\\[ rotate-y(\\phi)= \\begin{bmatrix} cos\\phi \u0026amp; 0 \u0026amp; sin\\phi\\\\ 0 \u0026amp; 1 \u0026amp; 0\\\\ -sin\\phi \u0026amp; 0 \u0026amp; cos\\phi \\end{bmatrix} \\]\n\\[ shear-x(d_y,d_z)= \\begin{bmatrix} 1 \u0026amp; d_y \u0026amp; d_z\\\\ 0 \u0026amp; 1 \u0026amp; 0\\\\ 0 \u0026amp; 0 \u0026amp; 1 \\end{bmatrix} \\]\n如果要绕过原点的固定轴\\(\\bm n\\)旋转，可以有罗德里格斯公式如下\n\\[ \\bm R(\\bm n,\\alpha) = cos(\\alpha)\\bm I+(1-cos(\\alpha))\\bm{nn}^T+sin(\\alpha)\\bm N \\]\n其中\\(\\bm I\\)是单位矩阵，\n\\[ \\bm N= \\begin{bmatrix} 0 \u0026amp; -n_z \u0026amp; n_y\\\\ n_z \u0026amp; 0 \u0026amp; -n_x\\\\ -n_y \u0026amp; n_x \u0026amp; 0 \\end{bmatrix} \\]\n平移 平移不能被写作矩阵的形式，所以它不是线性变换。\n\\[ \\begin{bmatrix} x\u0026#39;\\\\ y\u0026#39; \\end{bmatrix}= \\begin{bmatrix} a \u0026amp; b\\\\ c \u0026amp; d \\end{bmatrix} \\begin{bmatrix} x\\\\ y \\end{bmatrix}+ \\begin{bmatrix} t_x\\\\ t_y \\end{bmatrix} \\]\n但是我们仍然有办法用矩阵来表示平移，这需要转化为齐次矩阵。\n为坐标（二维坐标）添加第三维，\n对于二维点，\\((x,y,1)^T\\) 对于二维向量，\\((x,y,0)^T\\) 于是我们有平移变换如下\n\\[ \\begin{bmatrix} x\u0026#39;\\\\ y\u0026#39;\\\\ w\u0026#39; \\end{bmatrix}= \\begin{bmatrix} 1 \u0026amp; 0 \u0026amp; t_x\\\\ 0 \u0026amp; 1 \u0026amp; t_y\\\\ 0 \u0026amp; 0 \u0026amp; 1 \\end{bmatrix}\\cdot \\begin{bmatrix} x\\\\ y\\\\ 1 \\end{bmatrix}= \\begin{bmatrix} x+t_x\\\\ y+t_y\\\\ 1 \\end{bmatrix} \\]\n并且这样定义点和向量有好处，向量加向量是向量，点减点是向量，点加向量是向量。\n平移一个向量，对于自由向量来说，起点都是远点，所以平移向量不会改变向量的坐标表示。为此设置第三维为0是合理的。\n同样地，在复合变换时，用矩阵乘法来复合。\n三维平移 \\[ \\bm T(t_x,t_y,t_z)=\\ \\begin{bmatrix} 1 \u0026amp; 0 \u0026amp; 0 \u0026amp; t_x\\\\ 0 \u0026amp; 1 \u0026amp; 0 \u0026amp; t_y\\\\ 0 \u0026amp; 0 \u0026amp; 1 \u0026amp; t_z\\\\ 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 1 \\end{bmatrix} \\]\n仿射变换 即线性变换加上一个平移\n\\[ \\begin{bmatrix} x\u0026#39;\\\\ y\u0026#39; \\end{bmatrix}= \\begin{bmatrix} a \u0026amp; b\\\\ c \u0026amp; d \\end{bmatrix}\\cdot \\begin{bmatrix} x\\\\ y \\end{bmatrix}+ \\begin{bmatrix} t_x\\\\ t_y \\end{bmatrix} \\]\n\\[ \\begin{bmatrix} x\u0026#39;\\\\ y\u0026#39;\\\\ 1 \\end{bmatrix}= \\begin{bmatrix} a \u0026amp; b \u0026amp; t_x\\\\ c \u0026amp; d \u0026amp; t_y\\\\ 0 \u0026amp; 0 \u0026amp; 1 \\end{bmatrix}\\cdot \\begin{bmatrix} x\\\\ y\\\\ 1 \\end{bmatrix} \\]\n显然知道，这个矩阵先进行线性变换，再进行平移。\n逆变换 变换\\(\\bm M^{-1}\\)是变换\\(\\bm M\\)在矩阵和几何意义上的逆变换。\n显然，根据变换的复合，变换和其逆变换的复合相当于没变，两个变换矩阵的乘积是单位矩阵。故逆变换矩阵是变换矩阵的逆矩阵。\n坐标变换 TODO\n","date":"2022-06-27T16:25:19+08:00","permalink":"https://kegalas.top/p/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6%E5%9F%BA%E7%A1%80%E7%AC%AC%E4%BA%94%E7%89%88-%E7%AC%AC%E4%B8%83%E7%AB%A0%E7%AC%94%E8%AE%B0/","title":"计算机图形学基础（第五版）-第七章笔记"},{"content":"本章内容为线性代数，在线性代数整理中涵盖了大部分内容，不再重复，介绍一些那篇文章没有覆盖的内容。\nSVD（奇异值分解） 与对角化不同的是，计算SVD时，两边的正交矩阵不要求相同。例如：\n\\[ \\bm A=\\bm{USV}^T \\]\n其中\\(\\bm S\\)是一个对角阵，并且对角线上的元素就是奇异值。当\\(\\bm A\\)是对称的并且都是非负特征值，此时SVD和对角化相同。\n有一个特征值和奇异值之间的关系可以帮助我们计算奇异值\n\\[ M = \\bm{AA}^T=(\\bm{USV}^T)(\\bm{USV}^T)^T = \\bm{US}(\\bm V^T\\bm V)\\bm{SU}^T \\]\n\\[ =\\bm{US}^2\\bm U^T \\]\n","date":"2022-06-27T15:29:29+08:00","permalink":"https://kegalas.top/p/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6%E5%9F%BA%E7%A1%80%E7%AC%AC%E4%BA%94%E7%89%88-%E7%AC%AC%E5%85%AD%E7%AB%A0%E7%AC%94%E8%AE%B0/","title":"计算机图形学基础（第五版）-第六章笔记"},{"content":"Cartesian Product（笛卡尔积） 内容同离散数学。\n几个特别的集合 \\(S^2\\)，在单位球面上的三维点的集合。\n映射、函数、反函数 内容同离散数学。\n三角学 书中提到的正弦余弦定理、半角公式、和差公式都已在高中学过，记录一些没学过的。\n正切定理\n\\[ \\frac{a+b}{a-b}=\\frac{tan\\left(\\frac{A+B}{2}\\right)}{tan\\left(\\frac{A-B}{2}\\right)} \\]\n海伦公式\n\\[ S = \\frac{1}{4}\\sqrt{(a+b+c)(-a+b+c)(a-b+c)(a+b-c)} \\]\n重心坐标系 可以用三个点\\(\\bm{a,b,c}\\)表示三角形。\n假设三点不共线，则\\(\\bm{c-a},\\bm{b-a}\\)线性无关，即可以作为二维坐标的一组基底。\n二维空间中任何一点都可以由\n\\[ \\bm{p}=\\bm a+\\beta(\\bm{b-a})+\\gamma(\\bm{c-a}) \\]\n表示\n整理得\n\\[ \\bm{p}=(1-\\beta-\\gamma)\\bm a+\\beta\\bm{b}+\\gamma\\bm{c} \\]\n令\n\\[ \\alpha\\equiv 1-\\beta-\\gamma \\]\n则有\n\\[ \\bm p(\\alpha,\\beta,\\gamma)=\\alpha\\bm a+\\beta\\bm{b}+\\gamma\\bm{c} \\]\n其中\n\\[ \\alpha+\\beta+\\gamma = 1 \\]\n一个点在三角形内部当且仅当\n\\[ 0\u0026lt;\\alpha\u0026lt;1,0\u0026lt;\\beta\u0026lt;1,0\u0026lt;\\gamma\u0026lt;1 \\]\n同时成立。也可以用向量叉乘的办法判断是否在内部。\n对于三角形三个点\\(A,B,C\\)，平面中一点\\((x,y)\\)可以表示为\n\\[ (x,y) = \\alpha A+\\beta B+\\gamma C \\]\n\\[ \\alpha+\\beta+\\gamma=1 \\]\n其中有\n\\[ \\alpha = \\frac{-(x-x_B)(y_C-y_B)+(y-y_B)(x_C-x_B)}{-(x_A-x_B)(y_C-y_B)+(y_A-y_B)(x_C-x_B)} \\]\n\\[ \\beta = \\frac{-(x-x_C)(y_A-y_C)+(y-y_C)(x_A-x_C)}{-(x_B-x_C)(y_A-y_C)+(y_B-y_C)(x_A-x_C)} \\]\n\\[ \\gamma = 1-\\alpha-\\beta \\]\n运用重心坐标系进行颜色插值见第九章笔记。\n向量 同高中和线性代数\n积分 内容同高数。不过在计算机图形学里我们更注重数值而不是分析。\n曲线、曲面 内容同高数。\nLinear Interpolation（线性内插） \\[ f(x)=y_i+\\frac{x-x_i}{x_{i+1}-x_i}(y_{i+1}-y_i) \\]\n离散概率 TODO\n连续概率 TODO\n蒙特卡罗积分 TODO\n","date":"2022-06-27T15:17:29+08:00","permalink":"https://kegalas.top/p/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6%E5%9F%BA%E7%A1%80%E7%AC%AC%E4%BA%94%E7%89%88-%E7%AC%AC%E4%BA%8C%E7%AB%A0%E7%AC%94%E8%AE%B0/","title":"计算机图形学基础（第五版）-第二章笔记"},{"content":"以Hugo站点为根目录，首先将\\themes\\hugo-theme-stack\\layouts\\partials\\sidebar\\中的left.html复制到\\layouts\\partials\\sidebar\\中。\n然后修改复制后的文件，如下图。\n1.jpg\r第41行中高亮的部分原来是relLangURL，改成absURL。\n不过这个方法是否会导致其他问题还有待观察。\n","date":"2022-06-25T23:46:57+08:00","permalink":"https://kegalas.top/p/hugo%E7%9A%84stack%E7%9A%AE%E8%82%A4%E4%B8%AD%E4%BD%BF%E5%BE%97mailto%E8%B6%85%E9%93%BE%E6%8E%A5%E8%83%BD%E5%A4%9F%E7%9B%B4%E6%8E%A5%E6%89%93%E5%BC%80%E7%94%B5%E5%AD%90%E9%82%AE%E4%BB%B6%E5%AE%A2%E6%88%B7%E7%AB%AF/","title":"Hugo的Stack皮肤中使得mailto超链接能够直接打开电子邮件客户端"},{"content":"加减法 \\[ (a\\pm b)\\%p = [(a\\%p)\\pm (b\\%p)]\\%p \\]\n乘法 \\[ (a\\times b)\\%p = [(a\\%p)\\times (b\\%p)]\\%p \\]\n除法 \\[ (a/b)\\%p = (a\\times b^{-1})\\%p=[(a\\%p)\\times (b^{-1}\\%p)]\\%p \\]\n其中，\\(b^{-1}\\)是\\(b\\)在模\\(p\\)意义下的乘法逆元。\n","date":"2022-06-25T23:37:59+08:00","permalink":"https://kegalas.top/p/%E5%8F%96%E4%BD%99%E8%BF%90%E7%AE%97%E7%9A%84%E5%88%86%E9%85%8D%E5%BE%8B/","title":"取余运算的分配律"},{"content":"[TOC]\n运动学 位移 位移：\\(\\Delta\\bm{r}\\)\n位移的大小：\\(|\\Delta\\bm{r}|\\)\n位矢大小的增量：\\(|\\Delta r|\\)\n其中后两者一般是不相等的，不能搞混。\n速度 平均速度 \\[ \\overline{\\bm{v}}=\\frac{\\bm{r}(t+\\Delta t)-\\bm{r}(t)}{\\Delta t}=\\frac{\\Delta\\bm{r}}{\\Delta t} \\]\n平均速度的大小 \\[ |\\overline{\\bm{v}}|=\\left|\\frac{\\Delta\\bm{r}}{\\Delta t}\\right| \\]\n同样的一般有\n\\[ |\\overline{\\bm{v}}|\\neq\\left|\\frac{\\Delta r}{\\Delta t}\\right| \\]\n瞬时速度 \\[ \\bm{v}=\\frac{d\\bm{r}}{dt} \\]\n速度的大小常称速率。\n\\[ |\\bm{v}|=\\left|\\frac{d\\bm{r}}{dt}\\right| \\]\n同样一般有\n\\[ |\\bm{v}|\\neq \\left|\\frac{dr}{dt}\\right| \\]\n加速度 平均加速度 \\[ \\overline{\\bm{a}}=\\frac{\\Delta\\bm{v}}{\\Delta t} \\]\n瞬时加速度 \\[ \\bm{a}=\\frac{d\\bm{v}}{dt} \\]\n关于加速度的大小和一般不相等与（）的性质类似于速度，不再介绍。\n直角坐标表示运动 其位移、速度、加速度都可以分成几个坐标分量来计算，总的位移、速度、加速度则是勾股定理的形式，不再介绍。\n自然坐标法表示运动 \\[ \\bm{v}=\\frac{ds}{dt}\\bm{\\tau} \\]\n其中\\(\\bm{\\tau}\\)是切向量。\n\\[ \\bm{a}_n=a_n\\bm{n}=\\frac{v^2}{r}\\bm{n} \\]\n其中\\(n\\)是法向量，\\(r\\)是曲率半径，曲率半径计算见高数上整理。\n\\[ \\bm{a}_\\tau=a_\\tau\\bm{\\tau}=\\frac{dv}{dt}\\bm{\\tau} \\]\n\\[ \\bm{a=a}_n+\\bm{a}_\\tau \\]\n圆周运动的角量表示 角坐标 \\[ \\theta=\\theta(t) \\]\n角速度和角平均速度 \\[ \\overline{\\omega}=\\frac{\\Delta\\theta}{\\Delta t} \\]\n\\[ \\omega=\\frac{d\\theta}{dt} \\]\n角加速度和角平均加速度 \\[ \\overline{\\beta}=\\frac{\\Delta\\omega}{\\Delta t} \\]\n\\[ \\beta=\\frac{d\\omega}{dt}=\\frac{d^2\\theta}{dt^2} \\]\n线速度、加速度与角速度的关系 \\[ v=r\\omega\\\\ a_\\tau=r\\beta\\\\ a_n=r\\omega^2 \\]\n坐标系变换 \\[ \\bm{v}_a=\\bm{v}_r+\\bm{u} \\]\n即绝对速度等于相对于坐标系的速度与坐标系的绝对速度的矢量和。\n\\[ \\bm{a}_a=\\bm{a}_r+\\bm{a}_e \\]\n类似。\n牛顿运动定律 第一定律 \\[ R=\\sum_i\\bm{F}_i=0 \\]\n也可以将\\(\\bm{F}\\)写成坐标分量的形式。\n第二定律 \\[ \\bm{R}=\\sum_i\\bm{F}_i=\\frac{d(m\\bm{v})}{dt} \\]\n质量为常量时\n\\[ \\bm{R}=m\\frac{d\\bm{v}}{dt}=m\\bm{a} \\]\n可以写作坐标分量和切向量、法向量分量的形式。\n第三定律 \\[ \\bm{F}_1=\\bm{F}_2 \\]\n刚体的平动 任意时刻，平动刚体上个点的速度、加速度都相同。\n力学 常见的几种力 万有引力 \\[ \\bm{F}_{21}=-G\\frac{m_1m_2}{r^2}\\bm{r}^0\\\\ G=6.67\\times10^{-11}\\quad m^2/(kg\\cdot s^2) \\]\n弹性力 \\[ F_x=-kx \\]\n摩擦力 静摩擦力\n\\[ f_{max}=\\mu_0N \\]\n前者为静摩擦系数，后者为支持力。\n滑动摩擦力\n\\[ f=\\mu N \\]\n前者为滑动摩擦系数。\n力矩 \\[ M_O=\\bm{r}\\times\\bm{F} \\]\n单位：\\(N\\cdot m\\)\n转动惯量 \\[ J_z=\\int_Vr^2dm \\]\n常见物体的转动惯量计算公式 5.2 平行轴定理 5.11 \\[ J_z\u0026#39;=J_z+Mh^2 \\]\n转动惯量和力矩的关系 \\[ M_z=J_z\\beta \\]\n功和能 功 恒力做功 \\[ A=\\bm{F}\\cdot\\bm{s}=Fscos\\theta \\]\n变力做功 \\[ A=\\int^b_{a(L)}\\bm{F}\\cdot d\\bm{r} \\]\n通常会拆分成对坐标系求曲线积分。\n平均功率 \\[ P=\\frac{\\Delta A}{\\Delta t} \\]\n瞬时功率 \\[ P=\\frac{dA}{dt} \\]\n\\[ P=\\frac{\\bm{F}\\cdot d\\bm{r}}{dt}=\\bm{F}\\cdot \\bm{v}=Fvcos\\theta \\]\n几种常见力的功 重力的功 \\[ A=mg(z_1-z_2) \\]\n万有引力的功 \\[ A=GmM(\\frac{1}{r_2}-\\frac{1}{r_1}) \\]\n弹性力的功 \\[ A=\\frac{1}{2}k\\lambda_1^2-\\frac{1}{2}k\\lambda_2^2 \\]\n动能定理 质点动能定理 \\[ dA=d(\\frac{1}{2}mv^2) \\]\n\\[ A=\\frac{1}{2}mv_1^2-\\frac{1}{2}mv_2^2 \\]\n质点系动能定理 \\[ \\sum_i A_i=E_{k2}-E_{k1} \\]\n势能、机械能守恒定律 保守力 做功只与始末位置有关而与路径无关的力。\n势能 零势能点\\(M_0\\)，空间中的某个点\\(M\\)\n\\[ E_p=\\int_M^{M_0}\\bm{F}\\cdot d\\bm{r} \\]\n重力势能 \\[ E_p=mgz \\]\n万有引力势能 \\[ E_p=-G\\frac{mM}{r} \\]\n弹性势能 \\[ A=\\frac{1}{2}kx_1^2-\\frac{1}{2}kx_2^2 \\]\n绕定轴转动刚体的动能、动能定理 动能 \\[ E=\\frac{1}{2}J_z\\omega^2 \\]\n力矩的功 \\[ A=\\int_{\\theta_1}^{\\theta_2}M_z(\\bm{F})d\\theta \\]\n动能定理 \\[ A=\\frac{1}{2}J_z\\omega_2^2-\\frac{1}{2}J_z\\omega_1^2 \\]\n冲量、动量、角动量 质点系动量定理 \\[ d(m\\bm{v})=\\bm{F}dt \\]\n\\[ \\bm{I}=m\\bm{v}_2-m\\bm{v}_1=\\int^{t_2}_{t_1}\\bm{F}dt \\]\n如果是恒力\n\\[ m\\bm{v}_2-m\\bm{v}_1=\\bm{F}(t_2-t_1) \\]\n质点系动量定理 \\[ \\sum_i m_i\\bm{v}_i-\\sum_i m\\bm{v}_{i0}=\\sum_i\\int^{t}_{t_0}\\bm{F}_i dt \\]\n质点系动量守恒定律 作用在质点系上的所有外力的矢量和为零，则该质点系的动量保持不变。\n如果某个方向的矢量和为零，则这个方向上的动量保持不变。\n\\[ \\sum_i m_i\\bm{v}_{ix}=C \\]\n\\(C\\)是常量\n质心、质心运动定理 质心位置 见高数下整理\n质心运动定理 质点系质心的运动，可以看成为一个质点的运动，这个质点集中了整个质点系的质量，也集中了质点系收到的所有外力。\n动量矩和动量矩守恒定律 动量矩 \\[ \\bm{L}_O=\\bm{r}\\times m\\bm{v} \\]\n\\[ L_z=J_z\\omega \\]\n动量矩定理 \\[ \\frac{d\\bm{L_O}}{dt}=\\bm{r}\\times\\bm{F}=\\bm{M}_O \\]\n动量矩守恒定律 当作用在质点上的合理对固定点之矩总是为零时，质点动量对该点的矩为常矢量。即\n\\[ \\bm{M}_O=0\\Rightarrow \\bm{L}_O=\\bm{C} \\]\n\\(\\bm{C}\\)是常矢量。\n刚体绕定轴转动的动量矩定理 \\[ (J_z\\omega)_t-(J_z\\omega)_{t_0}=\\int^t_{t_0}M_zdt \\]\n刚体绕定轴转动的动量矩守恒定律 \\[ M_z=0\\Rightarrow J_z\\omega=C \\]\n机械振动 简谐振动 \\[ x=Acos(\\omega t+\\varphi) \\]\n\\[ v=\\overset{\\cdot}{x}=-A\\omega sin(\\omega t+\\varphi) \\]\n\\[ a=\\overset{\\cdot\\cdot}{x}=-A\\omega^2 cos(\\omega t+\\varphi) \\]\n对于弹簧振子的周期：\n\\[ T=\\frac{2\\pi}{\\omega}=2\\pi\\sqrt{\\frac{m}{k}} \\]\n对于单摆的周期：\n\\[ T=2\\pi\\sqrt{\\frac{l}{g}} \\]\n弹簧串联并联和弹性系数 串联 \\[ k=\\frac{k_1k_2}{k_1+k_2} \\]\n并联 \\[ k=k_1+k_2 \\]\n注：有一种两根弹簧中间连了物体的，是一种并联。\n谐振动的能量 \\[ E=\\frac{1}{2}kA^2 \\]\n一个周期内，动能和势能的平均大小：\n\\[ \\overline{E_p}=\\frac{1}{4}kA^2 \\]\n\\[ \\overline{E_k}=\\frac{1}{4}kA^2 \\]\n谐振动的合成 同方向，同频率的合成 频率不变\n\\[ A=\\sqrt{A_1^2+A_2^2+2A_1A_2cos(\\varphi_2-\\varphi_1)} \\]\n\\[ \\varphi = arctan\\frac{A_1sin\\varphi_1+A_2sin\\varphi_2}{A_1cos\\varphi_1+A_2cos\\varphi_2} \\]\n同方向不同频率的合成 \\[ A=\\sqrt{A_1^2+A_2^2+2A_1A_2cos(\\omega_2-\\omega_1)t} \\]\n\\[ \\tau=\\frac{2\\pi}{|\\omega_2-\\omega_1|} \\]\n\\[ \\nu=\\frac{|\\omega_2-\\omega_1|}{2\\pi}=|\\nu_2-\\nu_1| \\]\n\\(\\nu\\)为拍频。\n两个相互垂直谐振动的合成 根据参数方程求出平面解析式。\n机械波 机械波的产生和传播 拉紧的绳子，横波的波速为\n\\[ u_t=\\sqrt{\\frac{T}{\\mu}} \\]\n其中\\(T\\)是绳子的张力，\\(\\mu\\)是线密度。\n平面简谐波 波函数 正向传播：\n\\[ y(x,t)=Acos\\left[\\omega\\left(t-\\frac{x}{u}\\right)+\\varphi_0\\right] \\]\n或者写成\n\\[ y(x,t)=Acos\\left[2\\pi\\left(\\frac{t}{T}-\\frac{x}{\\lambda}\\right)+\\varphi_0\\right] \\]\n负向传播：\n\\[ y(x,t)=Acos\\left[\\omega\\left(t+\\frac{x}{u}\\right)+\\varphi_0\\right] \\]\n波的能量 能量 设绳子每单位长度的质量为\\(\\mu\\)，线元总机械能：\n\\[ W=W_k+W_p=\\mu\\Delta xA^2\\omega^2sin^2\\left[\\omega\\left(t-\\frac{x}{u}\\right)+\\varphi_0\\right] \\]\n能量密度 把单位体积中波的能量称为波的能量密度：\n\\[ w=\\frac{W}{\\Delta V}=\\frac{W}{\\Delta x\\Delta S}=\\rho A^2\\omega^2sin^2\\left[\\omega\\left(t-\\frac{x}{u}\\right)+\\varphi_0\\right] \\]\n能流密度（波的强度） \\[ I=\\overline{w}u \\]\n\\[ I=\\frac{1}{2}\\rho A^2\\omega^2u \\]\n\\[ \\bm{I}=\\overline{w}\\bm{u} \\]\n\\[ w_{max}=2\\overline{w} \\]\n\\[ I=\\frac{P}{S} \\]\n其中\\(P\\)是功率，\\(S\\)是波面面积。\n平面波和球面波的振幅 平面简谐波在理想无吸收的、均匀媒质中传播时振幅不变。\n球面波在均匀、无吸收媒质中传播，有\n\\[ \\frac{A_1}{A_2}=\\frac{r_2}{r_1} \\]\n即该点的振幅和到波源的距离成反比\n波的吸收 \\[ I=I_0e^{-ax} \\]\n波的干涉 干涉条件：频率相同、振动方向相同、相位差恒定。\n\\[ A^2=A_1^2+A_2^2+2A_1A_2cos\\Delta\\varphi \\]\n\\[ I=I_1+I_2+2\\sqrt{I_1I_2}cos\\Delta\\varphi \\]\n其中上面两式中\n\\[ \\Delta\\varphi=(\\varphi_2-\\varphi_1)-2\\pi\\frac{r_2-r_1}{\\lambda} \\]\n如果两个波源的初相位相同，则\\(\\Delta\\varphi\\)只取决于波程差\\(\\delta=r_1-r_2\\)，于是干涉相长的条件为：\n\\[ \\delta=r_1-r_2=\\pm k\\lambda,\\quad k=0,1,2,\\cdots \\]\n干涉相消的条件为：\n\\[ \\delta=r_1-r_2=\\pm (2k+1)\\frac{\\lambda}{2},\\quad k=0,1,2,\\cdots \\]\n驻波 形成驻波的条件： \\[ L=n\\frac{\\lambda}{2},\\quad n=1,2,3,\\cdots \\]\n驻波波函数 \\[ y=2Acos2\\pi\\frac{x}{\\lambda}\\cdot cos2\\pi\\nu t \\]\n多普勒效应 波源\\(S\\)静止，观察者相对于波源的速度为\\(v_O\\)，靠近为正值，远离为负值。则观察者接收到的频率为： \\[ \\nu=(1+\\frac{v_O}{u})\\nu_0 \\]\n观察者静止，波源相对于观察者的速度为\\(v_S\\)，靠近为正值，远离为负值。则观察者接收到的频率为： \\[ \\nu=\\frac{u}{u-v_S}\\nu_0 \\]\n波动光学 光的干涉 相干叠加的条件：频率相同、光矢量振动方向平行、相位差恒定。\n杨氏双缝干涉 干涉加强的条件：\n\\[ \\delta=\\pm 2k\\frac{\\lambda}{2} \\]\n干涉相消的条件：\n\\[ \\delta=\\pm(2k+1)\\frac{\\lambda}{2} \\]\n屏上相邻明条纹或相邻暗条纹之间的间距为\n\\[ \\Delta x=\\frac{D\\lambda}{d} \\]\n\\(D\\)是双缝到屏的距离，\\(d\\)是双缝间距。\n洛埃镜 半波损失的条件：\n波从波疏介质射向波密介质时反射过程中，反射波会相对于入射波有相位突变\\(\\pi\\)\n光程与光程差 数值上，光程等于介质折射率乘以光在介质中传播的路程，经过多重介质时，光程\\(=\\sum_in_ir_i\\)\n光程差：\n\\[ \\delta=n_2r_2-n_1r_1 \\]\n薄膜干涉 等厚干涉 干涉图样中同一干涉条纹对应于薄膜上厚度相同点的连线，这种条纹称为等厚干涉条纹。\n劈尖干涉 显然要考虑半波损失，假设为垂直入射，则明条纹的条件为\n\\[ \\delta=2d+\\frac{\\lambda}{2}=2k\\frac{\\lambda}{2},\\quad k=1,2,3,\\cdots \\]\n暗条纹的条件是\n\\[ \\delta=2d+\\frac{\\lambda}{2}=(2k+1)\\frac{\\lambda}{2},\\quad k=0,1,2,\\cdots \\]\n牛顿环 \\(R\\)是平凸透镜的曲率半径，\\(r\\)是条纹半径。\n明条纹：\n\\[ r=\\sqrt{(2k-1)\\frac{R\\lambda}{2}},\\quad k=1,2,3,\\cdots \\]\n暗条纹：\n\\[ r=\\sqrt{k\\lambda R} \\]\n等倾干涉 因干涉图样中同一干涉条纹是来自薄膜表面的等倾角光纤经透镜聚焦后的轨迹，故称为等倾干涉条纹。\n迈克尔逊干涉仪 若视场从最亮到第\\(N\\)次最亮出现时，反光镜移动的距离为\n\\[ \\Delta d=N\\frac{\\lambda}{2} \\]\n相干长度 两个分光束产生干涉效应的最大光程差\\(\\delta_m\\)为波列长度\\(L\\)，称为相干长度\n相干时间 \\[ \\Delta t=\\frac{\\delta_m}{c} \\]\n惠更斯-菲涅尔原理 同一波前上各点发出的次波是相干波，经过传播在空间某点相遇时的叠加是相干叠加。\n单缝的夫琅禾费衍射 菲涅尔半波带法研究分布 \\(a\\)是夹缝宽度\n暗条纹：\n\\[ asin\\varphi = \\pm 2k\\frac{\\lambda}{2},\\quad k=1,2,3,\\cdots \\]\n明条纹：\n\\[ asin\\varphi=\\pm(2k+1)\\frac{\\lambda}{2},\\quad k=1,2,3,\\cdots \\]\n其中中央零级明条纹：\n\\[ asin\\varphi=0 \\]\n中央明纹的宽度是\n\\[ -\\lambda\u0026lt;asin\\varphi\u0026lt;\\lambda \\]\n当\\(\\varphi\\)很小时，有\\(sin\\varphi\\approx\\varphi\\approx\\frac{\\lambda}{a}\\)\n振幅矢量合成法研究强度 假设中央明纹的光强为\\(I_0\\)，则某一点\\(P\\)的光强为\n\\[ I=I_0\\left(\\frac{sinu}{u}\\right)^2 \\]\n艾里斑 \\[ \\theta_0\\approx sin\\theta_0=1.22\\frac{\\lambda}{D} \\]\n\\(D\\)是圆孔直径。\n衍射光栅及光栅光谱 刻痕间距为\\(a\\)，刻痕宽度为\\(b\\)，则\\(d=a+b\\)称为光栅常数。\\(N\\)是光栅的缝数，\\(n\\)是光栅一定长度内的缝数，单位通常为条/\\(mm\\)。并且有\\(d=1/n\\)\n光栅方程 光栅方程，或衍射明条纹的条件如下（只考虑干涉而不考虑各个缝的衍射的情况）\n\\[ (a+b)sin\\varphi=\\pm k\\lambda,\\quad k=0,1,2,\\cdots \\]\n主极大条纹 满足光栅方程的明条纹称为主极大条纹。\n缺级 现在来考虑各个缝的衍射。\n同时满足\n\\[ (a+b)sin\\varphi=\\pm k\\lambda \\]\n和\n\\[ asin\\varphi=\\pm k\u0026#39;\\lambda,\\quad k\u0026#39;=1,2,\\cdots \\]\n的为光谱线的缺级\n缺级的级数为\n\\[ k=k\u0026#39;\\frac{a+b}{a} \\]\n暗纹条件 \\[ N(a+b)sin\\varphi=\\pm m\\lambda \\]\n其中\\(m=1,2,\\cdots,(N-1),(N+1),\\cdots,(2N-1),(2N+1),\\cdots\\)，即除去\\(N\\)的整倍数。\n易知，两个主极大条纹间有\\((N-1)\\)条暗纹，以及\\((N-2)\\)条次级大。\n线偏振光、自然光 线偏振光 光矢量只限于单一方向振动的光。\n自然光 无论哪一个方向的振动都不比其他方向占优势。\n偏振片的起偏和检偏、马吕斯定律 起偏和检偏 自然光获得偏振光的过程叫起偏。\n对偏振光透过偏振片的角度的观察叫检偏。\n马吕斯定律 \\[ I=I_0cos^2\\alpha \\]\n对于自然光透过偏振片\n\\[ I=I_0/2 \\]\n反射和折射产生的偏振、布儒斯特定律 反射和折射产生的偏振 反射光为偏振方向垂直入射面成分较多的部分偏振光。\n布儒斯特定律 当入射角\\(i\\)与反射角\\(\\gamma\\)之和为\\(90\\degree\\)时，反射光称为光矢量与入射面垂直的完全偏振光。\n公式表示为\n\\[ tani=\\frac{n_2}{n_1} \\]\n双折射现象 晶体的双折射现象：\n其中一束折射光始终在入射面内，并遵守折射定律，称为寻常光，简称\\(o\\)光。另一束折射光一般不在入射面内，且不遵守折射定律，称为非常光，简称为\\(e\\)光。\n热力学 平衡态、理想气体状态方程 \\[ t=T-273.15 \\]\n理想气体状态方程（克拉伯龙方程）：\n\\[ pV=\\nu RT \\]\n注，大学物理一般用\\(n\\)表示分子数密度，而用\\(\\nu\\)表示物质的量\n功、热量、内能、热力学第一定律 绝热过程中外界对系统做功，则内能变化为\n\\[ E_2-E_1=A_Q \\]\n假设外界不对系统做功，系统内能变化和外界给系统的热量的关系：\n\\[ E_2-E_1=Q \\]\n热力学第一定律\n\\[ Q=(E_2-E_1)+A \\]\n即系统从外界吸收能力，一部分转化为内能，一部分则对外界做功\n对于无限小的变化过程\n\\[ dQ=dE+dA \\]\n准静态过程中功和热量的计算 功 在一个优先的准静态过程中，当气体的体积变化时，气体对外界所做的功为\n\\[ A=\\int_{V_1}^{V_2}pdV \\]\n应用上述结果，热力学第一定律可以表示为\n\\[ Q=(E_2-E_1)+\\int_{V_1}^{V_2}pdV \\]\n热量、热容 \\[ Q=mc(T_2-T_1) \\]\n\\(c\\)是物体的比热容。不同物质的比热容值不同，并且同一物质的比热容值一般随温度而变。但在温度变化不大时，可以看做常量。\n假定\\(1mol\\)气体在等体过程中温度升高\\(\\Delta T\\)时，吸收的热量为\\(Q_V\\)，则气体的摩尔定体热容定义为\n\\[ C_V=\\lim\\limits_{\\Delta T\\to 0}\\frac{Q_V}{\\Delta T}=\\left(\\frac{dE}{dT}\\right)_V \\]\n假定\\(1mol\\)气体在等压过程中温度升高\\(\\Delta T\\)时，吸收的热量为\\(Q_p\\)，则气体的摩尔定压热容定义为\n\\[ C_V=\\lim\\limits_{\\Delta T\\to 0}\\frac{Q_p}{\\Delta T}=\\left(\\frac{dE}{dT}\\right)_p+p\\left(\\frac{dV}{dT}\\right)_p \\]\n理想气体的内能和\\(C_V\\)、\\(C_p\\) 气体的内能仅仅是其温度的函数，与体积等无关\n\\[ E=E(T) \\]\n\\[ C_p=C_V+R \\]\n即迈耶公式，单位一般为\\(J/(mol\\cdot K)\\)，\\(R=8.31\\)\n比热容比：\n\\[ \\gamma=\\frac{C_p}{C_V} \\]\n对单原子分子\n\\[ C_V\\approx \\frac{3}{2}R \\]\n对双原子气体分子\n\\[ C_V\\approx \\frac{5}{2}R \\]\n热力学第一定律对理想气体在典型准静态过程中的应用 等体过程 \\[ Q_V=E_2-E_1=\\nu C_V(T_2-T_1) \\]\n由克拉伯龙公式\n\\[ Q_V=\\frac{V}{R}C_V(p_2-p_1) \\]\n等压过程 \\[ A=p(V_2-V_1)=\\nu R(T_2-T_1) \\]\n\\[ Q_p=vC_p(T_2-T_1) \\]\n\\[ E_2-E_1=Q_p-A=\\nu C_V(T_2-T_1) \\]\n等温过程 等温膨胀过程中，吸收的热量全部用来对外做功\n\\[ Q_T=A=\\nu RTln\\frac{p_1}{p_2} \\]\n绝热过程 绝热过程中\\(Q=0\\)，所以有\\(A=E_1-E_2=-vC_V(T_2-T_1)\\)\n\\[ A=\\frac{1}{\\gamma-1}(p_1V_1-p_2V_2)=-\\frac{\\nu R}{\\gamma-1}(T_2-T_1) \\]\n循环过程 循环过程 \\[ A=Q_1-Q_2 \\]\n循环效率 \\[ \\eta=\\frac{A}{Q_1}=1-\\frac{Q_2}{Q_1} \\]\n制冷系数 \\[ w=\\frac{Q_2}{A} \\]\n绝对零度不可达原理 不可能用有限的步骤使物体达到绝对零度。\n热力学第二定律 开尔文表述 不可能只从单一热源吸收热量，使之完全转化为功而不引起其他变化。\n克劳修斯表述 不可能使热量从低温物体传向高温物体而不引起其他变化。\n可逆与不可逆过程 如果过程的每一步都可沿相反的方向进行，同时不引起外界的任何变化，则称可逆过程。对于某一过程，用任何方法都不能使系统和外界恢复到原来状态，称为不可逆过程。\n热力学第二定律揭示了，自然界的一切自发过程都是单方向进行的不可逆过程。\n卡诺热机 卡诺循环 两个等温过程和两个绝热过程组成。\n\\[ \\eta = 1-\\frac{T_2}{T_1} \\]\n\\[ w=\\frac{T_2}{T_1-T_2} \\]\n卡诺定理 温度为\\(T_1,T_2\\)的两个给定热源之间工作的一切可逆热机，效率相同，都等于理想气体可逆卡诺热机的效率。这两个热源之间工作的一切不可逆热机，其效率都不可能大于卡诺热机。\n气体动理论 气体分子的热运动 平衡状态下，平均速度\n\\[ \\overline{v_x}=\\overline{v_y}=\\overline{v_z}=0 \\]\n统计平均值为\n\\[ \\overline{v^2_j}=\\frac{\\sum_i\\Delta N_iv^2_{ij}}{N},\\quad j=x,y,z \\]\n且有\n\\[ \\overline{v^2_x}=\\overline{v^2_y}=\\overline{v^2_z}=\\overline{v^2}/3 \\]\n大量分子平均平动动能的统计平均值为\n\\[ \\overline{\\varepsilon}=\\frac{1}{2}\\mu\\overline{v^2}=\\frac{\\mu\\sum_i\\Delta N_iv^2_{i}}{2N} \\]\n其中\\(\\mu\\)为一个分子的质量\n理想气体的压强公式 \\[ p=\\frac{2}{3}n(\\frac{1}{2}\\mu\\overline{v^2})=\\frac{2}{3}n\\overline{\\varepsilon} \\]\n麦克斯韦速度分布定律 麦克斯韦速度分布定律 \\[ f(v)=4\\pi\\left(\\frac{\\mu}{2\\pi kT}\\right)^{3/2}v^2e^{-\\frac{\\mu v^2}{2kT}} \\]\n其中\n\\[ k=\\frac{R}{N_A}=\\frac{8.31}{6.022\\times 10^{23}}=1.38\\times 10^{-23} J/K \\]\n称为玻尔兹曼常数。\n\\[ \\frac{dN}{N}=f(v)dv \\]\n\\[ \\int_0^\\infty f(v)dv=1 \\]\n分子速率的三种统计平均值 \\[ \\overline{v}=\\sqrt\\frac{8kT}{\\pi\\mu}=1.59\\sqrt{\\frac{RT}{M}} \\]\n\\[ \\sqrt{\\overline{v^2}}=\\sqrt\\frac{3kT}{\\mu}=1.73\\sqrt{\\frac{RT}{M}} \\]\n\\[ v_p=\\sqrt\\frac{2kT}{\\mu}=1.41\\sqrt{\\frac{RT}{M}} \\]\n温度的微观本质 \\[ \\overline{\\varepsilon}=\\frac{1}{2}\\mu\\overline{v^2}=\\frac{3}{2}kT \\]\n能量按自由度均分定理 能量按自由度均分定理 处于平衡态的理想气体分子，无论作何种运动，相应于分子每个自由度的平均动能都相等，并且都等于\\(kT/2\\)。\n如果气体分子有\\(i\\)个自由度，那么每个分子的平均总动能为\\(ikT/2\\)\n理想气体的内能 \\(1mol\\)气体中有\\(N_0\\)个分子，若不考虑振动能量，则\\(1mol\\)理想气体的内能为\n\\[ E=N_0\\frac{i}{2}kT=\\frac{i}{2}RT \\]\n气体的摩尔热容 \\[ C_V=\\frac{i}{2}R \\]\n\\[ C_p=\\frac{(i+2)}{2}R \\]\n\\[ \\gamma=\\frac{i+2}{i} \\]\n玻尔兹曼分布律 \\[ n=n_0e^{-\\frac{\\varepsilon_p}{kT}} \\]\n\\(n_0\\)是零势能面的分子数密度。\n可以推知\n\\[ p=nkT=p_0e^{-\\frac{\\varepsilon_p}{kT}} \\]\n分子的平均自由程 平均碰撞频率 \\[ \\overline{z}=\\sqrt{2}\\pi d^2\\overline{v}n \\]\n分子的平均自由程 \\[ \\overline{\\lambda}=\\frac{\\overline{v}}{\\overline{z}}=\\frac{1}{\\sqrt{2}\\pi d^2n}=\\frac{kT}{\\sqrt{2}\\pi d^2p} \\]\n","date":"2022-06-13T19:13:12+08:00","permalink":"https://kegalas.top/p/%E5%A4%A7%E5%AD%A6%E7%89%A9%E7%90%86%E5%85%AC%E5%BC%8F%E6%95%B4%E7%90%86/","title":"大学物理公式整理"},{"content":"命题逻辑 联结词 否定联结词 \\(P\\) \\(\\neg P\\) 0 1 1 0 合取联结词 \\(P\\) \\(Q\\) \\(P\\wedge V\\) 0 0 0 0 1 0 1 0 0 1 1 1 析取联结词 \\(P\\) \\(Q\\) \\(P\\vee V\\) 0 0 0 0 1 1 1 0 1 1 1 1 条件联结词 \\(P\\) \\(Q\\) \\(P\\to V\\) 0 0 1 0 1 1 1 0 0 1 1 1 双条件联结词 \\(P\\) \\(Q\\) \\(P\\leftrightarrow V\\) 0 0 1 0 1 0 1 0 0 1 1 1 联结词的运算优先级 从高到低依次为，否定、合取、析取、条件、双条件\n命题公式 一些定义 定义1，命题变元与常元\n用于代表取值为真\\((T、1)\\)或假\\((F、0)\\)之一的变量，称为命题变元，通常用大写字母或带下标或上标的大写字母表示，如\\(P、Q、R、P_1、P_2\\)等。将\\(T\\)和\\(F\\)称为命题常元。\n通常把由命题常元、命题变元、联结词以及括弧组成的式子称为表达式,但是只有按照特定组合规则所形成的表达式才有实际意义。\n定义2，命题公式\n命题合式公式(简称命题公式):\n(1)(基础)单个命题常元或命题变元是命题合式公式\n(2)(归纳)如果A和B是命题公式,则\\(\\neg A\\)、\\((A\\wedge B)\\)、\\((A\\vee B)\\)、\\((A\\to B)\\)、\\((A\\leftrightarrow B)\\)是命题合式公式。\n(3)(极小性)只有有限次地应用条款(1)和(2)生成的表达式オ是命题合式公式\n定义3，子公式\n若\\(B\\)是命题公式\\(A\\)的一个连续段且\\(B\\)也是命题公式,则称\\(B\\)是\\(A\\)的个子公式。\n命题公式的赋值 对于有\\(n\\)个变元的公式，有\\(2^n\\)种不同赋值。\n永真式（重言式）\n一个命题公式在任何赋值下，其真值都为\\(T\\)，则称这个公式为永真式（重言式）\n永假式（矛盾式）\n一个命题公式在任何赋值下，其真值都为\\(F\\)，则称这个公式为永假式（矛盾式）\n偶然式\n既不是永真式也不是永假式，则为偶然式\n可满足式\n一个命题公式至少有一个赋值，使其真值为\\(T\\)，则称这个公式为可满足式。也即永真式和偶然式都是可满足式。不是可满足式的称为矛盾式。\n逻辑等价与蕴含 等价 定义\n给定两个命题公式\\(A\\)和\\(B4\\),设\\(P_1,P_2,\\cdots,P_n\\)为所有出现在A和B中的命题变元，但\\(P_i\\)不一定在\\(A\\)和\\(B\\)中同时出现，若对于\\(P_1,P_2,\\cdots,P_n\\)的任一赋值,\\(A\\)和\\(B\\)的真值都相同，则称\\(A\\)和\\(B\\)逻辑等价，记做\\(A\\Leftrightarrow B\\),读做“\\(A\\)等价于\\(B\\)”。\n下面列出常见的命题等价公式\n几个定理\n定理1（代入规则）\n设\\(A\\)、\\(B\\)是命题公式，其中\\(A\\)是重言式，\\(P\\)是\\(A\\)中的命题变元，如果将\\(A\\)中每一处出现的P均用B代入，则所得命题公式\\(A\\)仍然是一个重言式\n定理2\n设\\(A\\)、\\(B\\)是命题公式，则\\(A\\)和\\(B\\)逻辑等价,当且仅当\\(A\\leftrightarrow B\\)是一个重言式。\n定理3（替换规则）\n设\\(A\\)、\\(X\\)、\\(Y\\)是命题公式，\\(X\\)是\\(A\\)的子公式,且有\\(X\\Leftrightarrow Y\\)。如果将\\(A\\)中的\\(X\\)用\\(Y\\)来替换(不必每一处都替换)，则所得到的公式\\(B\\)与\\(A\\)等价,即\\(B\\Leftrightarrow A\\)。\n定理4（传递规则）\n设\\(A\\)、\\(B\\)、\\(C\\)是命题公式，若\\(A\\Leftrightarrow B\\)且\\(B\\Leftrightarrow C\\),则有\\(A\\Leftrightarrow C\\)。\n蕴含 设\\(A\\)、\\(B\\)是命题公式，如果\\(A\\to B\\)是一个重言式,则称\\(A\\)蕴含\\(B\\),记做\\(A\\Rightarrow B\\)。\n一些常见的蕴含公式\n1.3.7-1 1.3.7-2 证明蕴含式\\(A\\Rightarrow B\\)的一些方法：\n肯定前件法。假设\\(A\\)为\\(T\\)，如果能够推出\\(B\\)为\\(T\\)，则有\\(A\\Rightarrow B\\) 否定后件法。假设\\(B\\)为\\(F\\)，如果能够推出\\(A\\)为\\(F\\)，则有\\(A\\Rightarrow B\\) 几个定理\n定理1\n设\\(A\\)和\\(B\\)是任意两个命题公式，\\(A\\Leftrightarrow B\\)当且仅当\\(A\\Rightarrow B\\)且\\(B\\Rightarrow A\\).\n几个性质\n性质1\n设\\(A\\)、\\(B\\)是命题公式，如果\\(A\\Rightarrow B\\)且\\(A\\)是重言式，则\\(B\\)也是重言式\n性质2\n蕴含关系是传递的，即\\(A\\Rightarrow B\\)且\\(B\\Rightarrow C\\)，则\\(A\\Rightarrow C\\).\n性质3\n如果\\(A\\Rightarrow B\\)且\\(A\\Rightarrow C\\)，则\\(A\\Rightarrow B\\wedge C\\)\n性质4\n如果\\(A\\Rightarrow C\\)且\\(B\\Rightarrow C\\)，则\\(A\\vee B\\Rightarrow C\\)\n对偶式 定义\n设有命题公式\\(A\\)，其中仅含有联结词\\(\\neg,\\vee,\\wedge\\)，如果将\\(A\\)中的\\(\\vee\\)替换为\\(\\wedge\\)，\\(\\wedge\\)替换为\\(\\vee\\)，常元\\(T,F\\)也互相替换，所得到的公式记为\\(A^*\\)，则称\\(A^*\\)为\\(A\\)的对偶式。\n显然有，\\(A\\)也是\\(A^*\\)的对偶式，并且\\((A^*)^*=A\\)\n几个定理\n定理1\n设\\(A\\)和\\(A^*\\)是对偶公式，其中仅含有联结词\\(\\neg,\\vee,\\wedge\\)；\\(P_1,P_2,\\cdots,P_n\\)是出现在\\(A\\)和\\(A^*\\)中的所有命题变元，于是有\n\\[ \\neg A(P_1,P_2,\\cdots,P_n)\\Leftrightarrow A^*(\\neg P_1,\\neg P_2,\\cdots,\\neg P_n) \\]\n\\[ A(\\neg P_1,\\neg P_2,\\cdots,\\neg P_n)\\Leftrightarrow\\neg A^*(P_1,P_2,\\cdots,P_n) \\]\n定理2\n设\\(A,B\\)是命题公式，则有\n如果\\(A\\Leftrightarrow B\\)，则\\(A^*\\Leftrightarrow B^*\\) 如果\\(A\\Rightarrow B\\)，则\\(B^*\\Rightarrow A^*\\) 范式 析取范式和合取范式 析取式\n仅由若干命题变元和若干命题变元之否定通过联结词\\(\\vee\\)构成的命题公式。\n合取式\n仅由若干命题变元和若干命题变元之否定通过联结词\\(\\wedge\\)构成的命题公式。\n析取范式\n一个命题公式被称为析取范式，当且仅当它具有如下形式\n\\[ A_1\\vee A_2\\vee\\cdots\\vee A_n \\]\n其中\\(A_1,A_2,\\cdots,A_n\\)是合取式。\n合取范式\n一个命题公式被称为合取范式，当且仅当它具有如下形式\n\\[ A_1\\wedge A_2\\wedge\\cdots\\wedge A_n \\]\n其中\\(A_1,A_2,\\cdots,A_n\\)是析取式。\n主析取范式 极小项\n一个含\\(n\\)个命题变元的合取式，如果其中每个变元和其否定不同时存在，但两者之一必须出现且仅出现一次，则称该合取式为极小项。\n\\(n\\)个命题变元\\(P_1,P_2,\\cdots,P_n\\)可构成\\(2^n\\)个不同的极小项，其形式为：\n\\[ \\tilde{P_1}\\wedge \\tilde{P_2}\\wedge\\cdots\\wedge \\tilde{P_n} \\]\n其中\\(\\tilde{P_i}\\)或者是\\(P_i\\)，或者是\\(\\neg P_i\\)\n可以用\\(n\\)位二进制编码表示极小项，例如\n\\[ m_{010}=\\neg P_1\\wedge P_2\\wedge\\neg P_3 \\]\n有如下三个性质：\n每一个极小项当其编码与赋值相同时，其真值为\\(T\\)，在其余\\(2^n-1\\)种赋值下其真值均为\\(F\\). 任意两个不同的极小项的合取式永假。 所有极小项的析取式永真。 主析取范式\n设\\(P_1,P_2,\\cdots,P_n\\)是命题公式\\(A\\)中包含的所有命题变元，若由\\(P_1,P_2,\\cdots,P_n\\)的若干极小项析取所构成的析取范式与\\(A\\)等价，则称该析取范式是\\(A\\)的主析取范式。\n有如下定理\n定理1\n在一个命题公式\\(A\\)的真值表中，使\\(A\\)的真值为\\(T\\)的所有赋值所对应的极小项构成的析取范式即为\\(A\\)的主析取范式。\n主合取范式 极大项\n一个含\\(n\\)个命题变元的析取式，如果其中每个变元和其否定不同时存在，但两者之一必须出现且仅出现一次，则称改合取式为极大项。\n\\(n\\)个命题变元\\(P_1,P_2,\\cdots,P_n\\)可构成\\(2^n\\)个不同的极小项，其形式为：\n\\[ \\tilde{P_1}\\vee \\tilde{P_2}\\vee\\cdots\\vee \\tilde{P_n} \\]\n其中\\(\\tilde{P_i}\\)或者是\\(P_i\\)，或者是\\(\\neg P_i\\)\n可以用\\(n\\)位二进制编码表示极大项，例如\n\\[ M_{101}=\\neg P_1\\vee P_2\\vee\\neg P_3 \\]\n（编码注意与极小项意义相反）\n有如下三个性质：\n每一个极大项当其真值赋值与编码相同时，其真值为\\(F\\)，在其余\\(2^n-1\\)种赋值下其真值均为\\(T\\). 任意两个不同的极大项的析取式永真。 所有极大项的合取式永假。 主合取范式\n设\\(P_1,P_2,\\cdots,P_n\\)是命题公式\\(A\\)中包含的所有命题变元，若由\\(P_1,P_2,\\cdots,P_n\\)的若干极大项合取所构成的合取范式与\\(A\\)等价，则称该合取范式是\\(A\\)的主合取范式。\n有如下定理\n定理1\n在一个命题公式\\(A\\)的真值表中，使\\(A\\)的真值为\\(F\\)的所有赋值所对应的极大项构成的合取范式即为\\(A\\)的主合取范式。\n定理\n设\\(A\\)的主析取范式的各个极小项的下标转为十进制，组成的集合为\\(S_1\\{i_1,i_2,\\cdots,i_k\\}\\)；主合取范式的各个极大项的下标转为十进制，组成的集合为\\(S_2=\\{j_1,j_2,\\cdots,j_t\\}\\)，则有\n\\[ S_1\\cap S_2=\\phi \\]\n\\[ S_1\\cup S_2=\\{0,1,2,\\cdots,2^n-1\\} \\]\n范式的计算 除了可以用真值表来算，还可以通过德摩根定律等将“\\(\\to\\)”等不是析取、合取、否定的联结词转化，直到只剩析取、合取、否定。再通过添加、删除括号转化为主合取范式或主析取范式。\n命题逻辑的推理理论 推理规则 P规则：在推导过程中，前提可以在任何步骤引入。 T规则：在推导过程中，如果由已经推出的一个或多个公式蕴含\\(S\\)，则公式\\(S\\)可以引入到推导过程中。 证明方法 无义证明法。如果能证明\\(P\\)恒为假，则有\\(P\\to Q\\)恒为真，即\\(P\\Rightarrow Q\\) 平凡证明法。如果能证明\\(Q\\)恒为真，则有\\(P\\to Q\\)恒为真，即\\(P\\Rightarrow Q\\) 直接证明法。从一组前提出发，利用公认的推理规则，逻辑演绎得到有效结论。 归谬法（即反证法）。 定理\n\\(H_1,H_2,\\cdots,H_m,C\\)是公式，如果存在公式\\(R\\)，使得\\(H_1,H_2,\\cdots,H_m,\\neg C\\Rightarrow R\\wedge\\neg R\\)，则有\\(H_1,H_2,\\cdots,H_m\\Rightarrow C\\)\nCP规则法。 \\(H_1,H_2,\\cdots,H_n,R,C\\)是命题公式，根据输出律\\(E_{22}\\)推知\n\\[ (H_1\\wedge H_2\\wedge\\cdots\\wedge H_n)\\to(R\\to C)\\Leftrightarrow(H_1\\wedge H_2\\wedge\\cdots\\wedge H_n\\wedge R)\\to C \\]\n因此，如果能够证明\\(H_1,H_2,\\cdots,H_n,R\\Rightarrow C\\)，则有\\(H_1,H_2,\\cdots,H_n\\Rightarrow R\\to C\\)\n谓词逻辑 谓词和量词 谓词 刻画单个个体的特性或者多个个体间关系的模式称为谓词。\n量词 全称量词\\(\\forall\\) 存在量词\\(\\exist\\) 几个规则\n应当使用\\(\\forall x(H(x)\\to D(x))\\)，而不能表示为\\(\\forall x(H(x)\\wedge D(x))\\)。\n应当使用\\(\\exist x(H(x)\\wedge D(x))\\)，而不能表示为\\(\\exist x(H(x)\\to D(x))\\)。\n谓词公式 定义\n谓词逻辑的合式公式（简称谓词公式）可由以下步骤生成 1. 原子公式（不出现联结词和量词的单个谓词）是谓词公式。 2. 如果\\(A\\)和\\(B\\)是谓词公式，则\\(\\neg A,(A\\wedge B),(A\\vee B),(A\\to B),(A\\leftrightarrow B)\\)是谓词公式 3. 如果\\(A\\)是谓词公式，并且\\(A\\)中有未被量化的个体变元\\(x\\)，则\\(\\forall xA(x)\\)和\\(\\exist xA(x)\\)是谓词公式。 4. 只有有限次应用步骤1、2、3所得到的的公式才是谓词公式。\n子公式\n若\\(B\\)是谓词公式\\(A\\)的一个连续段且\\(B\\)也是谓词公式，则称\\(B\\)是\\(A\\)的一个子公式。\n辖域\n紧跟\\(\\forall x\\)和\\(\\exist x\\)之后的最小的子公式称为该量词的辖域。\n约束变元\n在\\(\\forall x\\)和\\(\\exist x\\)辖域内\\(x\\)的一切出现称之为约束出现，这个\\(x\\)叫做约束变元。\n自由变元\n个体变元的非约束出现称为自由出现，自由出现的个体变元称为自由变元。\n约束变元的换名规则\n对某个约束变元换名时，需对量词的作用变元以及该量词辖域内所有受该量词约束的约束变元一起换名。 换名后的变元符号应是量词辖域内未出现的符号，最好是整个公式中未出现的符号。 谓词验算的永真公式 谓词公式的赋值 定义1\n对于一个谓词公式，若给它指定一个个体域\\(E\\)，再给所有谓词符均指派出确定的关系(具体的特性或关系)，给所有命题变元指派出确定命题(或者指定\\(T\\)或\\(F\\))，并为所有自由变元（注意不包含约束变元）分别指派\\(E\\)上确定的个体，则称为对谓词公式的一个赋值(指派或结识)。谓词公式经过赋值之后就变成了具有确定真值的命题。\n定义2\n设\\(A\\)是谓词公式，如果对于特定论域\\(E\\)上的任何赋值，\\(A\\)的真值都为真，则称谓词公式\\(A\\)在\\(E\\)上永真;如果对于特定论域\\(E\\)上的任何赋值，\\(A\\)的真值都为假，则称谓词公式\\(A\\)在\\(E\\)上永假;若特定论域\\(E\\)上存在一种赋值，使得\\(A\\)的真值都为真，则称谓词公式\\(A\\)在\\(E\\)上可满足。\n定义3\n设\\(A\\)是谓词公式，如果对于任何赋值，\\(A\\)的真值都为真，则称谓词公式\\(A\\)是永真式;如果对于任何赋值，\\(A\\)的真值都为假，则称谓词公式\\(A\\)是永假式;若存在一种赋值，使得\\(A\\)的真值为真，则称谓词公式\\(A\\)是可满足式。\n谓词演算的基本永真式 命题逻辑的等价式和蕴含式可在谓词逻辑中推广使用 量词的否定律 \\[ \\neg\\forall xP(x)\\Leftrightarrow \\exist x\\neg P(x) \\]\n\\[ \\neg\\exist xP(x)\\Leftrightarrow \\forall x\\neg P(x) \\]\n量词辖域的扩张与收缩律 2.3.2.3 量词的分配律 多重量词律 其他 \\(\\forall xP(x)\\Rightarrow P(y)\\)，\\(y\\)是论域中的任一确定个体。\n\\(P(y)\\Rightarrow\\exist xP(x)\\)，\\(y\\)是论域中的某个确定个体。\n\\(\\forall xP(x)\\Rightarrow\\exist xP(x)\\)\n谓词逻辑的推理理论 存在指定原则（ES） \\[ \\frac{\\exist xP(x)}{\\therefore P(a)} \\]\n\\(a\\)是个体常元，注意所指定的个体常元要使得谓词为真。\n全称指定原则（US） \\[ \\frac{\\forall xP(x)}{\\therefore P(y)} \\]\n\\(y\\)是自由变元，也可以指定到个体常元\\(a\\)\n\\[ \\frac{\\forall xP(x)}{\\therefore P(a)} \\]\n注意如果同时指定\\(\\exist xP(x)\\)和\\(\\forall xQ(x)\\)，应当先指定\\(P(a)\\)，再指定\\(Q(a)\\)，才能保证两者都为真。\n存在推广原则（EG） \\[ \\frac{P(a)}{\\therefore\\exist xP(x) } \\]\n全称推广原则（UG） \\[ \\frac{\\Gamma\\Rightarrow P(x)}{\\therefore\\Gamma\\Rightarrow\\forall xP(x)} \\]\n\\(\\Gamma\\)是已知公理和前提的合取，\\(\\Gamma\\)中没有自由变元\\(x\\)的出现。\n集合 集合的表示方法 列举法 描述法：用自然语言或谓词描述集合中元素的共同特征。 归纳定义法（见后） 集合间的关系 外延性公理\n两个集合\\(A,B\\)相等，记为\\(A=B\\)，当且仅当它们有相同的元素，即\n\\[ A=B\\Leftrightarrow \\forall x(x\\in A\\leftrightarrow x\\in B) \\]\n两个集合不相等，通常记为\\(A\\neq B\\)\n子集\n设\\(A、B\\)是任意的两个集合，若集合\\(A\\)的每个元素都是集合\\(B\\)的元素，则称\\(A\\)为\\(B\\)的子集或称\\(B\\)包含\\(A\\),记为\\(A\\subseteq B\\)或\\(B\\supseteq A\\)，用逻辑公式表示为\n\\[ A\\subseteq B\\Leftrightarrow\\forall x(x\\in A\\to x\\in B) \\]\n如果\\(A\\)不是\\(B\\)的子集，通常记为\\(A\\nsubseteq B\\)\n真子集\n如果集合\\(A\\)的每一个元素都属于\\(B\\)，但集合\\(B\\)中至少有一个元素不属于\\(A\\)，则称\\(A\\)为\\(B\\)的真子集，记为\\(A\\subset B\\)，用逻辑公式表示为\n\\[ A\\subset B\\Leftrightarrow\\forall x(x\\in A\\to x\\in B)\\wedge \\exist y(y\\in B\\wedge y\\notin A)\\Leftrightarrow(A\\subseteq B)\\wedge(A\\neq B) \\]\n全集\n在一定范围内所有事物组成的集合称为该范围内的全集记为\\(U\\)，用逻辑公式表示为\n\\[ U = \\{x|P(x)\\vee\\neg P(x)\\} \\]\n其中，\\(P(x)\\)是任意的谓词\n空集\n不含任何元素的集合称为空集，记为\\(\\phi\\)，用逻辑公式表示为\n\\[ \\phi = \\{x|P(x)\\wedge\\neg P(x)\\} \\]\n其中，\\(P(x)\\)是任意的谓词，并且显然有\\(|\\phi|=0\\)\n几个定理\n定理1\n空集是任一集合的子集，并且是任何非空集合的真子集。\n定理2\n设\\(A,B,C\\)是集合，若\\(A\\subseteq B\\)且\\(B\\subseteq C\\)，则\\(A\\subseteq C\\)。\n定理3\n集合\\(A,B\\)相等的充要条件是\\(A,B\\)互为子集。\n定理3.1\n对于任何集合\\(A\\)，有\\(A\\subseteq A\\)\n定理4\n空集是唯一的。\n集合的运算 集合的交，交集\n\\[ A\\cap B = \\{x|x\\in A\\wedge x\\in B\\} \\]\n集合的并，并集\n\\[ A\\cup B = \\{x|x\\in A\\vee x\\in B\\} \\]\n集合的差，相对补集\n\\[ A-B=\\{x|x\\in A\\wedge x\\notin B\\} \\]\n集合的补，绝对补集\n\\[ \\bar{A}=U-A=\\{x|x\\in U\\wedge x\\notin A\\} \\]\n集合的对称差\n\\[ A\\oplus B=(A-B)\\cup(B-A)=\\{x|(x\\in A\\wedge x\\notin B)\\vee(x\\in B\\wedge x\\notin A)\\} \\]\n集合的环积\n\\[ A\\otimes B=\\overline{A\\oplus B}=(A\\cap B)\\cup(\\bar{A}\\cap\\bar{B})=\\{x|(x\\in A\\wedge x\\in B)\\vee(x\\notin A\\wedge x\\notin B)\\} \\]\n满足如下运算律\n3.2.1 幂集\n给定集合\\(A\\)，由\\(A\\)所有子集为元素构成的集合，称为\\(A\\)的幂集，记作\\(\\rho(A)\\)。若\\(|A|=n\\)，则有\\(|\\rho(A)=2^n|\\)\n容斥原理 定理1\n设\\(A_1,A_2\\)是有限集合，其元素个数分别为\\(|A_1|,|A_2|\\)，则\\(|A_1\\cup A_2|=|A_1|+|A_2|-|A_1\\cap A_2|\\)\n容斥原理\n将上式推广，得\n\\[ |A_1\\cup A_2\\cup\\cdots\\cup A_n|=\\sum_{i=1}^n|A_i|-\\sum_{1\\leq i\u0026lt;j\\leq n}|A_i\\cap A_j|+\\\\ \\sum_{1\\leq i\u0026lt;j\u0026lt;k\\leq n}|A_i\\cap A_j\\cap A_k|-\\cdots+(-1)^{n+1}|A_1\\cap A_2\\cap\\cdots\\cap A_n| \\]\n归纳证明 集合的归纳定义 基础条款：指出某些事物属于\\(S\\)，其功能是给集合\\(S\\)指定初始元素使其不为空。 归纳条款：指出由集合\\(S\\)中的已有元素构造新元素的办法。 极小性条款：断言一个事物除非能有限次应用基础条款和归纳条款构成，否则它不在集合\\(S\\)中。 归纳法证明 基础步骤。对于基础条款中的指定的每个初始元素\\(t\\)，证明命题\\(P(t)\\)为真。 归纳步骤。证明如果事物\\(x,y,\\cdots\\)有\\(P\\)性质，那么用归纳条款指定的方法组合它们所得的新元素也具有性质\\(P\\) 数学归纳法 第一原理\n（归纳基础）证明\\(P(0)\\)为真（可以用任何办法） （归纳假设）任取\\(n(n\\ge0)\\)，假设\\(P(n)\\)为真。 （归纳推理）由\\(P(n)\\)为真，推出\\(P(n+1)\\)也为真。 第二原理\n（归纳基础）证明\\(P(0)\\)为真（可以用任何办法） （归纳假设）假设对任意的\\(n\u0026lt;k\\)，均有\\(P(k)\\)为真。 （归纳推理）证明\\(P(n)\\)也为真。 集合的笛卡尔积 序偶\n两个元素\\(a\\)和\\(b\\)组成的具有固定次序的序列称为序偶或二元组，记为\\(\u0026lt;a,b\u0026gt;\\)。对于序偶\\(\u0026lt;a,b\u0026gt;\\)，\\(a\\)称为第\\(1\\)元素，\\(b\\)称为第\\(2\\)元素。\n序偶的相等\n两个序偶\\(\u0026lt;a,b\u0026gt;\\)和\\(\u0026lt;c,d\u0026gt;\\)相等，记为\\(\u0026lt;a,b\u0026gt;=\u0026lt;c,d\u0026gt;\\)，当且仅当\\(a=c\\)且\\(b=d\\)。\n笛卡尔积（叉积）\n\\[ A\\times B=\\{\u0026lt;a,b\u0026gt;|a\\in A,b\\in B\\} \\]\n对于多个集合，有\n\\[ A_1\\times A_2\\times\\cdots\\times A_n=\\{\u0026lt;a_1,a_2, \\cdots,a_n\u0026gt;|a_i\\in A_i,1\\leq i\\leq n\\} \\]\n其中\\(A\\times A\\times\\cdots\\times A\\)（\\(n\\)个）可以记作\\(A^n\\)\n规定\\(\u0026lt;a_1,a_2, \\cdots,a_n\u0026gt;=\u0026lt;\u0026lt;a_1,a_2, \\cdots,a_{n-1}\u0026gt;,a_n\u0026gt;\\)，而不等于\\(\u0026lt;a_1,\u0026lt;a_2, \\cdots,a_n\u0026gt;\u0026gt;\\)等等其他序偶。\n关于笛卡尔积有如下定理\n定理1\n\\(A\\times(B\\cup C)=(A\\times B)\\cup(A\\times C)\\) \\(A\\times(B\\cap C)=(A\\times B)\\cap(A\\times C)\\) \\((A\\cup B)\\times C=(A\\times C)\\cup(B\\times C)\\) \\((A\\cap B)\\times C=(A\\times C)\\cap(B\\times C)\\) 定理2\n如果\\(A_i(i=1,2,\\cdots,n)\\)都是有限集合，那么\n\\[ |A_1\\times A_2\\times\\cdots\\times A_n|=|A_1|\\cdot|A_2|\\cdot\\cdots\\cdot|A_n| \\]\n二元关系 关系的定义 两个集合\\(A\\)和\\(B\\)的笛卡儿积\\(A\\times B\\)的任一子集\\(R\\),称为集合\\(A\\)到\\(B\\)上的二元关系。二元关系\\(R\\)是由序偶构成的集合，若\\(\u0026lt;x,y\u0026gt;\\in R\\)，则称\\(x\\)与\\(y\\)有\\(R\\)关系，也记为\\(xRy\\);否则,\\(\u0026lt;x,y\u0026gt;\\notin R\\)，称\\(x\\)与\\(y\\)没有\\(R\\)关系，也记为\\(x\\cancel{R}y\\)。\n设\\(R\\)是集合\\(A\\)到\\(B\\)的二元关系。集合\\(A\\)称为\\(R\\)的前域，集合\\(B\\)称为\\(R\\)的陪域。集合\\(\\{x|(\\exist y)(\u0026lt;x,y\u0026gt;\\in R)\\}\\)称为\\(R\\)的定义域，记为\\(domR\\)。集合\\(\\{y|(\\exist x)(\u0026lt;x,y\u0026gt;)\\in R)\\}\\)称为\\(R\\)的值域，记为\\(ranR\\)。显然, \\(domR\\subseteq A\\)和\\(ranR\\subseteq B\\)。\n关系的表示 关系矩阵 \\[ r_{ij}= \\left\\{\\begin{matrix} 1, if\u0026lt;a_i,b_j\u0026gt;\\in R\\\\ 0, if\u0026lt;a_i,b_j\u0026gt;\\notin R \\end{matrix}\\right. \\]\n关系图 3.6.2 关系的运算 所有集合的运算对于二元关系同样适用。\n复合运算\n设\\(R\\)为集合\\(A\\)到\\(B\\)的二元关系，\\(S\\)为\\(B\\)到\\(C\\)的二元关系，令\n\\[ R\\circ S=\\{\u0026lt;a,c\u0026gt;|a\\in A\\wedge c\\in C\\wedge(\\exist b)(b\\in B\\wedge\u0026lt;a,b\u0026gt;\\in R\\wedge \u0026lt;b,c\u0026gt;\\in S)\\} \\]\n称\\(R\\circ S\\)为\\(R\\)与\\(S\\)的复合关系。\n复合运算可以通过关系的矩阵的运算来实现\n\\[ \\bm{M}_{R\\circ S}=\\bm{M}_R\\odot\\bm{M}_S \\]\n其中\\(\\odot\\)是布尔乘法运算，\\(c_{ij}=\\bigvee_{k=1}^{n}(a_{ik}\\wedge b_{kj})\\)\n复合运算有如下定理\n定理1\n\\((R\\circ S)\\circ T=R\\circ(S\\circ T)\\)\n关系的逆，逆关系\n\\[ R^{-1}=\\{\u0026lt;b,a\u0026gt;|\u0026lt;a,b\u0026gt;\\in R\\} \\]\n关系矩阵即为原矩阵的转置\n关系图即将箭头反向\n有如下定理\n定理1\n\\((R^{-1})^{-1}=R\\) \\((R_1\\cup R_2)^{-1}=R_1^{-1}\\cup R_2^{-1}\\) \\((R_1\\cap R_2)^{-1}=R_1^{-1}\\cap R_2^{-1}\\) \\((\\overline{R})^{-1}=\\overline{R^{-1}}\\)，其中\\(\\overline{R}=(A\\times B)-R\\)，\\(\\overline{R^{-1}}=(B\\times A)-R^{-1}\\)。 \\((R_1-R_2)^{-1}=R_1^{-1}-R_2^{-1}\\) 定理2\n\\[ (R\\circ S)^{-1}=S^{-1}\\circ R^{-1} \\]\n集合上的二元关系及其特性 集合上的二元关系 集合\\(A\\)与\\(A\\)的笛卡尔积\\(A\\times A\\)的子集称为\\(A\\)上的二元关系。\n相等关系\n\\[ I_A=\\{\u0026lt;a,a\u0026gt;|a\\in A\\} \\]\n\\(R\\)的幂次\n设\\(R\\)是\\(A\\)上的二元关系，\\(n\\in Z^+\\)，称\\(R\\circ R\\circ\\cdots\\circ R\\)(n个)为\\(R\\)的\\(n\\)次幂。记为\\(R^n\\)\n约定\\(R^0=I_A\\)\n有如下定理\n定理1\n\\(R^m\\circ R^n=R^{m+n}\\) \\((R^m)^n=R^{mn}\\) 定理2\n设存在\\(i,j\\in R\\)，使得\\(R^i=R^j\\)，则有\n对任意\\(k\\ge 0, R^{i+k}=R^{j+k}\\) 对任意\\(k,m\\ge 0, R^{i+md+k}=R^{i+k}\\)，其中\\(d=j-i\\) 记\\(S=\\{R_0,R^1,\\cdots,R^{j-1}\\}\\)，对于任意\\(n\\in N\\)，均有\\(R^n\\in S\\) 二元关系的特性 自反性。对于\\(A\\)中的每个元素\\(a\\)，都有\\(aRa\\)，则称\\(R\\)在\\(A\\)上是自反的。 反自反性。对于\\(A\\)中的每个元素\\(a\\)，都有\\(a\\cancel{R}a\\)。空集上的空关系即是自反的也是反自反的。 对称性。对于任意\\(a,b\\in A\\)，若有\\(aRb\\)，则必有\\(bRa\\)。 反对称性。对于任意\\(a,b\\in A\\)，若有\\(aRb\\)且\\(bRa\\)，则必有\\(a=b\\)。若关系图上只有零个或多个自回路，则既是对称的，又是反对称的。 传递性。对于任意\\(a,b,c\\in A\\)，若\\(aRb,bRc\\)则必有\\(aRc\\)。 关系的闭包运算 设\\(R\\)是集合\\(A\\)上的二元关系，如果\\(A\\)上另外一个二元关系\\(R\u0026#39;\\)满足： 1. \\(R\u0026#39;\\)是自反的（对称的，传递的） 2. \\(R\u0026#39;\\subseteq R\\) 3. 对于\\(A\\)上任何自反的（对称的，传递的）关系\\(R\u0026#39;\u0026#39;\\)，若\\(R\u0026#39;\u0026#39;\\subseteq R\\)，有\\(R\u0026#39;\u0026#39;\\subseteq R\u0026#39;\\)，则称\\(R\u0026#39;\\)是\\(R\\)的自反（对称，传递）闭包，记为\\(r(R)(s(R),t(R))\\)。\n有如下定理\n定理1\n\\(R\\)是自反的当且仅当\\(r(R)=R\\) \\(R\\)是对称的当且仅当\\(s(R)=R\\) \\(R\\)是传递的当且仅当\\(t(R)=R\\) 定理2\n\\(r(R)=R\\cup I_A\\) \\(s(R)=R\\cup R^{-1}\\) \\(t(R)=\\bigcup_{i=1}^{\\infty}R^i\\) 定理3\n假设\\(|A|=n\\)，那么\\(t(R)=\\bigcup_{i=1}^{n}R^i\\)\n定理4\n如果\\(R\\)是自反的，那么\\(s(R),t(R)\\)也是自反的。 如果\\(R\\)是对称的，那么\\(r(R),t(R)\\)也是对称的。 如果\\(R\\)是传递的，那么\\(r(R)\\)也是传递的。 定理5\n\\(sr(R)=rs(R)\\)，（\\(sr(R)=s(r(R))\\)以下运算顺序相同）。 \\(tr(R)=rt(R)\\) \\(ts(R)\\subseteq st(R)\\) 等价关系 集合的划分 给定非空集合\\(A\\)和集合簇\\(\\pi=\\{A_1,A_2,\\cdots,A_m\\}\\)，如果\n\\(A_i\\subseteq A\\)且\\(A_i\\neq\\phi\\) \\(A=\\bigcup_{i=1}^{m}A_i\\) \\(A_i\\cap A_j=\\phi, i\\neq j\\) 那么称\\(\\pi\\)是\\(A\\)的一个划分，若\\(\\pi\\)满足1.2.则称\\(\\pi\\)是\\(A\\)的一个覆盖。\n等价关系和等价类 等价关系\n\\(R\\)是\\(A\\)上的二元关系，若\\(R\\)是自反的、对称的、传递的，则称\\(R\\)是等价关系。\n等价类\n设\\(R\\)是非空集合\\(A\\)上的等价关系，对于任意\\(a\\in A\\)，称集合\\([a]_R=\\{x|x\\in A,xRa\\}\\)为\\(a\\)关于\\(R\\)的等价类，\\(a\\)称为等价类\\([a]_R\\)的代表元素。如果等价类个数有限，则\\(R\\)的不同等价类的个数叫做\\(R\\)的秩，否则秩是无限的。\n有如下定理\n定理1\n设\\(R\\)是非空集合\\(A\\)上的等价关系，对于\\(a,b\\in A\\)有\\(aRb\\)，当且仅当\\([a]_R=[b]_R\\)\n商集\n设\\(R\\)是集合\\(A\\)上的等价关系，由\\(R\\)确定的所有等价类组成的集合，称为集合\\(A\\)上关于\\(R\\)的商集，记为\\(A/R\\)\n\\[ A/R = \\{[x]_R|x\\in A\\} \\]\n有如下定理\n定理1\n任取\\(x\\in A\\)，\\([x]_R\\neq\\phi\\) 任取\\(x,y\\in A\\)，要么\\([x]_R=[y]_R\\)，要么\\([x]_R\\cap[y]_R=\\phi\\) \\(\\bigcup_{x\\in A}[x]_R=A\\) 定理2\n设\\(\\pi\\)是非空集合\\(A\\)的一个划分，则\\(A\\)上的二元关系\\(R=\\bigcup_{B\\in\\pi} B\\times B\\)是\\(A\\)上的等价关系（称为由划分\\(\\pi\\)诱导的\\(A\\)上的等价关系）。\n定理3\n设\\(R_1\\)和\\(R_2\\)是非空集合\\(A\\)上的等价关系，则\\(R_1=R_2\\Leftrightarrow A/R_1=A/R_2\\)\n定理4\n设\\(R\\)是非空集合\\(A\\)上的任意一个等价关系,\\(\\pi\\)是\\(A\\)的任意一个划分，那么\\(R\\)诱导出\\(\\pi\\)当且仅当\\(\\pi\\)诱导出\\(R\\)。即说明等价关系和集合的划分是一一对应的。\n序关系 偏序集合的概念与表示 偏序\n如果\\(A\\)上的关系\\(R\\)是自反的，反对称的和传递的，那么\\(R\\)是\\(A\\)上的偏序，通常用符号\\(\\preceq\\)表示，称序偶\\(\u0026lt;A,\\preceq\u0026gt;\\)为偏序集合。通常用\\(x\\prec y\\)表示\\(x\\preceq y\\)且\\(x\\neq y\\)\n可比与不可比\n在偏序集合\\(\u0026lt;A,\\preceq\u0026gt;\\)中，对于元素\\(a,b\\in A\\)，如果\\(a\\preceq b\\)或者\\(b\\preceq a\\)，那么称\\(a\\)或\\(b\\)是可比的，否则不可比的。\n盖住\n在偏序集合\\(\u0026lt;A,\\preceq\u0026gt;\\)中，对于\\(x,y\\in A\\)，如果\\(x\\prec y\\)且没有其他元素\\(z\\in A\\)满足\\(x\\prec z\\prec y\\)，则称\\(y\\)盖住\\(x\\)\n哈斯图\n3.10.1 链\n设\\(\u0026lt;A,\\preceq\u0026gt;\\)是一个偏序集合，\\(B\\subseteq A\\)。如果\\(B\\)中的任意两个元素都是可比的，那么称\\(B\\)为\\(\u0026lt;A，\\preceq\u0026gt;\\)中的链，\\(B\\)中元素的个数称为该链的长度。如果\\(B\\)中的任意两个不同的元素都是不可比的，那么称\\(B\\)为\\(\u0026lt;A，\\preceq\u0026gt;\\)中的反链。\n偏序集合中的特殊元素 极大元\n设\\(\u0026lt;A，\\preceq\u0026gt;\\)是偏序集合，且\\(B\\subseteq A\\)。如果\\(b\\in B\\)，且\\(B\\)中不存在元素\\(x\\)，使得\\(x\\neq b\\)且\\(b\\preceq x\\)，那么\\(b\\)称为\\(B\\)的极大元。\n极小元\n设\\(\u0026lt;A，\\preceq\u0026gt;\\)是偏序集合，且\\(B\\subseteq A\\)。如果\\(b\\in B\\)，且\\(B\\)中不存在元素\\(x\\)，使得\\(x\\neq b\\)且\\(x\\preceq b\\)，那么\\(b\\)称为\\(B\\)的极小元。\n最大元\n设\\(\u0026lt;A，\\preceq\u0026gt;\\)是偏序集合，且\\(B\\subseteq A\\)。如果\\(b\\in B\\)，对于任意元素\\(x\\in B\\)，均有\\(x\\preceq b\\)，那么\\(b\\)称为\\(B\\)的最大元。\n最小元\n设\\(\u0026lt;A，\\preceq\u0026gt;\\)是偏序集合，且\\(B\\subseteq A\\)。如果\\(b\\in B\\)，对于任意元素\\(x\\in B\\)，均有\\(b\\preceq x\\)，那么\\(b\\)称为\\(B\\)的最小元。\n有如下定理\n定理1\n设\\(\u0026lt;A，\\preceq\u0026gt;\\)是偏序集合，且\\(B\\subseteq A\\)。如果\\(B\\)有最大（最小元），那么它是唯一的。\n上界\n设\\(\u0026lt;A，\\preceq\u0026gt;\\)是偏序集合，且\\(B\\subseteq A\\)。如果\\(a\\in A\\)，对于任意元素\\(b\\in B\\)，均有\\(b\\preceq a\\)，那么\\(a\\)称为\\(B\\)的上界。\n下界\n设\\(\u0026lt;A，\\preceq\u0026gt;\\)是偏序集合，且\\(B\\subseteq A\\)。如果\\(a\\in A\\)，对于任意元素\\(b\\in B\\)，均有\\(a\\preceq b\\)，那么\\(a\\)称为\\(B\\)的下界。\n最小上界（上确界）\n设\\(\u0026lt;A，\\preceq\u0026gt;\\)是偏序集合，且\\(B\\subseteq A\\)。\\(a\\)为\\(B\\)的上界，若对\\(B\\)的任意上界\\(a\u0026#39;\\)均有\\(a\\preceq a\u0026#39;\\)，则称\\(a\\)为\\(B\\)的最小上界或上确界。\n最大下界（下确界）\n设\\(\u0026lt;A，\\preceq\u0026gt;\\)是偏序集合，且\\(B\\subseteq A\\)。\\(a\\)为\\(B\\)的下界，若对\\(B\\)的任意下界\\(a\u0026#39;\\)均有\\(a\u0026#39;\\preceq a\\)，则称\\(a\\)为\\(B\\)的最大下界或下确界。\n有如下定理\n定理1\n若\\(B\\)有最小上界（最大下界），那么它是唯一的。\n定理2\n设\\(\u0026lt;A，\\preceq\u0026gt;\\)是偏序集合，且\\(B\\subseteq A\\)。\n若\\(b\\)是\\(B\\)的最大元，则\\(b\\)是\\(B\\)的极大元。 若\\(b\\)是\\(B\\)的最大元，则\\(b\\)是\\(B\\)的最小上界。 \\(b\\in B\\)，若\\(b\\)是\\(B\\)的上界，当且仅当\\(b\\)是\\(B\\)的最小上界。 若\\(b\\)是\\(B\\)的最小元，则\\(b\\)是\\(B\\)的极小元。 若\\(b\\)是\\(B\\)的最小元，则\\(b\\)是\\(B\\)的最大下界。 \\(b\\in B\\)，若\\(b\\)是\\(B\\)的下界，当且仅当\\(b\\)是\\(B\\)的最大下界。 定理3\n设\\(\u0026lt;A，\\preceq\u0026gt;\\)是非空有限偏序集，则\\(A\\)中必存在极大元和极小元。\n定理4\n设\\(\u0026lt;A，\\preceq\u0026gt;\\)是偏序集合，如果\\(A\\)中最长链的长度为\\(n\\)，则\\(A\\)中元素能划分为\\(n\\)个互不相交的反链。\n线序和良序 设\\(\u0026lt;A，\\preceq\u0026gt;\\)是偏序集合，如果任取\\(a,b\\in A\\)，都有\\(a\\preceq b\\)或者\\(b\\preceq a\\)，那么称\\(\\preceq\\)为\\(A\\)上的线序或全序。称\\(\u0026lt;A，\\preceq\u0026gt;\\)为线序集合，称\\(A\\)为链。\n如果\\(A\\)上的一个二元关系\\(R\\)是一个线序，且\\(A\\)的每一非空子集都有最小元，那么称\\(R\\)为\\(A\\)上的良序，称\\(\u0026lt;A,R\u0026gt;\\)为良序集合。\n有如下定理\n定理\n每一有限线序集合都是良序集合。\n函数与无限集合 函数的定义 注意对于每个\\(x\\in A\\)，都只和唯一一个\\(y\\in Y\\)有\\(f\\)关系。\\(y\\)是\\(x\\)的函数值或像，\\(x\\)是\\(y\\)的原像。\n定义域必须是整个前域，值域可以不是整个陪域。一般\\(X,Y\\)指的是前域和陪域。\n函数相等\n\\(f:A\\to B\\), \\(g:C\\to D\\)，如果\\(A=C,B=D\\)，且对于所有的\\(x\\in A\\)有\\(f(x)=g(x)\\)，则称\\(f,g\\)相等，记作\\(f=g\\)\n多元函数\n前域是\\(n\\)个集合的笛卡尔积，称为\\(n\\)元函数，像记作\\(f(x_1,x_2,\\cdots,x_n)\\)\n递归定义的函数 前域是归纳定义的集合时，可以采用递归定义方法来定义函数。规则是：用已经得到的元素函数值和给定的函数来计算新元素的函数值。\n特殊函数 单射\n任取\\(x_1,x_2\\in X\\)，如果\\(x_1\\neq x_2\\)，那么\\(f(x_1)\\neq f(x_2)\\)，则称\\(f\\)为单射函数，也称一对一函数。\n满射\n若任取\\(y\\in Y\\)，存在\\(x\\in X\\)，使得\\(f(x)=y\\)，则称为满射函数。\n双射\n既是单射又是满射，称为双射函数。也称一一对应函数。\n有如下定理\n定理1\n设\\(X,Y\\)是有限集合，\\(f:X\\to Y\\)\n若\\(f\\)是单射，则必有\\(|X|\\leq|Y|\\) 若\\(f\\)是满射，则必有\\(|X|\\ge|Y|\\) 若\\(f\\)是双射，则必有\\(|X|=|Y|\\) 定理2\n设\\(X\\)和\\(Y\\)是有限集合，\\(f\\)是从集合\\(X\\)到\\(Y\\)的函数。若\\(|X|=|Y|\\)，则\\(f\\)是单射，当且仅当\\(f\\)是满射。\n常数函数\n存在\\(c\\in Y\\)，对任意\\(x\\in X\\),\\(f(x)=c\\)\n恒等函数\n\\(f(x)=x\\)\n置换（排列）\n对于函数\\(f:X\\to X\\)，若\\(f\\)是双射的，则称\\(f\\)为\\(X\\)上的置换或排列。\\(X\\)上的恒等函数称为恒等置换或者幺置换。\\(|X|=n\\)时称为\\(n\\)次置换，\\(|X|\\)无限时称为无限次置换。\n通常写成\n\\[ P= \\begin{pmatrix} x_1 \u0026amp; x_2 \u0026amp; \\cdots \u0026amp; x_n\\\\ f(x_1) \u0026amp; f(x_2) \u0026amp; \\cdots \u0026amp; f(x_n) \\end{pmatrix} \\]\n复合函数和逆函数 类似于关系的复合运算\n但是注意书写顺序。\\(g\\diamond f\\)和\\(f\\circ g\\)的顺序正好相反\n定理1\n\\(f:X\\to Y,g:Y\\to Z\\)，那么\\(g\\diamond f\\)是\\(X\\)到\\(Z\\)的函数。\n定理2\n\\(h\\diamond(g\\diamond f)=(h\\diamond g)\\diamond f\\)\n\\(f^0=I_x\\) \\(f^{n+1}=f\\diamond f^n\\) 定理3\n\\(f:X\\to Y,g:Y\\to Z\\)\n若\\(f,g\\)满射，则\\(g\\diamond f\\)满射。 若\\(f,g\\)单射，则\\(g\\diamond f\\)单射。 若\\(f,g\\)双射，则\\(g\\diamond f\\)双射。 若\\(g\\diamond f\\)满射，则\\(g\\)满射 若\\(g\\diamond f\\)单射，则\\(f\\)单射 若\\(g\\diamond f\\)双射，则\\(g\\)满射，\\(f\\)单射。 逆函数 设\\(f\\)是双射函数，则\\(f^{-1}=\\{\u0026lt;y,x\u0026gt;|\u0026lt;x,y\u0026gt;\\in f\\}\\)。显然逆函数也是双射函数。\n定理1\n\\((f^{-1})^{-1}=f\\) \\(f^{-1}\\diamond f=I_X\\) \\(f\\diamond f^{-1}=I_X\\) 定理2\n\\((g\\diamond f)^{-1}=f^{-1}\\diamond g^{-1}\\)\n可数与不可数集合 集合的基数 基数\n度量\\(A\\)大小的数称为基数或势，记为\\(|A|\\)。\n等势\n若\\(A\\)到\\(B\\)能建立起双射函数，则称\\(A,B\\)等势，记为\\(A\\sim B\\)，或\\(|A|=|B|\\)\n定理1\n等势是任何集合簇上的等价关系。即是自反的、对称的、传递的。\n有限集合、无限集合\n含有有限个（包含0）元素的集合称为有限集合，不是有限集合的称为无限集合。\n定理1\n有限集合的任意子集是有限集合。无限集合的超集是无限集合。\n定理2\n无限集合存在与其等势的真子集。\n可数集 与自然数集\\(N\\)等势的集合称为可数无限集合，简称可数集。可数集的基数用\\(\\alef_0\\)表示。\n有限集和可数集通称为至多可数集。\n枚举\n设\\(A\\)是一个集合，如果\\(f\\)是从\\(N\\)或从\\(N_k=\\{0,1,2,\\cdots,k-1\\}\\)到\\(A\\)的一个满射函数，则称\\(f\\)为\\(A\\)的一个枚举。如果\\(f\\)是双射的，则称为无重复枚举，否则称为重复枚举。\n定理1\n一个无限集合\\(A\\)是可数集，当且仅当存在\\(A\\)的枚举。\n定理2\n可数无限集的任一无限子集是可数集。\n定理3\n任意两个可数集的并是可数集。\n定理4\n\\(N\\times N\\)是可数集。\n定理5\n可数个可数集的并是可数集。\n不可数集 与自然数集不等势的无限集称为不可数集\n定理1\n实数集的子集\\((0,1)\\)是不可数集\n基数的比较 Zemelo三歧性定理\n以下三条恰有一条成立\n|A|\u0026lt;|B| |A|\u0026gt;|B| |A|=|B| Cantor-Schroder-Bernstein定理\n\\(|A|\\leq|B|\\)且\\(|A|\\ge|B|\\)，则\\(|A|=|B|\\)\n定理3\n设\\(A\\)是任意有限集合，则\\(|A|\u0026lt;\\alef_0\u0026lt;\\alef\\)\n定理4\n任意无限集合必定存在可数无限子集\n定理5\n\\(\\alef_0\\)是最小的无限集基数\nCantor定理\n\\(|M|\u0026lt;|\\rho (M)|\\)\n图论 图的基本概念 按边是否有方向，图可以分为有向图、无向图和混合图。\n设\\(G\\)是一个有向图，如果将\\(G\\)中的每条边的方向去掉就能得到一个无向图\\(G\u0026#39;\\)，则称\\(G\u0026#39;\\)为\\(G\\)的底图。\n邻接点\n关联于同一条边的两个结点被称为邻接点。\n邻接边\n关联于一个结点的两条边被称为邻接边。\n孤立结点\n不与任何结点邻接的结点称之为孤立节点\n零图\n仅由若干个孤立节点构成的图称为零图。\n平凡图\n仅由单个孤立节点组成的图称为平凡图。\n平行边\n\\(e_1=e_2=\\{u,v\\}\\)，若\\(e_1,e_2\\)是两条不同的边，则称\\(e_1,e_2\\)为平行边。\n自回路（环）\n\\(e=\\{u,u\\}\\)\n多重图\n有平行边的图。\n线图\n不含平行边的图。\n简单图\n不含自回路的图。\n结点的度数 与结点\\(v\\)关联的边数称为结点\\(v\\)的度数（无向图），记为\\(deg(v)\\)。\n如果是有向图，则以结点\\(v\\)为终点的边数称为入度\\(deg^-(v)\\)，为始点的边数称为出度\\(deg^+(v)\\)。显然有\\(deg(v)=deg^-(v)+deg^+(v)\\)\n有如下定理\n握手定理\n任何图中，所有节点的度数之和等于边数的两倍。\n定理2\n任何图中，奇数度的节点必有偶数个。\n定理3\n任何有向图中，所有节点的入度等于所有节点的出度。\n特殊图 无向完全图\n无向简单图中，任何两个不同结点间都恰有一条边相连。\\(n\\)个结点的无向完全图记为\\(K^n\\)。\n有向完全图\n有向图\\(G=\u0026lt;V,E\u0026gt;\\)满足\\(E=V\\times V\\)。记为\\(D_n\\)。\n二部图\n非零图，节点集合\\(V\\)可以划分成两个不相交的子集\\(X\\)和\\(Y\\)，使\\(G\\)中的每一条边的一个端点在\\(X\\)中而另一个端点在\\(Y\\)中，则称\\(G\\)为二部图，记为\\(G=\u0026lt;X,E,Y\u0026gt;\\)\n可以通过标号法确定一个图是不是二部图。\n二部图必无自回路，但可以有平行边。\n子图与补图 子图\n设\\(G=\u0026lt;V,E\u0026gt;\\)，\\(G\u0026#39;=\u0026lt;V\u0026#39;,E\u0026#39;\u0026gt;\\)，若有\\(E\u0026#39;\\subseteq E\\)且\\(V\u0026#39;\\subseteq V\\)，则称\\(G\u0026#39;\\)是\\(G\\)的子图。\n生成子图\n\\(V\u0026#39;=V\\)时，\\(G\u0026#39;\\)是\\(G\\)的生成子图。\n导出子图\n设\\(G\u0026#39;\\)是\\(G\\)的子图，\\(V\u0026#39;\\)仅由\\(E\u0026#39;\\)中边相关联的结点组成，则称\\(G\u0026#39;\\)为由边集\\(E\u0026#39;\\)导出的子图。\n补图\n给定一个图\\(G\\)，由\\(G\\)中所有的结点及所有能使\\(G\\)成为完全图的添加边组成的图，称为\\(G\\)相对于完全图的补图，简称为\\(G\\)的补图，记为\\(\\bar{G}\\)。\n图的同构 设\\(G=\u0026lt;V,E\u0026gt;,G\u0026#39;=\u0026lt;V\u0026#39;,E\u0026#39;\u0026gt;\\)，如果存在双射函数\\(f:V\\to V\u0026#39;,g:E\\to E\u0026#39;\\)，对于任何\\(e\\in E,e=[v_i, v_j]\\)当且仅当\\(g(e)=[f(v_i),f(v_j)]\\)。则称\\(G,G\u0026#39;\\)同构，记作\\(G\\cong G\u0026#39;\\)。\n相互同构的图只是画法不同或者结点与边的命名不同而已。\n两幅图同构的必要条件\n结点数相同 边数相同 度数相同的结点数目相同 图的连通性 路和回路 通路\n经过的结点不重复的路。\n迹\n经过的边不重复的路。回路为闭迹，非回路为开迹。\n圈\n除始点和终点外没有相同结点的闭迹称为圈。长度为\\(k\\)的圈称为\\(k\\)圈，又可根据\\(k\\)分为奇圈和偶圈。\n定理1\n在一个具有\\(n\\)个节点的图中，如果两个结点连通，则两个结点间必有一条长度小于\\(n\\)的路（也存在小于\\(n\\)的通路）。\n定理2\n在一个具有\\(n\\)个节点的图中，如果存在闭迹，则必存在一条长度小于等于\\(n\\)的圈。\n定理3\n设\\(G\\)是一个无向图，若\\(G\\)中每个结点的度数大于等于\\(2\\)，\\(G\\)中必含有圈。\n定理4\n\\(G=\u0026lt;V,E\u0026gt;\\)是无向图，\\(|E|\u0026gt;0\\)，\\(G\\)是二部图当且仅当\\(G\\)中不含有奇圈。\n无向图的连通性 割点与割点集\n删除某个结点和其相连边后，图变成不连通的，则称为割点。删除某个点集中的所有点和所连接边，图变成不连通的，并且删除该点集的任意真子集图仍然连通，则称这个点集为割点集。\nk连通\n由\\(G\\)产生一个不连通子图最少需要删去\\(k\\)个结点。则称\\(G\\)为\\(k\\)连通图。\n定理1\n无向图中，一个结点是割点，当且仅当存在两个结点间的每条路都要通过该节点。\n割边与割边集\n与割点相似。\nk边连通\n与\\(k\\)连通相似。\n定理1\n无向图中，一条边是割边，当且仅当它不包含在任一圈中。\n有向图的连通性 强连通，单侧连通，弱连通\n强连通则是两个结点双向可达。单侧连通则是单向可达。若联通则是看成无向图。\n定理1\n有向图是强连通的，当且仅当它存在一条回路，至少包含每个结点一次。\n最短路 见算法竞赛模板。\n图的矩阵表示 邻接矩阵 \\(AA^T\\)\n\\(G\\)中刚好有\\(b_{ij}\\)个结点，从\\(v_i\\)和\\(v_j\\)均有边引出到这些节点。\n\\(A^TA\\)\n\\(G\\)中刚好有\\(b_{ij}\\)个结点，以这些节点为始边，既有边到\\(v_i\\)又有边到\\(v_j\\)。\n\\(A\\times A\\)\n从\\(v_i\\)到\\(v_j\\)的路，长度为2的有\\(b_{ij}\\)条。\n同理可知\\(A^{(m)}\\)的含义。\n可达矩阵 \\(P(G)=A^{(0)}\\vee A^{(1)}\\vee\\cdots\\vee A^{(n-1)}\\)\n定理\n无向图是连通图，当且仅当可达矩阵所有元素都为1. 有向图是强连通图，当且仅当可达矩阵所有元素都为1. 有向图是单侧连通图，当且仅当\\(P\\vee P^T\\)所有元素都为1. 有向图是弱连通图，当且仅当以\\(A\\vee A^T\\)作为邻接矩阵求出来的可达矩阵\\(P\u0026#39;\\)所有元素都为1. 求传递闭包的快速算法 设\\(R\\)是集合\\(V\\)上的二元关系，\\(n\\in \\bm{Z}^+\\)，对于任意\\(a,b\\in V,\u0026lt;a,b\u0026gt;\\in R^n\\)，当且仅当\\(R\\)的关系图\\(G=\u0026lt;V,E\u0026gt;\\)中存在从\\(a\\)到\\(b\\)有长度为\\(n\\)的有向路。\n设\\(\\bm{M}_R\\)是\\(V\\)上二元关系\\(R\\)的关系矩阵，则\n\\[ \\bm{M}_{t(R)}=\\bm{M}_R\\vee\\bm{M}_R^{(2)}\\vee\\cdots\\vee\\bm{M}_R^{(n)} \\]\n欧拉图与汉密尔顿图 欧拉图 欧拉路（欧拉迹）\n包含图中所有边的开迹。\n欧拉回路\n包含图中所有边的闭迹。\n欧拉图\n包含欧拉回路的图称为欧拉图。\n定理1\n无向图是欧拉图当且仅当图是连通的并且每个结点的度均为偶数。\n无向图中存在一条欧拉路，当且仅当图是联通的，并且图中恰有两个奇数度的点。并且这两个点是起点和终点。\n定理2\n有向图是欧拉图，当且仅当它是联通的，并且每个结点的出度等于入度。\n有向图有欧拉路，当且仅当它是联通的，并且除了两个结点以外都出度等于入度，这两个结点必须一个出度比入度大一，另一个入度比出度大一。\n汉密尔顿图 包含图中每个结点一次且仅一次的通路称为汉密尔顿路。包含图中每个结点一次且仅一次的圈叫汉密尔顿回路。含汉密尔顿回路的图叫做汉密尔顿图。\n定理1（必要条件）\n若\\(G\\)是汉密尔顿图，则对于结点集\\(V\\)的每一个非空子集\\(S\\)都有\n\\[ \\omega(G-S)\\leq|S| \\]\n其中\\(\\omega(G-S)\\)表示\\(G\\)删除\\(S\\)中所有结点后得到的连通分支的个数。\n定理2（必要条件）\n设\\(G=\u0026lt;X,E,Y\u0026gt;\\)是无向连通二部图，其中\\(|X|=m,|Y|=n\\)，若\\(m\\neq n\\)，则必不是汉密尔顿图。\n若\\(|m-n|\u0026gt;1\\)，则必不存在汉密尔顿路。\n定理3（充分条件）\n设\\(G=\u0026lt;V,E\u0026gt;\\)是含有\\(n(n\\ge3)\\)个节点的简单无向图，如果\\(G\\)中的任何两个不同结点的度数之和都大于等于\\(n-1\\)，则\\(G\\)中存在汉密尔顿路。\n如果都大于等于\\(n\\)，则存在汉密尔顿回路。\n平面图 平面嵌入\n将一个平面图\\(G\\)重新排列得到边不相交的图\\(G\u0026#39;\\)，\\(G\u0026#39;\\)称为一个平面嵌入。\n面的次数\n面\\(r\\)的边界回路长度称为面的次数，记作\\(deg(r)\\)\n定理1\n连通平面图，所有面的次数之和等于边数的两倍\n定理2\n连通平面图，有\\(n\\)个节点，\\(m\\)条边，\\(r\\)个面，则有\\(n-m+r=2\\)成立。\n若\\(n\\ge3\\)，则\\(m\\leq3n-6\\)\n若每个面至少由\\(k\\)边围成，则有\\(m\\leq\\frac{k(n-2)}{k-2}\\)\n同胚\n给定两个图\\(G_1\\)和\\(G_2\\)，如果它们本身是同构的，或者通过反复插入度为2的结点(在某边上嵌入结点)或反复删除度为2的结点(仅去除结点,其关联边拼接)后，能够使\\(G_1\\)和\\(G_2\\)同构，则称\\(G_1\\)和\\(G_2\\)在\\(2\\)度结点内同构，亦称同胚。\n库拉托夫斯基定理\n一个图是平面图，当且仅当它不包含与\\(K_{3,3}\\)和\\(K_5\\)同胚的子图。\n图的着色 图的结点着色 正常着色\n无向图，给每个结点指定一种颜色，若满足邻接的两个结点颜色不同，则称为正常着色。\n可k-着色\n可以用\\(k\\)种不同的颜色给无向图正常着色。\nk色图\n对无向图正常着色所需要的最少的颜色数，称为顶着色数，简称色数，记为\\(\\mathcal{X}(G)\\)。色数为\\(k\\)的图称为\\(k\\)色图\nWelch Powell着色法\n将图\\(G\\)中的结点按度数递减的次序进行排列。 用一种与已着色结点所着颜色不同的新的颜色\\(C\\)对排列最前的尚未着色的节点着色，并按排列次序对与前面已着上颜色\\(C\\)的结点均不相邻的每一结点着同样的颜色\\(C\\)。 重复2知道着色结束。 定理1\n任何图均满足\\(\\mathcal{X}(G)\\leq \\Delta(G)+1\\)。\\(\\Delta(G)=max\\{d(u)|u\\in V\\}\\)\n定理2\n\\(\\mathcal{X}(G)=2\\)，当且仅当\\(G\\)是二部图。\n平面图的着色 对偶图\n设\\(G=\u0026lt;V,E\u0026gt;\\)是平面图，\\(G\u0026#39;\\)是\\(G\\)的一个平面嵌入，\\(F(G\u0026#39;)\\)是\\(G\u0026#39;\\)的面集合。构造图\\(G^*\\)，若\\(G^*\\)的结点集合\\(V(G^*)=F(G\u0026#39;)\\)，且任取两个结点\\(f_1,f_2\\in V(G^*)\\)，\\(f_1\\)和\\(f_2\\)之间存在边\\(e\\)当且仅当\\(f_1\\)和\\(f_2\\)在\\(G\u0026#39;\\)中有一条公共边，则称\\(G^*\\)是\\(G\\)的对偶图。\n定理\n设\\(G=\u0026lt;V,E\u0026gt;\\)是一个连通简单平面图，且\\(|V|\\ge 3,|E|=m\\)，则\\(G\\)中必存在结点\\(u\\in V\\)，满足\\(deg(u)\\leq 5\\)。\n希伍德五色定理\n任何一个连通简单平面图都是5可着色的。\n四色定理\n平面图的色数不超过4。\n树 无向树的定义 平凡树\n只有一个孤立节点的树。\n定理1\n对于一个含有\\(n\\)个结点\\(m\\)条边的无向树，以下定义等价\n无圈且连通 无圈且\\(m=n-1\\) 连通且\\(m=n-1\\) 无圈，但任意新增一条边，恰得到一个圈 连通，且每条边都是割边 每一对结点有且只有一条通路 定理2\n任何一颗非平凡树中至少有两片树叶\n生成树 定理1\n任何一个无向连通图至少有一颗生成树\n定理2\n连通图中的一个圈与其任何一棵生成树的补至少有一条公共边。\n定理3\n一个边割集和任何一棵生成树至少有一条公共边。\n最小生成树及其算法\n见竞赛模板。\n根树及其应用 根树\n一棵有向树，恰有一个节点入度为0，其余节点入度都为1。\nm元树\n每个结点的出度均小于等于\\(m\\)的根树。\n每个节点的出度均等于\\(0\\)或\\(m\\)的根树称为正则\\(m\\)元树。\n定理1\n正则\\(m\\)元树\\(T\\)，其树叶数为\\(t\\)，分支结点数为\\(i\\)，则有\\((m-1)i=t-1\\)\n带权树\n如果一颗二元树\\(T\\)共有\\(n\\)片树叶，分别带权\\(\\omega_1,\\omega_2,\\cdots,\\omega_n\\)。定义这棵二元树\\(T\\)的权值为，\n\\[ W(T)=\\sum_{i=1}^{n}\\omega_iL(\\omega_i) \\]\n其中\\(L(\\omega_i)\\)为带权\\(\\omega_i\\)的树叶的深度（根深度为0）。在所有带这些权的二元树中，具有最小权的二元树称为最优二元树。\n定理1\n最优二元树是一颗正则二元树。\n定理2\n最优二元树中，层数最大的分支节点的两个儿子所带权分别为最小的两个权。\n最优二元树的构造方法\n7.7.12 前缀码\n给定一个以\\(0,1\\)组成序列为元素的集合，若没有一个序列是另一个序列的前缀，则该集合称为前缀码。\n利用有序正则二元树解决前缀码问题\n7.7.13 ","date":"2022-06-06T08:44:57+08:00","permalink":"https://kegalas.top/p/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E6%95%B4%E7%90%86/","title":"离散数学整理"},{"content":"[TOC]\n矩阵 几个特殊矩阵 方阵 行数与列数相同的矩阵\\(\\bold{A}_{n\\times n}\\)称为\\(n\\)阶矩阵或\\(n\\)阶方阵\n零矩阵 元素都是零的矩阵称为零矩阵，记作\\(\\bold O\\)\n三角矩阵 上三角矩阵\n主对角线以下的元素全为零的方阵，即\n\\[ \\bold{A}_n=\\begin{bmatrix} a_{11} \u0026amp; a_{12} \u0026amp; \\cdots \u0026amp; a_{1n}\\\\ 0 \u0026amp; a_{22} \u0026amp; \\cdots \u0026amp; a_{2n}\\\\ \\vdots \u0026amp; \\vdots \u0026amp; \u0026amp; \\vdots\\\\ 0 \u0026amp; 0 \u0026amp; \\cdots \u0026amp; a_{nn} \\end{bmatrix} \\]\n下三角矩阵\n主对角线以上的元素全为零的方阵，即\n\\[ \\bold{A}_n=\\begin{bmatrix} a_{11} \u0026amp; 0 \u0026amp; \\cdots \u0026amp; 0\\\\ a_{21} \u0026amp; a_{22} \u0026amp; \\cdots \u0026amp; 0\\\\ \\vdots \u0026amp; \\vdots \u0026amp; \u0026amp; \\vdots\\\\ a_{n1} \u0026amp; a_{n2} \u0026amp; \\cdots \u0026amp; a_{nn} \\end{bmatrix} \\]\n对角阵 主对角线（左上到右下的对角线；右上到左下的是副对角线）以外的元素全为零的方阵，即\n\\[ \\bold{A}_n=\\begin{bmatrix} a_{11} \u0026amp; \u0026amp; \u0026amp; \\\\ \u0026amp; a_{22} \u0026amp; \u0026amp; \\\\ \u0026amp; \u0026amp; \\ddots \u0026amp; \\\\ \u0026amp; \u0026amp; \u0026amp; a_{nn} \\end{bmatrix} \\]\n对角矩阵常记为\\(\\Lambda\\)或\\(diag(a_{11},a_{22},\\cdots,a_{nn})\\)\n单位矩阵 主对角线上全为1的对角矩阵称为单位矩阵，记作\\(\\bold{E}_n\\)，即\n\\[ \\bold{E}_n=\\begin{bmatrix} 1 \u0026amp; \u0026amp; \u0026amp; \\\\ \u0026amp; 1 \u0026amp; \u0026amp; \\\\ \u0026amp; \u0026amp; \\ddots \u0026amp; \\\\ \u0026amp; \u0026amp; \u0026amp; 1 \\end{bmatrix} \\]\n系数矩阵 对于线性方程组\n\\[ \\left\\{\\begin{matrix} 2x_1-2x_2+6x_4=-2 \\\\ 2x_1-x_2+2x_3+4x_4=-2 \\\\ 3x_1-x_2+4x_3+4x_4=-3 \\\\ x_1+x_2+x_3+8x_4=2 \\end{matrix}\\right. \\]\n其系数矩阵为\n\\[ \\bold{A}=\\begin{bmatrix} 2 \u0026amp; -2 \u0026amp; 0 \u0026amp; 6\\\\ 2 \u0026amp; -1 \u0026amp; 2 \u0026amp; 4\\\\ 3 \u0026amp; -1 \u0026amp; 4 \u0026amp; 4\\\\ 1 \u0026amp; 1 \u0026amp; 1 \u0026amp; 8 \\end{bmatrix} \\]\n增广矩阵 由线性方程组所有系数和常数项所构成的矩阵称为线性方程组的增广矩阵，并记为\\(\\tilde{\\bold{A}}=(\\bold{A,b})\\)或\\(\\tilde{\\bold{A}}=[\\bold{A,b}]\\)\n\\[ \\tilde{\\bold{A}}=[\\bold{A,b}]=\\begin{bmatrix} 2 \u0026amp; -2 \u0026amp; 0 \u0026amp; 6 \u0026amp; -2\\\\ 2 \u0026amp; -1 \u0026amp; 2 \u0026amp; 4 \u0026amp; -2\\\\ 3 \u0026amp; -1 \u0026amp; 4 \u0026amp; 4 \u0026amp; -3\\\\ 1 \u0026amp; 1 \u0026amp; 1 \u0026amp; 8 \u0026amp; 2 \\end{bmatrix} \\]\n对称矩阵 满足\\(\\bold{A}^T=\\bold{A}\\)的矩阵称为对称矩阵，满足\\(\\bold{A}^T=-\\bold{A}\\)的矩阵称为反对称矩阵。\n行阶梯型矩阵 满足以下两个条件\n如果有零行（元素全为0的行），则零行位于非零行的下方 非零行（元素不全为0的行）的首个非零元素，其前面零元素的个数逐行增加。 最简行阶梯型矩阵：进一步满足非零行的首非零元均为1，且所在列的其余元素为0.\n初等矩阵 由\\(n\\)阶单位矩阵\\(\\bold{E}\\)经过一次初等变换所得到的矩阵称为初等矩阵或初等方阵。\n奇异矩阵 行列式为0的矩阵称为奇异矩阵。不为0的称为非奇异矩阵。\n可逆矩阵 见后\n伴随矩阵 矩阵\\(\\bold{A}\\)的各个元素的代数余子式\\(A_{ij}\\)所构成的如下矩阵\n\\[ \\bold{A}^*= \\begin{bmatrix} A_{11} \u0026amp; A_{21} \u0026amp; \\cdots \u0026amp; A_{n1}\\\\ A_{12} \u0026amp; A_{22} \u0026amp; \\cdots \u0026amp; A_{n2}\\\\ \\vdots \u0026amp; \\vdots \u0026amp; \u0026amp; \\vdots\\\\ A_{1n} \u0026amp; A_{2n} \u0026amp; \\cdots \u0026amp; A_{nn} \\end{bmatrix} \\]\n即\\(\\bold{A}^*=(A_{ij})^T_{n\\times n}\\)，称为\\(A\\)的伴随矩阵。\n并且伴随矩阵满足\\(\\bold{AA^*}=\\bold{A^*A}=\\bold{|A|E}\\)\n并且可推知，当\\(\\bold{|A|}\\ne 0\\)时，有\\(\\bold{|A^*|}=\\bold{|A|}^{n-1}\\)\n另外注意，伴随矩阵的序号和原矩阵的序号相当于进行了转置。\n正交矩阵 见后\n矩阵的运算 加减法 对于矩阵\\(\\bold{A}=(a_{ij})_{m\\times n},\\bold{B}=(b_{ij})_{m\\times n}\\)，定义\n\\[ \\bold{A\\pm B}=\\begin{bmatrix} a_{11}\\pm b_{11} \u0026amp; a_{12}\\pm b_{12} \u0026amp; \\cdots \u0026amp; a_{1n}\\pm b_{1n}\\\\ a_{21}\\pm b_{21} \u0026amp; a_{22}\\pm b_{22} \u0026amp; \\cdots \u0026amp; a_{2n}\\pm b_{2n}\\\\ \\vdots \u0026amp; \\vdots \u0026amp; \u0026amp; \\vdots\\\\ a_{m1}\\pm b_{m1} \u0026amp; a_{m2}\\pm b_{m2} \u0026amp; \\cdots \u0026amp; a_{mn}\\pm b_{mn} \\end{bmatrix} \\]\n数乘 \\[ \\lambda\\bold{A}=\\begin{bmatrix} \\lambda a_{11} \u0026amp; \\lambda a_{12} \u0026amp; \\cdots \u0026amp; \\lambda a_{1n}\\\\ \\lambda a_{21} \u0026amp; \\lambda a_{22} \u0026amp; \\cdots \u0026amp; \\lambda a_{2n}\\\\ \\vdots \u0026amp; \\vdots \u0026amp; \u0026amp; \\vdots\\\\ \\lambda a_{m1} \u0026amp; \\lambda a_{m2} \u0026amp; \\cdots \u0026amp; \\lambda a_{mn} \\end{bmatrix} \\]\n线性运算的运算规律 矩阵的加减法和数乘统称为矩阵的线性运算，满足以下运算律\n\\(\\bold{A+B=B+A}\\) \\(\\bold{(A+B)+C=A+(B+C)}\\) \\(\\bold{A+O=A}\\) \\(\\bold{A+(-A)=O}\\) \\(1\\bold{A=A}\\) \\((\\lambda\\mu)\\bold{A}=\\lambda(\\mu\\bold{A})=\\mu(\\lambda\\bold{A})\\) \\((\\lambda+\\mu)\\bold{A}=\\lambda\\bold{A}+\\mu\\bold{A}\\) \\(\\lambda(\\bold{A+B})=\\lambda \\bold{A}+\\lambda \\bold{B}\\) 乘积 设矩阵\\(\\bold{A}=(a_{ij})_{m\\times s},\\bold{B}=(b_{ij})_{s\\times n}\\)，其乘积是一个\\(m\\times n\\)矩阵，记为\\(\\bold{C}=(c_{ij})_{m\\times n}\\)\n\\[ c_{ij}=\\sum^{s}_{k=1}a_{ik}b_{kj}=a_{i1}b_{1j}+a_{i2}b_{2j}+\\cdots+a_{is}b_{sj} \\]\n\\[ (i=1,2,\\cdots,m;j=1,2,\\cdots,n) \\]\n由定义知，只有左边矩阵的列数等于右边矩阵的行数时，两个矩阵才能相乘。\n矩阵乘法满足如下运算规律\n\\(\\bold{(AB)C=A(BC)}\\) \\(\\bold{A(B+C)=AB+AC,(A+B)C=AC+BC}\\) \\(\\lambda(\\bold{AB})=(\\lambda\\bold{A)B}=\\bold{A}(\\lambda\\bold{B})\\) \\(\\bold{A}_{m\\times n}\\bold{E}_n=\\bold{E}_m\\bold{A}_{m\\times n}=\\bold{A}_{m\\times n}\\) \\(\\bold{A}^k\\bold{A}^l=\\bold{A}^{k+l},(\\bold{A}^k)^l=\\bold{A}^{kl}\\) 注意，由于矩阵乘法不满足交换律，故一般情况下，\\((\\bold{AB}^k)\\ne\\bold{A}^k\\bold{B}^k\\)\n转置 将矩阵\\(\\bold{A}\\)中的行换成同序数的列而得到的矩阵，称之为\\(\\bold{A}\\)的转置矩阵，记作\\(\\bold{A}^T\\)或\\(\\bold{A}\u0026#39;\\)，即若\n\\[ \\bold{A}=\\begin{bmatrix} a_{11} \u0026amp; a_{12} \u0026amp; \\cdots \u0026amp; a_{1n}\\\\ a_{21} \u0026amp; a_{22} \u0026amp; \\cdots \u0026amp; a_{2n}\\\\ \\vdots \u0026amp; \\vdots \u0026amp; \u0026amp; \\vdots\\\\ a_{m1} \u0026amp; a_{m2} \u0026amp; \u0026amp; a_{mn} \\end{bmatrix} \\]\n\\[ \\bold{A}^T=\\begin{bmatrix} a_{11} \u0026amp; a_{21} \u0026amp; \\cdots \u0026amp; a_{m1}\\\\ a_{12} \u0026amp; a_{22} \u0026amp; \\cdots \u0026amp; a_{m2}\\\\ \\vdots \u0026amp; \\vdots \u0026amp; \u0026amp; \\vdots\\\\ a_{1n} \u0026amp; a_{2n} \u0026amp; \u0026amp; a_{mn} \\end{bmatrix} \\]\n转置满足以下运算律\n\\((\\bold{A}^T)^T=\\bold{A}\\) \\((\\bold{A+B})^T=\\bold{A}^T+\\bold{B}^T\\) \\((\\lambda\\bold{A})^T=\\lambda\\bold{A}^T\\) \\((\\bold{AB})^T=\\bold{B}^T\\bold{A}^T\\) 可逆矩阵 设\\(\\bold{A}\\)为\\(n\\)阶方阵，若存在\\(n\\)阶方阵\\(\\bold{B}\\)，使得\\(\\bold{AB=BA=E}_n\\)，则称\\(\\bold{A}\\)为可逆矩阵，或称其为可逆的。称\\(\\bold{B}\\)为\\(\\bold{A}\\)的逆矩阵。\\(\\bold{B}=\\bold{A}^{-1}\\).\n设\\(\\bold{A},\\bold{B}\\)都为\\(n\\)阶方阵，若\\(\\bold{AB=E}_n\\)，则\\(\\bold{A},\\bold{B}\\)都可逆，并且\n\\[ \\bold{A}^{-1}=\\bold{B},\\bold{B}^{-1}=\\bold{A} \\]\n可逆矩阵的性质 若\\(\\bold{A}\\)可逆，则\\(\\bold{A}\\)的逆矩阵唯一. 若\\(\\bold{A}\\)可逆，则\\(\\bold{A}^{-1}\\)也可逆，并且\\(\\bold{A}=(\\bold{A}^{-1})^{-1}\\) 若\\(\\bold{A}\\)可逆，数\\(\\lambda\\ne0\\)，则\\(\\lambda\\bold{A}\\)可逆，并且\\((\\lambda\\bold{A})^{-1}=\\frac{1}{\\lambda}\\bold{A}^{-1}\\) 若\\(\\bold{A}\\)、\\(\\bold{B}\\)均为\\(n\\)阶可逆方阵，则\\(\\bold{A}\\bold{B}\\)也可逆，且\\((\\bold{A}\\bold{B})^{-1}=\\bold{B}^{-1}\\bold{A}^{-1}\\) 若\\(\\bold{A}\\)可逆，则\\(\\bold{A}^{T}\\)也可逆，并且\\((\\bold{A}^T)^{-1}=(\\bold{A}^{-1})^{T}\\) 逆矩阵的求法 借用伴随矩阵和行列式，见行列式一章 初等变换法 设有方阵\\(\\bm A\\)，将其和同阶单位阵写在一起\\((A,E)\\)，然后通过初等行变换（只能是行变换），化成\\((E,A\u0026#39;)\\)的形式，然后\\(A\u0026#39;\\)就是逆矩阵。\n分块矩阵 加减法、数乘、乘法与普通矩阵相似。转置时除了将整个矩阵，还要将每个元素本身转置。\n初等变换 下面三种变换称之为初等行变换\n交换两行的位置 以非零数\\(k\\)乘某行 把某一行的\\(k\\)倍加到另一行上 初等列变换只用把上述的行换成列即可。两种变换通称初等变换。显然初等变换是可逆的。\n矩阵等价 如果矩阵\\(\\bold{A}\\)经有限次初等变换成矩阵\\(\\bold{B}\\)，那么称这两个矩阵等价，记作\\(\\bold{A} \\sim \\bold{B}\\)\n等价关系具有：自反性、对称性、传递性。\n相似一定等价，等价不一定相似。 合同一定等价，等价不一定合同。 合同不一定相似，相似不一定合同。\n矩阵的秩 设\\(\\bold{A}\\)为\\(m\\times n\\)矩阵，\\(\\bold{B}\\)是与\\(\\bold{A}\\)等价的行阶梯型矩阵，若矩阵\\(\\bold{B}\\)的非零行数为\\(r\\)，则称矩阵\\(\\bold{B}\\)的秩为\\(r\\)，矩阵\\(\\bold{A}\\)的秩也为\\(r\\)，记作\\(R(\\bold{A})=R(\\bold{B})=r\\)\n矩阵的秩的性质 \\(0\\leq R(\\bold{A}_{m\\times n})\\leq min\\{m,n\\}\\) \\(R(\\bold{A})=0\\Leftrightarrow \\bold{A=O}\\) \\(R(\\bold{A}^T)=R(\\bold{A})\\) 若\\(\\bold{A}\\sim\\bold{B}\\)，则\\(R(\\bold{A})=R(\\bold{B})\\) 若\\(\\bold{P},\\bold{Q}\\)可逆，则\\(R(\\bold{A})=R(\\bold{PA})=R(\\bold{AQ})=R(\\bold{PAQ})\\)（可逆矩阵不影响矩阵的秩）（初等变换不影响矩阵的秩） \\(max\\{R(\\bold{A}),R(\\bold{B})\\}\\leq R(\\bold{A,B})\\leq R(\\bold{A})+R(\\bold{B})\\) \\(R(\\bold{A\\pm B})\\leq R(\\bold{A})+R(\\bold{B});R(\\bold{AB})\\leq min\\{R(\\bold{A}),R(\\bold{B})\\}\\) 若\\(\\bold{A}_{m\\times n}\\bold{B}_{n\\times l}=\\bold{O}\\)，则\\(R(\\bold{A})+R(\\bold{B})\\leq n\\) \\(\\bold{A}_{m\\times n}\\)行满秩\\(\\Leftrightarrow R(\\bold{A})=m\\Leftrightarrow\\bold{A}\\)的等价标准型为\\((\\bold{I}_m,\\bold{O})\\)（\\(\\bold{I}\\)是单位矩阵）。\\(\\bold{A}_{m\\times n}\\)列满秩\\(\\Leftrightarrow R(\\bold{A})=n\\Leftrightarrow\\bold{A}\\)的等价标准型为\\((\\bold{I}_n,\\bold{O})^T\\)。 若\\(\\bold{A}\\)为\\(n\\)阶方阵，则\\(R(\\bold{A})=n\\Leftrightarrow \\bold{A}\\)是可逆矩阵 若\\(\\bold{A},\\bold{B}\\)均为\\(n\\)阶方阵，则\\(R(\\bold{AB})\\ge R(\\bold{A})+R(\\bold{B})-n\\) \\(R(\\bold{ABC})\\ge R(\\bold{AB})+R(\\bold{BC})-R(\\bold{B})\\) \\(R(\\bold{A}_{m\\times n})=n\\Leftrightarrow\\)齐次线性方程组\\(\\bold{Ax=0}\\)只有零解。 \\[ R\\begin{pmatrix} \\bold{A} \u0026amp; 0\\\\ 0 \u0026amp; \\bold{B} \\end{pmatrix}=R(\\bold{A})+R(\\bold{B}) \\] 矩阵的秩等于矩阵的行秩也等于矩阵的列秩 对于一个矩阵一些相互等价的命题 第一组 设\\(\\bold{A}\\)为\\(n\\)阶方阵，那么下列命题等价\n满秩 非奇异 可逆 \\(\\bold{Ax=0}\\)只有零解 \\(|\\bold{A}|\\ne0\\) \\(\\bold{A}\\)可以经过有限次初等行变换华为单位矩阵\\(\\bold{E}_n\\) \\(\\bold{A}\\)可以表示为有限个初等矩阵的乘积。 特征值均非零 第二组 设\\(\\bold{A}\\)为\\(n\\)阶方阵，那么下列命题等价\n降秩 奇异 不可逆 \\(\\bold{Ax=0}\\)不只有零解 \\(|\\bold{A}|=0\\) \\(\\bold{A}\\)不可以经过有限次初等行变换华为单位矩阵\\(\\bold{E}_n\\) \\(\\bold{A}\\)不可以表示为有限个初等矩阵的乘积。 特征值至少有一个为零 第三组 设\\(f(x_1,\\cdots,x_n)=\\bm{x}^T\\bm{Ax}\\)是\\(n\\)元实二次型，则下列命题等价\n\\(f=\\bm{x}^T\\bm{Ax}\\)是正定二次型，即\\(\\bm{A}\\)是正定矩阵 \\(\\bm{A}\\)的特征值均为正数 \\(f=\\bm{x}^T\\bm{Ax}\\)的正惯性指数为\\(n\\) \\(\\bm{A}\\)与单位矩阵\\(\\bm{E}\\)合同 存在可逆矩阵\\(\\bm B\\)，使得\\(\\bm{A=B}^T\\bm B\\) 顺序主子式均大于零 第四组 设\\(f(x_1,\\cdots,x_n)=\\bm{x}^T\\bm{Ax}\\)是\\(n\\)元实二次型，则下列命题等价\n\\(f\\)是负定二次型 \\(f\\)的负惯性指数为\\(n\\) \\(\\bm A\\)的特征值全为负数 \\(\\bm A\\)合同于\\(-\\bm E\\) \\(\\bm A\\)的奇数阶顺序主子式均为负数，偶数阶顺序主子式均为负数 行列式 二阶行列式 \\[ D=\\begin{vmatrix} a_{11} \u0026amp; a_{12} \\\\ a_{21} \u0026amp; a_{22} \\end{vmatrix}=a_{11}a_{22}-a_{12}a_{21} \\]\nn阶行列式 余子式与代数余子式 在\\(n\\)阶行列式\n\\[ D=\\begin{vmatrix} a_{11} \u0026amp; a_{12} \u0026amp; \\cdots \u0026amp; a_{1n}\\\\ a_{21} \u0026amp; a_{22} \u0026amp; \\cdots \u0026amp; a_{2n}\\\\ \\vdots \u0026amp; \\vdots \u0026amp; \u0026amp; \\vdots\\\\ a_{n1} \u0026amp; a_{n2} \u0026amp; \\cdots \u0026amp; a_{nn} \\end{vmatrix} \\]\n中划掉元素所在的第\\(i\\)行与第\\(j\\)列后，剩下的\\((n-1)^2\\)个元素按原来的次序构成的\\(n-1\\)阶行列式称为元素\\(a_{ij}\\)的余子式，记为\\(M_{ij}\\)，并称\\((-1)^{i+j}M_{ij}\\)为元素\\(a_{ij}\\)的代数余子式，记为\\(A_{ij}\\)。\n计算 \\[ D=\\begin{vmatrix} a_{11} \u0026amp; a_{12} \u0026amp; \\cdots \u0026amp; a_{1n}\\\\ a_{21} \u0026amp; a_{22} \u0026amp; \\cdots \u0026amp; a_{2n}\\\\ \\vdots \u0026amp; \\vdots \u0026amp; \u0026amp; \\vdots\\\\ a_{n1} \u0026amp; a_{n2} \u0026amp; \\cdots \u0026amp; a_{nn} \\end{vmatrix} \\]\n\\[ =a_{11}A_{11}+a_{12}A_{12}+\\cdots+a_{1n}A_{1n}=\\sum_{k=1}^{n}a_{k1}A_{k1} \\]\n上式为该行列式按第一行的展开定义。也可以按其他行（或者列）展开。\n易知对于对角矩阵和上下三角矩阵，其行列式为对角线上元素的乘积。对次三角矩阵则不等于副对角线上元素的乘积。单位矩阵的行列式等于\\(1\\).\n行列式的性质 行列式与其转置行列式相等，\\(|\\bold{A}|=|\\bold{A}^T|\\)\n行列式中某行（或列）元素的公因子可以提到行列式之外\n某行（或列）元素全为零的行列式等于0 对于\\(n\\)阶矩阵\\(\\bold{A}\\)，有\\(|k\\bold{A}|=k^n|\\bold{A}|\\) 交换某两行（或列）的位置，行列式的值变号.\n如果行列式中有两行（或两列）元素相同，则行列式为0. 行列式中若有两行（或两列）对应元素成比例，则行列式为0 若行列式某一行（或列）的元素是两项之和，则该行列式可以写成两个行列式之和，即\n\\[ \\begin{vmatrix} a_{11} \u0026amp; \\cdots \u0026amp; a_{1j} \u0026amp; \\cdots \u0026amp; a_{1n}\\\\ \\vdots \u0026amp; \u0026amp; \\vdots \u0026amp; \u0026amp; \\vdots\\\\ a_{i1}+b_{i1} \u0026amp; \\cdots \u0026amp; a_{ij}+b_{ij} \u0026amp; \\cdots \u0026amp; a_{in}+b_{in}\\\\ \\vdots \u0026amp; \u0026amp; \\vdots \u0026amp; \u0026amp; \\vdots\\\\ a_{n1} \u0026amp; \\cdots \u0026amp; a_{nj} \u0026amp; \\cdots \u0026amp; a_{nn} \\end{vmatrix} \\]\n\\[ =\\begin{vmatrix} a_{11} \u0026amp; \\cdots \u0026amp; a_{1j} \u0026amp; \\cdots \u0026amp; a_{1n}\\\\ \\vdots \u0026amp; \u0026amp; \\vdots \u0026amp; \u0026amp; \\vdots\\\\ a_{i1} \u0026amp; \\cdots \u0026amp; a_{ij} \u0026amp; \\cdots \u0026amp; a_{in}\\\\ \\vdots \u0026amp; \u0026amp; \\vdots \u0026amp; \u0026amp; \\vdots\\\\ a_{n1} \u0026amp; \\cdots \u0026amp; a_{nj} \u0026amp; \\cdots \u0026amp; a_{nn} \\end{vmatrix}+ \\begin{vmatrix} a_{11} \u0026amp; \\cdots \u0026amp; a_{1j} \u0026amp; \\cdots \u0026amp; a_{1n}\\\\ \\vdots \u0026amp; \u0026amp; \\vdots \u0026amp; \u0026amp; \\vdots\\\\ b_{i1} \u0026amp; \\cdots \u0026amp; b_{ij} \u0026amp; \\cdots \u0026amp; b_{in}\\\\ \\vdots \u0026amp; \u0026amp; \\vdots \u0026amp; \u0026amp; \\vdots\\\\ a_{n1} \u0026amp; \\cdots \u0026amp; a_{nj} \u0026amp; \\cdots \u0026amp; a_{nn} \\end{vmatrix} \\]\n将某一行（或列）的任意\\(k\\)倍加到另一行（或列）上去，行列式的值不变 对于\\(n\\)阶行列式D，有 \\[ \\sum_{j=1}^na_{ij}A_{kj}= \\left\\{\\begin{matrix} D,i=k\\\\ 0,i\\ne k \\end{matrix}\\right. \\]\n\\[ \\sum_{i=1}^na_{ij}A_{ik}= \\left\\{\\begin{matrix} D,j=k\\\\ 0,j\\ne k \\end{matrix}\\right. \\]\n设\\(\\bold{A,B}\\)均为\\(n\\)阶方阵，则\\(|\\bold{AB}|=\\bold{|A||B|}\\) 范德蒙行列式 \\[ V_n=\\begin{vmatrix} 1 \u0026amp; 1 \u0026amp; 1 \u0026amp; \\cdots \u0026amp; 1\\\\ x_1 \u0026amp; x_2 \u0026amp; x_3 \u0026amp; \\cdots \u0026amp; x_n\\\\ x_1^2 \u0026amp; x_2^2 \u0026amp; x_3^2 \u0026amp; \\cdots \u0026amp; x_n^2\\\\ \\vdots \u0026amp; \\vdots \u0026amp; \\vdots \u0026amp; \u0026amp; \\vdots\\\\ x_1^{n-1} \u0026amp; x_2^{n-1} \u0026amp; x_3^{n-1} \u0026amp; \\cdots \u0026amp; x_n^{n-1} \\end{vmatrix} \\]\n有\n\\[ V_n=\\prod_{1\\leq j\u0026lt;i\\leq n}(x_i-x_j) \\]\n行列式求逆矩阵 \\(\\bold{A}\\)为可逆矩阵的充分必要条件是\\(|\\bold{A}|\\ne 0\\)，且有\n\\[ \\bold{A}^{-1}=\\frac{1}{|\\bold{A}|}\\bold{A}^* \\]\n行列式求解非齐次线性方程组（克莱默法则） 对于线性方程组\\(\\bold{Ax=b}\\)，定义\n\\[ D=|\\bold{A}|\\\\ D_1=|[\\bold{b},\\bold{a}_2,\\bold{a}_3,\\cdots,\\bold{a}_n]|\\\\ D_2=|[\\bold{a}_1,\\bold{b},\\bold{a}_3,\\cdots,\\bold{a}_n]|\\\\ \\cdots\\\\ D_n=|[\\bold{a}_1,\\bold{a}_2,\\bold{a}_3,\\cdots,\\bold{b}]|\\\\ \\]\n当\\(D\\ne0\\)时，该方程组有唯一解，其解为\n\\[ x_1=\\frac{D_1}{D},x_2=\\frac{D_2}{D},\\cdots,x_n=\\frac{D_n}{D} \\]\nn维向量与向量空间 前提：本章默认为列向量。\n向量的运算 线性运算 加减法和数乘和矩阵一样，不再介绍。\n向量乘法 也和矩阵一样，但只有两种情况\n\\[ \\bm{\\alpha}^T\\bm{\\beta}= \\begin{bmatrix} a_1\u0026amp;a_2\u0026amp;\\cdots\u0026amp;a_n \\end{bmatrix}\\begin{bmatrix} b1\\\\b2\\\\\\vdots\\\\b3 \\end{bmatrix}= a_1b_1+a_2b_2+\\cdots+a_nb_n \\]\n\\[ \\bm{\\alpha}\\bm{\\beta}^T= \\begin{bmatrix} a_1\\\\a_2\\\\\\vdots\\\\a_n \\end{bmatrix}\\begin{bmatrix} b1\u0026amp;b2\u0026amp;\\cdots\u0026amp;b3 \\end{bmatrix}= \\begin{bmatrix} a_1b_1 \u0026amp; a_1b_2 \u0026amp; \\cdots \u0026amp; a_1b_n\\\\ a_2b_1 \u0026amp; a_2b_2 \u0026amp; \\cdots \u0026amp; a_2b_n\\\\ \\vdots \u0026amp; \\vdots \u0026amp; \u0026amp; \\vdots\\\\ a_nb_1 \u0026amp; a_nb_2 \u0026amp; \\cdots \u0026amp; a_nb_n \\end{bmatrix} \\]\n向量运算的性质 和矩阵相同，看成行或列为1的矩阵即可。\n向量组的线性相关性 向量组的线性表示 设\\(n\\)维向量组\\(\\bm{\\alpha}_1,\\bm{\\alpha}_2,\\cdots,\\bm{\\alpha}_s\\)，对于任何一组实数\\(k_1,k_2,\\cdots,k_s\\)，称\\(k_1\\bm{\\alpha}_1,k_2\\bm{\\alpha}_2,\\cdots,k_s\\bm{\\alpha}_s\\)为向量组的一个线性组合。\n设\\(\\bm{b}\\)为\\(n\\)维向量，若存在一组数\\(\\lambda_1,\\lambda_2,\\cdots,\\lambda_s\\)使得\\(\\bm{b}=\\lambda_1\\bm{\\alpha}_1,\\lambda_2\\bm{\\alpha}_2,\\cdots,\\lambda_s\\bm{\\alpha}_s\\)，则称\\(\\bm{b}\\)可由\\(\\bm{\\alpha}_1,\\bm{\\alpha}_2,\\cdots,\\bm{\\alpha}_s\\)线性表示。\n线性方程组\\(\\bm{Ax=b}\\)有解的充分必要条件是\\(\\bm{b}\\)可由\\(\\bm{A}\\)的列向量组\\(\\bm{\\alpha}_1,\\bm{\\alpha}_2,\\cdots,\\bm{\\alpha}_n\\)线性表示.\n向量组的线性相关性定义及性质 设有\\(n\\)维向量组\\(\\bm{\\alpha}_1,\\bm{\\alpha}_2,\\cdots,\\bm{\\alpha}_m\\)，如果存在不全为零的数\\(k_1,k_2,\\cdots,k_m\\)，使得\n\\[ k_1\\bm{\\alpha}_1+k_2\\bm{\\alpha}_2+\\cdots+k_m\\bm{\\alpha}_m=0 \\]\n则称向量组线性相关，否则称线性无关。\n可以得到如下结论：\n包含零向量的向量组必线性相关 当向量组只包含一个向量时，若为零向量，则线性相关；否则线性无关。 非零向量组若只有两个向量，则线性相关的充要条件是两个向量的对应分量成比例。 向量组线性相关的充要条件是至少存在其中的一个向量可由其余向量线性表示 当\\(t\u0026gt;n\\)，含有\\(t\\)个\\(n\\)维向量的向量组必线性相关。 向量组\\(\\bm{\\alpha}_1,\\bm{\\alpha}_2,\\cdots,\\bm{\\alpha}_m\\)线性无关，而向量组\\(\\bm{\\alpha}_1,\\bm{\\alpha}_2,\\cdots,\\bm{\\alpha}_m,\\bm{b}\\)线性相关，则\\(\\bm{b}\\)可由\\(\\bm{\\alpha}_1,\\bm{\\alpha}_2,\\cdots,\\bm{\\alpha}_m\\)唯一线性表示 \\(\\bm{\\alpha}_1,\\bm{\\alpha}_2,\\cdots,\\bm{\\alpha}_m\\)线性无关，则任一部分组\\(\\bm{\\alpha}_1,\\bm{\\alpha}_2,\\cdots,\\bm{\\alpha}_r(r\u0026lt;m)\\)必线性无关 \\(\\bm{\\alpha}_1,\\bm{\\alpha}_2,\\cdots,\\bm{\\alpha}_m\\)线性相关，则增加向量后的向量组\\(\\bm{\\alpha}_1,\\bm{\\alpha}_2,\\cdots,\\bm{\\alpha}_s(s\u0026gt;m)\\)必线性相关。 设\\(\\bm{\\alpha}_1,\\bm{\\alpha}_2,\\cdots,\\bm{\\alpha}_m\\)为\\(m\\)个\\(m\\)维列向量。则\\(\\bm{\\alpha}_1,\\bm{\\alpha}_2,\\cdots,\\bm{\\alpha}_m\\)线性无关\\(\\Leftrightarrow\\)行列式\\(|[\\bm{\\alpha}_1,\\bm{\\alpha}_2,\\cdots,\\bm{\\alpha}_m]|\\ne0\\);\\(\\bm{\\alpha}_1,\\bm{\\alpha}_2,\\cdots,\\bm{\\alpha}_m\\)线性相关\\(\\Leftrightarrow\\)行列式\\(|[\\bm{\\alpha}_1,\\bm{\\alpha}_2,\\cdots,\\bm{\\alpha}_m]|=0\\) 从几何角度理解：设\\(\\bm{\\alpha,\\beta,\\gamma}\\)为三维向量，向量组\\(\\bm{\\alpha,\\beta}\\)线性相关\\(\\Leftrightarrow\\bm{\\alpha,\\beta}\\)共线;向量组\\(\\bm{\\alpha,\\beta,\\gamma}\\)线性相关\\(\\Leftrightarrow\\bm{\\alpha,\\beta,\\gamma}\\)共面 向量组的秩和极大无关组 设有两个向量组，每个向量组中的每一个向量都可以由另一个向量组线性表示，则称两个向量组等价。\n设有向量组\\(\\bm{\\alpha}_1,\\bm{\\alpha}_2,\\cdots,\\bm{\\alpha}_s\\)，而\\(\\bm{\\alpha}_1,\\bm{\\alpha}_2,\\cdots,\\bm{\\alpha}_r\\)是向量组中的\\(r\\)个向量\\((r\\leq s)\\)，若满足\n向量组\\(\\bm{\\alpha}_1,\\bm{\\alpha}_2,\\cdots,\\bm{\\alpha}_r\\)线性无关; 向量组\\(\\bm{\\alpha}_1,\\bm{\\alpha}_2,\\cdots,\\bm{\\alpha}_s\\)中的任\\(r+1\\)个向量（如果有）线性相关 则称向量组\\(\\bm{\\alpha}_1,\\bm{\\alpha}_2,\\cdots,\\bm{\\alpha}_r\\)是向量组\\(\\bm{\\alpha}_1,\\bm{\\alpha}_2,\\cdots,\\bm{\\alpha}_s\\)的一个极大无关组，极大无关组所含向量个数\\(r\\)称为向量组的秩，记作\\(R(\\bm{\\alpha}_1,\\bm{\\alpha}_2,\\cdots,\\bm{\\alpha}_s)=r\\).\n只含零向量的向量组，规定秩为0；向量组\\(\\bm{\\alpha}_1,\\bm{\\alpha}_2,\\cdots,\\bm{\\alpha}_s\\)线性无关时，其秩为\\(s\\).\n有如下定理\n阶梯型矩阵\\(J\\)的行秩和列秩相等，恰等于\\(J\\)的非零行数，并且\\(J\\)的主元（非零行的首个元素）所在的列构成列向量组的一个极大无关组。 矩阵的初等行（列）变换不改变矩阵的列（行）（注意与前一句相反）向量组的线性相关性，从而不改变矩阵的列（行）秩。 矩阵的秩等于矩阵的行秩等于矩阵的列秩。 设\\(\\bm{A}\\)是\\(m\\times n\\)矩阵，则 矩阵\\(A\\)的列向量组线性相关（无关）的充要条件为\\(R(\\bm{A})\u0026lt;n(R(\\bm{A})=n)\\)\n矩阵\\(A\\)的行向量组线性相关（无关）的充要条件为\\(R(\\bm{A})\u0026lt;m(R(\\bm{A})=m)\\)\n若向量组\\(I\\)可由向量组\\(II\\)线性表示，则\\(I\\)的秩不超过\\(II\\)的秩； 等价向量组的秩相等。 极大无关组表示其他向量 1.jpg 转化为行最简形为\n2.jpg 显然极大无关组是\\(\\alpha_1,\\alpha_3,\\alpha_5\\)。\n并且有\\(\\alpha_2=3\\alpha_1,\\alpha_4=-2\\alpha_1+\\alpha_3,\\alpha_6=\\alpha_1+2\\alpha_3-\\alpha_5\\)\n向量空间 向量空间的定义 设\\(\\bm{V}\\)是非空\\(n\\)维向量的集合，如果\\(\\bm{V}\\)对向量的加法和数乘封闭，即\n若\\(\\bm{a,b\\in V}\\)，有\\(\\bm{a+b}\\in V\\); 若\\(\\bm{a\\in B},\\lambda\\in R\\)，有\\(\\lambda\\bm{a\\in V}\\)（特别注意\\(\\lambda=0\\)的情况） 则称\\(\\bm{V}\\)为一个向量空间\n向量空间必须含有零向量。\n子空间的定义\n设\\(\\bm{V}\\)和\\(\\bm{H}\\)都是向量空间，若\\(\\bm{H}\\subset V\\)，则称\\(\\bm{H}\\)是\\(\\bm{V}\\)的子空间。\n线性变换的定义\n已知\\(\\bm{A}\\)为\\(n\\)阶方阵，则称映射\\(f:\\bm{R}^n\\to \\bm{R}^n,\\bm{x}\\to \\bm{y},\\bm{y}=\\bm{Ax}\\)为\\(\\bm{R}^n\\)上的线性变换，\\(\\bm{A}\\)称为线性变换矩阵.\n向量的内积与正交矩阵 向量的内积\n设\\(n\\)维向量\\(\\bm{x}=[x_1,x_2,\\cdots,x_n]^T\\)，\\(\\bm{y}=[y_1,y_2,\\cdots,y_n]^T\\)，称\n\\[ \u0026lt;\\bm{x},\\bm{y}\u0026gt;=x_1y_1+x_2y_2+\\cdots+x_ny_n \\]\n为向量\\(\\bm{x,y}\\)的内积。\n内积具有以下性质\n\\(\u0026lt;\\bm{x},\\bm{y}\u0026gt;=\u0026lt;\\bm{y},\\bm{x}\u0026gt;\\) \\(\u0026lt;k\\bm{x},\\bm{y}\u0026gt;=\u0026lt;\\bm{x},k\\bm{y}\u0026gt;=k\u0026lt;\\bm{x},\\bm{y}\u0026gt;\\)，\\(k\\)是实数 \\(\u0026lt;\\bm{x+y},\\bm{z}\u0026gt;=\u0026lt;\\bm{x},\\bm{z}\u0026gt;+\u0026lt;\\bm{y},\\bm{z}\u0026gt;\\) \\(\u0026lt;\\bm{x},\\bm{x}\u0026gt;\\ge0,\u0026lt;\\bm{x},\\bm{x}\u0026gt;=0\\)当且仅当\\(\\bm{x}=\\bm{0}\\) 柯西-施瓦茨不等式：\\(\u0026lt;\\bm{x},\\bm{y}\u0026gt;^2\\leq\u0026lt;\\bm{x},\\bm{x}\u0026gt;\u0026lt;\\bm{y},\\bm{y}\u0026gt;\\) 向量的范数\n设\\(n\\)维向量\\(\\bm{x}=[x_1,x_2,\\cdots,x_n]^T\\)，称\n\\[ ||\\bm{x}||=\\sqrt{\\bm{x}^T\\bm{x}}=\\sqrt{\u0026lt;\\bm{x},\\bm{x}\u0026gt;}=\\sqrt{x_1^2+x_2^2+\\cdots+x_n^2} \\]\n为向量\\(\\bm{x}\\)的范数。\n范数具有以下性质\n\\(||\\bm{x}||\\ge0,||\\bm{x}||=0\\)当且仅当\\(\\bm{x}=\\bm{0}\\) \\(||k\\bm{x}||=|k|||\\bm{x}||\\)，k为实数 \\(||\\bm{x}+\\bm{y}||\\leq||\\bm{x}||+||\\bm{y}||\\) 向量的夹角与正交\n设\\(\\bm{x,y}\\)是\\(n\\)维非零向量，称\n\\[ \\theta=\\arccos\\frac{\\bm{x}^T\\bm{y}}{||\\bm{x}||||\\bm{y}||}=\\arccos\\frac{\u0026lt;\\bm{x},\\bm{y}\u0026gt;}{||\\bm{x}||||\\bm{y}||} \\]\n为向量\\(\\bm{x,y}\\)的夹角。特别的，当\\(\u0026lt;\\bm{x},\\bm{y}\u0026gt;=0时\\)，\\(\\theta=\\pm\\frac{\\pi}{2}\\)，称两向量正交（或垂直）。\n两两正交的向量组称为正交向量组。由单位向量构成的正交向量组称为标准（规范）标准正交组\n有如下定理：\n不含零向量的正交向量组必线性无关。 施密特正交化方法\n设向量组\\(\\bm{\\alpha}_1,\\bm{\\alpha}_2,\\cdots,\\bm{\\alpha}_m\\)线性无关，令\n\\[ \\bm{\\beta}_1=\\bm{\\alpha}_1\\\\ \\bm{\\beta}_2=\\bm{\\alpha}_2-\\frac{\u0026lt;\\bm{\\alpha}_2,\\bm{\\beta}_1\u0026gt;}{\u0026lt;\\bm{\\beta}_1,\\bm{\\beta}_1\u0026gt;}\\bm{\\beta}_1\\\\ \\bm{\\beta}_3=\\bm{\\alpha}_3-\\frac{\u0026lt;\\bm{\\alpha}_3,\\bm{\\beta}_1\u0026gt;}{\u0026lt;\\bm{\\beta}_1,\\bm{\\beta}_1\u0026gt;}\\bm{\\beta}_1-\\frac{\u0026lt;\\bm{\\alpha}_3,\\bm{\\beta}_2\u0026gt;}{\u0026lt;\\bm{\\beta}_2,\\bm{\\beta}_2\u0026gt;}\\bm{\\beta}_2\\\\ \\cdots\\\\ \\bm{\\beta}_m=\\bm{\\alpha}_m-\\sum_{j=1}^{m-1}\\frac{\u0026lt;\\bm{\\alpha}_m,\\bm{\\beta}_j\u0026gt;}{\u0026lt;\\bm{\\beta}_j,\\bm{\\beta}_j\u0026gt;}\\bm{\\beta}_j \\]\n则\\(\\bm{\\beta}_1,\\bm{\\beta}_2,\\cdots,\\bm{\\beta}_m\\)是与\\(\\bm{\\alpha}_1,\\bm{\\alpha}_2,\\cdots,\\bm{\\alpha}_m\\)等价的正交向量组\n若进一步单位化，即令\\(\\bm{\\eta}_j=\\frac{\\bm{\\beta}j}{||\\bm{\\beta}_j||}\\)，则\\(\\bm{\\eta}_1,\\bm{\\eta}_2,\\cdots,\\bm{\\eta}_m\\)是一个与\\(\\bm{\\alpha}_1,\\bm{\\alpha}_2,\\cdots,\\bm{\\alpha}_m\\)等价的标准正交向量组.\n正交矩阵\n设\\(\\bm{A}\\)为\\(n\\)阶方阵，若满足\\(\\bm{A}^T\\bm{A}=\\bm{E}\\)，则称\\(\\bm{A}\\)为正交矩阵。\n有如下性质：\n若\\(\\bm{A}\\)为正交矩阵，则\\(\\bm{A}^T=\\bm{A}^{-1}\\) 若\\(\\bm{A}\\)为正交矩阵，则\\(\\bm{A}^T\\)和\\(\\bm{A}^{-1}\\)和\\(\\bm{A}^{*}\\)也为正交矩阵 若\\(\\bm{A},\\bm{B}\\)为\\(n\\)阶正交矩阵，则\\(\\bm{AB}\\)也为正交矩阵 若\\(\\bm{A}\\)为正交矩阵，则\\(|\\bm{A}|=\\pm1\\) 有如下定理：\n\\(n\\)阶方阵\\(\\bm{A}\\)为正交矩阵的充要条件是\\(\\bm{A}\\)的列（行）向量组是标准向量组。\n基、维数与坐标 向量空间的基与维数 设\\(\\bm{V}\\)是向量空间，如果向量\\(\\bm{\\alpha}_1,\\bm{\\alpha}_2,\\cdots,\\bm{\\alpha}_r\\in\\bm{V}\\)，满足\n\\(\\bm{\\alpha}_1,\\bm{\\alpha}_2,\\cdots,\\bm{\\alpha}_r\\)线性无关 \\(\\bm{V}\\)中任一向量都可以由\\(\\bm{\\alpha}_1,\\bm{\\alpha}_2,\\cdots,\\bm{\\alpha}_r\\)线性表示 则称向量组\\(\\bm{\\alpha}_1,\\bm{\\alpha}_2,\\cdots,\\bm{\\alpha}_r\\)是向量空间\\(\\bm{V}\\)的一组基，\\(r\\)称为向量空间的维数，记为\\(dim\\bm{V}=r\\)，规定零向量构成的向量空间的维数为0.\n类似的还有正交基和标准（规范）正交基的概念。\n向量的坐标 设\\(\\bm{V}\\)是\\(r\\)维向量空间，\\(\\bm{\\alpha}_1,\\bm{\\alpha}_2,\\cdots,\\bm{\\alpha}_r\\)是\\(\\bm{V}\\)的一组基，则\\(\\bm{V}\\)中的任一向量\\(\\bm{x}\\)可由\\(\\bm{\\alpha}_1,\\bm{\\alpha}_2,\\cdots,\\bm{\\alpha}_r\\)唯一线性表示为\\(\\bm{x}=x_1\\bm{\\alpha}_1+\\cdots+x_r\\bm{\\alpha}_r\\)，数组\\(x_1,x_2,\\cdots,x_r\\)称为向量\\(\\bm{x}\\)在基\\(\\bm{\\alpha}_1,\\bm{\\alpha}_2,\\cdots,\\bm{\\alpha}_r\\)下的坐标。\n过渡矩阵与基变换公式\n设\\(\\bm{\\alpha}_1,\\bm{\\alpha}_2,\\cdots,\\bm{\\alpha}_r\\)和\\(\\bm{\\beta}_1,\\bm{\\beta}_2,\\cdots,\\bm{\\beta}_r\\)是\\(r\\)维向量空间\\(\\bm{V}\\)的两组基，则两个向量组等价，从而有\\(\\bm{\\beta}_j=k_{1j}\\bm{\\alpha}_1+\\cdots+k_{rj}\\bm{\\alpha}_r\\)，即\n\\[ [\\bm{\\beta}_1,\\cdots,\\bm{\\beta}_r]=[\\bm{\\alpha}_1,\\cdots,\\bm{\\alpha}_r] \\begin{bmatrix} k_{11} \u0026amp; \\cdots \u0026amp; k_{1r}\\\\ \\vdots \u0026amp; \u0026amp; \\vdots\\\\ k_{r1} \u0026amp; \\cdots \u0026amp; k_{rr} \\end{bmatrix} =[\\bm{\\alpha}_1,\\cdots,\\bm{\\alpha}_r]\\bm{K} \\]\n称\\(\\bm{K}\\)是由\\(\\bm{A}\\)到\\(\\bm{B}\\)的过度矩阵，上式为基变换公式。另外\\(\\bm{K}\\)一定是可逆矩阵。\n坐标变换公式\n设\\(\\bm{\\alpha}\\)在两组基\\(\\bm{A,B}\\)下的坐标分别为\\([x_1,\\cdots,x_r]^T\\)和\\([y_1,\\cdots,y_r]^T\\)，则有\n\\[ \\begin{bmatrix} x_1 \\\\ \\vdots \\\\ x_r \\end{bmatrix} =\\bm{K} \\begin{bmatrix} y_1 \\\\ \\vdots \\\\ y_r \\end{bmatrix} or \\begin{bmatrix} y_1 \\\\ \\vdots \\\\ y_r \\end{bmatrix} =\\bm{K}^{-1} \\begin{bmatrix} x_1 \\\\ \\vdots \\\\ x_r \\end{bmatrix} \\]\n一般有\\(\\bm{K}=\\bm{A}^{-1}\\bm{B}\\)\n线性方程组 解法 高斯消元法 即通过对增广矩阵进行初等行变换（只能是行变换），化为简单的形式进行求解。\n克莱默法则 见前\n性质定理 齐次线性方程组\\(\\bold{A}_{m\\times n}\\bold{x=0}\\)有非零解的充要条件是\\(R(\\bold{A})=r\u0026lt;n\\)，且有无穷多解，自由量为\\(n-r\\)个（解空间的维数为\\(n-r\\)）。这个充要条件可以替换为\\(|\\bm A|=0\\)及其他等价命题。\n非齐次线性方程组\\(\\bold{A}_{m\\times n}\\bold{x=b}\\)有解的充要条件是\\(R(\\bold{A})=R(\\~\\bold{A})=r\\)，且当\n\\(r=n\\)时有唯一解，称为适定线性方程组 \\(r\u0026lt;n\\)时有无穷多解，自由量是\\(n-r\\)个，称为欠定线性方程组 线性方程组解的结构 齐次情况 设\\(\\bm{\\xi}_1,\\bm{\\xi}_2,\\cdots,\\bm{\\xi}_t\\)是\\(\\bm{Ax=0}\\)的解，则\\(c_1\\bm{\\xi}_1+c_2\\bm{\\xi}_2+\\cdots+c_t\\bm{\\xi}_t\\)也是解，\\(c_i\\)为任意常数。\n齐次线性方程组\\(\\bm{Ax=0}\\)的解空间的一组基\\(\\bm{\\xi}_1,\\bm{\\xi}_2,\\cdots,\\bm{\\xi}_{n-r}\\)也称为方程组的一个基础解系。\n换言之，基础解系\\(\\bm{\\xi}_1,\\bm{\\xi}_2,\\cdots,\\bm{\\xi}_{n-r}\\)是\\(\\bm{Ax=0}\\)的解向量，且满足\n\\(\\bm{\\xi}_1,\\bm{\\xi}_2,\\cdots,\\bm{\\xi}_{n-r}\\)线性无关 \\(\\bm{Ax=0}\\)的任一解都可由\\(\\bm{\\xi}_1,\\bm{\\xi}_2,\\cdots,\\bm{\\xi}_{n-r}\\)线性表示 通过基础解系可以写出通解为\\(\\bm{x}=c_1\\bm{\\xi}_1+c_2\\bm{\\xi}_2+\\cdots+c_{n-r}\\bm{\\xi}_{n-r}\\)，\\(c_i\\)为任意常数。\n非齐次情况 有如下性质：\n设\\(\\bm{x}=\\bm{\\eta}_1+\\bm{\\eta}_2+\\cdots+\\bm{\\eta}_{t}\\)为\\(\\bm{Ax=b}\\)的解，令\\(\\bm{\\eta}=c_1\\bm{\\eta}_1+c_2\\bm{\\eta}_2+\\cdots+c_{t}\\bm{\\eta}_{t}\\)，当\\(c_1+\\cdots+c_t=0\\)时，\\(\\bm{\\eta}\\)为\\(\\bm{Ax=0}\\)的解，当\\(c_1+\\cdots+c_t=1\\)时\\(\\bm{\\eta}\\)为\\(\\bm{Ax=b}\\)的解 设\\(\\bm\\xi\\)为\\(\\bm{Ax=0}\\)的解，\\(\\bm\\eta\\)为\\(\\bm{Ax=b}\\)的解，则\\(\\bm{x=\\xi+\\eta}\\)仍为\\(\\bm{Ax=b}\\)的解。 非齐次线性方程组的解集关于加法和数乘不封闭，因此不构成向量空间 由此可知，\\(\\bm{Ax=b}(R(\\bm{A})=R(\\~{\\bm{A}})=r\\)的通解为\n\\[ \\bm x=k_1\\bm{\\xi}_1+\\cdots+k_{n-r}\\bm{\\xi}_{n-r}+\\bm\\eta^* \\]\n其中\\(\\bm{x}=\\bm{\\xi}_1+\\bm{\\xi}_2+\\cdots+\\bm{\\xi}_{n-r}\\)为导出组\\(\\bm{Ax=0}\\)的一个基础解系，\\(\\bm\\eta^*\\)为\\(\\bm{Ax=b}\\)的任意一个解，称为特解。\n相似矩阵与二次型 特征值和特征向量 设\\(\\bm{A}\\)为\\(n\\)阶矩阵，如果存在数\\(\\lambda\\)和\\(n\\)维非零（注意非零）列向量\\(\\bm\\alpha\\)使得\n\\[ \\bm A\\bm\\alpha=\\lambda\\bm\\alpha \\]\n则称\\(\\lambda\\)为\\(\\bm A\\)的特征值，\\(\\bm\\alpha\\)为\\(\\bm A\\)对于这个\\(\\lambda\\)的特征向量。\n由上式可知，\\(\\bm\\alpha\\)必是如下方程的非零解\n\\[ (\\lambda\\bm E-\\bm A)\\bm x=\\bm 0 \\]\n显然有非零解当且仅当\\(|\\lambda\\bm E-\\bm A|=0\\)，\\(\\lambda\\bm E-\\bm A\\)称为特征矩阵，\\(|\\lambda\\bm E-\\bm A|\\)称为特征多项式，\\(|\\lambda\\bm E-\\bm A|=0\\)称为特征方程。\n特征值和特征向量的求解步骤\n求\\(|\\lambda\\bm E-\\bm A|=0\\)的全体根，记为\\(\\lambda_1,\\lambda_2,\\cdots,\\lambda_n\\) 对于每个特征值\\(\\lambda_i\\)，求出对应其次线性方程组\\((\\lambda_i\\bm E-\\bm A)\\bm x=\\bm0\\)的一个基础解系\\(\\bm{\\alpha}_1,\\cdots,\\bm{\\alpha}_s\\)，并以此求出\\(\\lambda_i\\)对应的全部特征向量\\(k_1\\bm{\\alpha}_1,\\cdots,k_s\\bm{\\alpha}_s\\)。其中\\(k_1,\\cdots,k_s\\)是任意不全为零的常数。 特征值和特征向量的性质 设\\(\\lambda\\)为\\(\\bm A\\)的任一特征值，\\(\\bm\\alpha\\)为其对应的特征向量，则\\(f(\\lambda)\\)是\\(f(\\bm A)\\)的特征值，其对应的特征向量还是\\(\\bm\\alpha\\)，其中\\(f(x)\\)是\\(x\\)的\\(m\\)次多项式。\n设\\(\\lambda\\)为\\(\\bm A\\)的任一非零特征值，\\(\\bm\\alpha\\)为其对应的特征向量，则\\(\\bm A^*\\)的特征值为\\(|\\bm A|/\\lambda\\)。特征向量仍为\\(\\bm\\alpha\\)\n若矩阵\\(\\bm A\\)可逆，则\\(1/\\lambda\\)是\\(A^{-1}\\)的特征值。特征向量仍为\\(\\bm\\alpha\\)\n转置矩阵由于行列式不变，所以特征值不变。但是特征向量并不一定一样。\n设\\(n\\)阶矩阵\\(\\bm A\\)的\\(n\\)个特征值为\\(\\lambda_1,\\lambda_2,\\cdots,\\lambda_n\\)（重根按重数计算），则\n\\(\\lambda_1+\\lambda_2+\\cdots+\\lambda_n=a_{11}+a_{22}+\\cdots+a_{nn}=tr(\\bm A)\\),\\(tr(\\bm A)\\)称之为矩阵的迹 \\(\\lambda_1\\lambda_2\\cdots\\lambda_n=|\\bm A|\\) 矩阵可逆\\(\\Leftrightarrow\\)所有特征值均非0\n若\\(\\lambda_1,\\lambda_2,\\cdots,\\lambda_m\\)是\\(\\bm A\\)的互不相同的特征值，\\(\\bm{\\alpha}_1,\\bm{\\alpha}_2,\\cdots,\\bm{\\alpha}_m\\)是对应的特征向量，则\\(\\bm{\\alpha}_1,\\bm{\\alpha}_2,\\cdots,\\bm{\\alpha}_m\\)线性无关\n设\\(\\lambda\\)是\\(k\\)重特征值，对于\\(\\lambda\\)的线性无关的特征向量的最大个数为\\(l\\)，则\\(k\\ge l\\)\n相似矩阵 相似矩阵的定义和性质 设\\(\\bm{A,B}\\)为\\(n\\)阶矩阵，若存在\\(n\\)阶可逆矩阵\\(\\bm P\\)，使得\n\\[ \\bm P^{-1}\\bm A\\bm P=\\bm B \\]\n则称\\(\\bm A\\)与\\(\\bm B\\)相似，记作\\(\\bm A\\sim \\bm B\\)\n具有以下性质：自反性、传递性、对称性。\n以及\n如果两矩阵相似，则具有相同的特征多项式，从而有相同的特征值。但特征向量不一定相同。并且特征多项式相同并不能推出两矩阵相似。 两矩阵相似，则具有相同的秩。 两矩阵相似，则具有相同的迹。 两矩阵相似，则具有相同的行列式。 若\\(\\bm A\\sim \\bm B\\)，且\\(\\bm A\\)可逆，则\\(\\bm B\\)可逆，并且有\\(\\bm A^{-1}\\sim \\bm B^{-1}\\) 若\\(\\bm A\\sim \\bm B\\)，则对任一多项式\\(g(x)\\)，有\\(g(\\bm A)\\sim g(\\bm B)\\) 矩阵可对角化的条件 设\\(\\bm A\\)为\\(n\\)阶矩阵，如果存在一个\\(n\\)阶可逆矩阵\\(\\bm P\\)，使得\\(\\bm P^{-1}\\bm A\\bm P\\)为对角矩阵，则称\\(\\bm A\\)可对角化。\n有如下定理：\n\\(\\bm A\\)可对角化的充要条件是\\(\\bm A\\)有\\(n\\)个线性无关的特征向量。 \\(n\\)阶矩阵\\(\\bm A\\)的\\(n\\)个特征值互不相同\\(\\Rightarrow\\)\\(\\bm A\\)可对角化 \\(\\bm A\\)可对角化的充要条件是对于\\(\\bm A\\)的每个\\(k\\)重特征值\\(\\lambda\\)，都有\\(R(\\lambda\\bm E-\\bm A)=n-k\\) 实对称矩阵的对角化 实对称矩阵一定能对角化\n并且有如下定理：\n实对称矩阵的特征值都为实数 实对称矩阵的不同特征值所对应的特征向量必正交 设\\(\\bm A\\)为\\(n\\)阶实对称矩阵，则存在正交矩阵\\(\\bm Q\\)使得 \\[ \\bm Q^T\\bm{AQ}=\\bm Q^{-1}\\bm{AQ}= \\begin{bmatrix} \\lambda_1 \u0026amp; \u0026amp; \u0026amp; \\\\ \u0026amp; \\lambda_2 \u0026amp; \u0026amp; \\\\ \u0026amp; \u0026amp; \\ddots \u0026amp; \\\\ \u0026amp; \u0026amp; \u0026amp; \\lambda_n \\end{bmatrix} \\]\n其中\\(\\lambda_i\\)为\\(\\bm A\\)的特征值。\n设\\(\\bm A\\)为\\(n\\)阶实对称矩阵，\\(\\lambda\\)为\\(\\bm A\\)的\\(k\\)重特征值，则\\(\\bm A\\)必有\\(k\\)个对于特征值\\(\\lambda\\)的线性无关的特征向量 求解对角阵的方法\n求\\(\\bm A\\)的全部不同特征值\\(\\lambda_1,\\lambda_2,\\cdots,\\lambda_s\\) 对于每个不同的特征值，求出齐次线性方程组\\((\\lambda_i\\bm E-\\bm A)\\bm x=\\bm 0\\)的基础解系，将其正交化、单位化 将所得的正交单位特征向量作为列向量组构成正交矩阵（注意特征向量和特征值的顺序）\\(\\bm Q\\)，则\\(\\bm Q^T\\bm{AQ}=\\bm Q^{-1}\\bm{AQ}=diag(\\lambda_1,\\lambda_2,\\cdots,\\lambda_n)\\) 二次型及其标准型 n元二次型的定义如下 \\[ f(x_1,\\cdots,x_n)=a_{11}x_1^2+2a_{12}x_1x_2+\\cdots+2a_{1n}x_1x_n+a_{22}x_2^2+2a_{2n}x_2x_n+\\cdots+a_{nn}x_{n}^2\\\\= (x_1,\\cdots,x_n) \\begin{bmatrix} a_{11}x_1+a_{12}x_2+\\cdots+a_{1n}x_n\\\\ a_{21}x_1+a_{22}x_2+\\cdots+a_{2n}x_n\\\\ \\vdots\\\\ a_{n1}x_1+a_{n2}x_2+\\cdots+a_{nn}x_n \\end{bmatrix}\\\\= (x_1,\\cdots,x_n) \\begin{bmatrix} a_{11} \u0026amp; a_{12} \u0026amp; \\cdots \u0026amp; a_{1n}\\\\ a_{21} \u0026amp; a_{22} \u0026amp; \\cdots \u0026amp; a_{2n}\\\\ \\vdots \u0026amp; \\vdots \u0026amp; \u0026amp; \\vdots\\\\ a_{n1} \u0026amp; a_{n2} \u0026amp; \\cdots \u0026amp; a_{nn} \\end{bmatrix} \\begin{bmatrix} x_1\\\\ x_2\\\\ \\vdots\\\\ x_n \\end{bmatrix} \\]\n亦可表示为\\(f(\\bm x)=\\bm x^T\\bm {Ax}\\)。其中\\(\\bm A^T=\\bm A\\)为实对称矩阵。\\(\\bm A\\)称为二次型式的矩阵，其秩称为二次型式的秩。\n仅含平方项的二次型称之为标准型。\n显然\\(\\bm x^T\\bm {Ax}\\)为标准型的充要条件是\\(\\bm A\\)为对角矩阵。\n\\(\\bm A\\)可以直接读出，先写一个对角矩阵，对角线的元素值即为平方项的系数，对角线以上的元素找对应项的系数除以2，之后再将对角线以上的元素“对称地”写到对角线以下的元素\n矩阵的合同 设\\(\\bm{A,B}\\)为\\(n\\)阶矩阵，若存在\\(n\\)阶可逆矩阵\\(\\bm C\\)，使得\\(\\bm C^{T}\\bm A\\bm C=\\bm B\\)则称\\(\\bm A\\)与\\(\\bm B\\)合同，记作\\(\\bm A\\simeq \\bm B\\)\n具有以下性质：自反性、传递性、对称性。\n以及若\\(\\bm{A,B}\\)合同，且\\(\\bm A\\)为对称矩阵，则\\(\\bm B\\)也为对称矩阵，且\\(R(\\bm A)=R(\\bm B)\\)\n化二次型为标准型 有三种方法\n1.正交变换法\n若\\(\\bm Q\\)为正交矩阵，则称线性变换\\(\\bm{x=Qy}\\)为正交变换。\n对于任意\\(n\\)元二次型\n\\[ f(x_1,x_2,\\cdots,x_n)=\\bm{x}^T\\bm{Ax} \\]\n总存在正交变换\\(\\bm{x=Qy}\\)，使得\n\\[ f(x_1,x_2,\\cdots,x_n)\\xlongequal{\\bm{x=Qy}}\\lambda_1y_1^2+\\lambda_2y_2^2+\\cdots+\\lambda_ny_n^2 \\]\n其中\\(\\lambda_1,\\lambda_2,\\cdots,\\lambda_n\\)为\\(\\bm A\\)的全部特征值。\n\\(\\bm Q\\)的计算方法：\n求\\(\\bm A\\)的特征向量 将所有特征向量正交化、单位化 再将得到的向量组成列向量组，即为\\(\\bm Q\\)。注意组合的顺序 2.配方法\n例如：\n\\[ f(x_1,x_2.x_3)=2(x_1^2+2x_1x_2+4x_1x_3)+x_2^2+14x_2x_3-x_3^2\\\\ =2(x_1+x_2+2x_3)^2-(x_2-3x_3)^2 \\]\n令\n\\[ \\left\\{\\begin{matrix} y_1=x_1+x_2+2x_3 \\\\ y_2=x_2-3x_3 \\\\ y_3=x_3 \\end{matrix}\\right. \\]\n则有\n\\[ \\left\\{\\begin{matrix} x_1=y_1-y_2-5y_3 \\\\ x_2=y_2+3y_3 \\\\ x_3=y_3 \\end{matrix}\\right. \\]\n即\n\\[ \\bm x= \\begin{bmatrix} x_1 \\\\ x_2 \\\\ x_3 \\end{bmatrix} = \\begin{bmatrix} 1 \u0026amp; -1 \u0026amp; -5 \\\\ 0 \u0026amp; 1 \u0026amp; 3 \\\\ 0 \u0026amp; 0 \u0026amp; 1 \\end{bmatrix} =\\bm{Qy} \\]\n3.初等变换法\n对\\(2n\\times n\\)矩阵实施一次初等列变换及相应的初等行变换，直至把\\(\\bm A\\)化为对角矩阵\\(\\bm \\Lambda\\)，即\n\\[ \\begin{bmatrix} \\bm A \\\\ \\bm E \\end{bmatrix} \\sim \\begin{bmatrix} \\bm \\Lambda \\\\ \\bm Q \\end{bmatrix} \\]\n且有\\(\\bm{Q}^T\\bm{AQ}=\\bm\\Lambda\\)\n二次型的规范型 设实二次型\\(f(x_1,x_2,\\cdots,x_n)\\)经过可逆线性变换转化为标准型\n\\[ f(x_1,x_2,\\cdots,x_n)=d_1y_1^2+\\cdots+d_py_p^2-d_{p+1}y_{p+1}^2-\\cdots-d_ry_r^2 \\]\n其中\\(r\\)是二次型的秩，\\(d_i\u0026gt;0\\)，则可以再做一次线性变换\n\\[ \\left\\{\\begin{matrix} y_1=\\frac{1}{\\sqrt{d_1}}z_1 \\\\ \\vdots \\\\ y_r = \\frac{1}{\\sqrt{d_r}}z_r \\\\ y_{r+1}=z_{r+1} \\\\ \\vdots\\\\ y_n=z_n \\end{matrix}\\right. \\]\n则得到\n\\[ f(x_1,x_2,\\cdots,x_n)=z_1^2+\\cdots+z_p^2-z_{p+1}^2-\\cdots-z_r^2 \\]\n称为规范标准型，简称规范型。\n二次型的标准型是不唯一的，但规范标准型是唯一的（并且对于实二次型来说一定存在规范型）。这也被称作惯性定律。\n标准型中正平方项的个数\\(p\\)称为正惯性指数，负平方项的个数\\(q\\)称为负惯性指数。\\(p-q\\)称为二次型的符号差。\n并且有如下定理\n定理\n任何实对称矩阵必合同于如下形式的对角矩阵\n\\[ \\begin{bmatrix} \\bm{E}_p \u0026amp; \u0026amp; \\\\ \u0026amp; -\\bm{E}_q \u0026amp; \\\\ \u0026amp; \u0026amp; \\bm{0} \\end{bmatrix} \\]\n正定二次型 对于任何非零（强调非零）向量\\(\\bm{x}=(x_1,\\cdots,x_n)\\)都有\n\\[ f(x_1,\\cdots,x_n)=\\bm{x}^T\\bm{Ax}\u0026gt;0(\u0026lt;0) \\]\n则称\\(f\\)是正定（负定）二次型，\\(\\bm{A}\\)称为正定（负定）矩阵。\n如果上式取\\(\\ge(\\leq)\\)，则为半正定（半负定）二次型。\n如果\\(f\\)既不是半正定的，也不是半负定的，则称为不定的。\n有如下定理\n定理1\n可逆的线性变换不改变二次型的正定性\n定理2\n\\(\\bm{A,B}\\)合同，则\\(\\bm{A}\\)正定的充要条件是\\(\\bm{B}\\)正定。\n定理3\n若\\(\\bm A\\)是\\(n\\)阶正定矩阵，则\n\\(\\bm A\\)的主对角线元\\(a_{ii}\u0026gt;0\\) \\(|\\bm A|\u0026gt;0\\) \\(k\\)阶顺序主子式\n设\\(\\bm A\\)为\\(n\\)阶方阵，依次取\\(\\bm A\\)的前\\(k\\)行与前\\(k\\)列所构成的子式的行列式称为矩阵\\(\\bm A\\)的\\(k\\)阶顺序主子式。\n显然\\(n\\)阶方阵\\(\\bm A\\)的顺序主子式有且只有\\(n\\)个。\n有如下定理\n霍尔维茨定理\n\\(n\\)元实二次型\\(f=\\bm{x}^T\\bm{Ax}\\)正定的充要条件是\\(\\bm A\\)的\\(n\\)个顺序主子式均大于零。\n","date":"2022-06-04T12:11:53+08:00","permalink":"https://kegalas.top/p/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0%E6%95%B4%E7%90%86/","title":"线性代数整理"},{"content":"[TOC]\n向量代数与空间解析几何 方向角与方向余弦 非零向量\\(\\bold{r}\\)与三条坐标轴的夹角\\(\\alpha\\)、\\(\\beta\\)、\\(\\gamma\\)称为向量\\(\\bold{r}\\)的方向角。设\\(\\overrightarrow{OM}=\\bold{r}=(x,y,z)\\)，则有\n\\[ (cos\\alpha,cos\\beta,cos\\gamma)=\\left(\\frac{x}{|\\bold{r}|},\\frac{y}{|\\bold{r}|},\\frac{z}{|\\bold{r}|}\\right)=\\frac{1}{|\\bold{r}|}(x,y,z)=\\frac{\\bold{r}}{|\\bold{r}|}=\\bold{e} \\]\n\\(cos\\alpha,cos\\beta,cos\\gamma\\)称为向量\\(\\bold{r}\\)的方向余弦。并且有\n\\[ cos^2\\alpha+cos^2\\beta+cos^2\\gamma = 1 \\]\n数量积的运算规律 交换律 \\(\\bold{a}\\cdot\\bold{b}=\\bold{b}\\cdot\\bold{a}\\)\n分配律 \\((\\bold{a+b})\\cdot \\bold{c}=\\bold{a\\cdot c+b\\cdot c}\\)\n如下的结合律 \\((\\lambda \\bold{a})\\cdot\\bold{b}=\\lambda(\\bold{a\\cdot b})\\),\\(\\lambda\\)为数\n向量积的运算规律 \\(\\bold{b\\times a=-a\\times b}\\)\n分配律 \\(\\bold{(a+b)\\times c=a\\times c+b\\times c}\\)\n如下的结合律 \\((\\lambda \\bold{a})\\times \\bold{b}=\\lambda(\\bold{a\\times b})\\),\\(\\lambda\\)为数\n平面的点法式方程 当平面\\(\\Pi\\)上一点\\(M_0(x_0,y_0,z_0)\\)和它的一个法线向量\\(\\bold{n}=(A,B,C)\\)已知时，有平面的点法式方程：\n\\[ A(x-x_0)+B(y-y_0)+C(z-z_0)=0 \\]\n平面的一般方程 \\[ Ax+By+Cz+D=0 \\]\n其中这个平面的法向量为\\(\\bold{n}=(A,B,C)\\)\n平面的截距式方程 \\[ \\frac{x}{a}+\\frac{y}{b}+\\frac{z}{c}=1 \\]\n其中\\(a,b,c\\)分别为\\(x,y,z\\)轴上的截距\n两平面夹角 \\[ cos\\theta=\\frac{|A_1A_2+B_1B_2+C_1C_2|}{\\sqrt{A_1^2+B_1^2+C_1^2}\\sqrt{A_2^2+B_2^2+C_2^2}} \\]\n点到平面距离公式 点\\(P_0(x_0,y_0,z_0)\\)到平面\\(Ax+By+Cz+D=0\\)的距离公式\n\\[ d=\\frac{|Ax_0+By_0+Cz_0+D|}{\\sqrt{A^2+B^2+C^2}} \\]\n空间直线的一般方程 \\[ \\left\\{\\begin{matrix} A_1x+B_1y+C_1z+D_1=0\\\\ A_2x+B_2y+C_2z+D_2=0 \\end{matrix}\\right. \\]\n即两个平面的交线\n另外两个平面的法向量的向量积可以算出直线的切向量\n平面束方程 由上述空间直线方程可知，通过这一直线的平面还有\n\\[ \\lambda(A_1x+B_1y+C_1z+D_1)+\\mu(A_2x+B_2y+C_2z+D_2)=0 \\]\n其中\\(\\lambda=1\\)时\n\\[ (A_1x+B_1y+C_1z+D_1)+\\mu(A_2x+B_2y+C_2z+D_2)=0 \\]\n表示除了\\(A_2x+B_2y+C_2z+D_2=0\\)，之外的过直线的平面束。\n空间直线的对称式方程(点向式方程) 若已知直线过一点\\(M_0(x_0, y_0, z_0)\\)和它的一个方向向量\\(\\bold{s}=(m,n,p)\\)。则有方程\n\\[ \\frac{x-x_0}{m}=\\frac{y-y_0}{n}=\\frac{z-z_0}{p} \\]\n空间直线的参数方程 若设\n\\[ \\frac{x-x_0}{m}=\\frac{y-y_0}{n}=\\frac{z-z_0}{p}=t \\]\n则有\n\\[ \\left\\{\\begin{matrix} x=x_0+mt \\\\ y=y_0+nt \\\\ z=z_0+pt \\end{matrix}\\right. \\]\n两直线的夹角 设两直线方向向量分别为\\(\\bold{s_1}=(m_1,n_1,p_1)\\)和\\(\\bold{s_2}=(m_2,n_2,p_2)\\)\n\\[ cos\\varphi = \\frac{|m_1m_2+n_1n_2+p_1p_2|}{\\sqrt{m_1^2+n_1^2+p_1^2}\\sqrt{m_2^2+n_2^2+p_2^2}} \\]\n直线与平面的夹角 设直线方向向量和平面法向量分别为\\(\\bold{s}=(m,n,p)\\)和\\(\\bold{n}=(A,B,C)\\)\n\\[ sin\\varphi = \\frac{|Am+Bn+Cp|}{\\sqrt{A^2+B^2+C^2}\\sqrt{m^2+n^2+p^2}} \\]\n旋转曲面 设在\\(yOz\\)坐标面上有一已知曲线\\(f(y,z)=0\\)\n则把这个曲线绕z轴旋转一周，得到的曲面为\\(f(\\pm\\sqrt{x^2+y^2},z)=0\\)\n绕y轴旋转则为\\(f(y,\\pm\\sqrt{x^2+z^2})=0\\)\n在其他坐标面上的曲线类似。\n二次曲面举例 椭圆锥面 \\[ \\frac{x^2}{a^2}+\\frac{y^2}{b^2}=z^2 \\]\n8-47.jpg 椭球面 \\[ \\frac{x^2}{a^2}+\\frac{y^2}{b^2}+\\frac{z^2}{c^2}=1 \\]\n8-49.jpg 单叶双曲面 \\[ \\frac{x^2}{a^2}+\\frac{y^2}{b^2}-\\frac{z^2}{c^2}=1 \\]\n8-40.jpg 双叶双曲面 \\[ \\frac{x^2}{a^2}-\\frac{y^2}{b^2}-\\frac{z^2}{c^2}=1 \\]\n8-41.jpg 椭圆抛物面 \\[ \\frac{x^2}{a^2}+\\frac{y^2}{b^2}=z \\]\n8-50 双曲抛物面 \\[ \\frac{x^2}{a^2}-\\frac{y^2}{b^2}=z \\]\n8-51 空间曲线及其方程 一般方程 即两个曲面的交线\n\\[ \\left\\{\\begin{matrix} F(x,y,z) = 0 \\\\ G(x,y,z) = 0 \\end{matrix}\\right. \\]\n参数方程 \\[ \\left\\{\\begin{matrix} x=x(t) \\\\ y=y(t) \\\\ z=z(t) \\end{matrix}\\right. \\]\n多元函数微分法及其应用 多元函数的极限 注意极限存在，当且仅当从各个方向趋近那个点时得到的值存在并相等。\n例如\\(f(x,y)=\\frac{xy}{x^2+y^2},x^2+y^2\\neq 0;f(x,y)=0,x^2+y^2=0\\)，有沿x轴y轴趋近\\((0,0)\\)极限都为0，但沿直线\\(y=kx\\)趋近时极限随\\(k\\)变化。故极限不存在。\n偏导数 注意有时利用定义求解偏导数会更优\n例如关于\\(x\\)的偏导数\n\\[ \\lim_{\\Delta x \\to 0}\\frac{f(x_0+\\Delta x,y_0)-f(x_0,y_0)}{\\Delta x} \\]\n在如\\(x_0=0,y_0=0\\)或者其他性质比较好的点，会更容易求。\n高阶偏导数 注意分母上，求导顺序为从左到右。\n如果函数\\(z=f(x,y)\\)的两个二阶混合偏导数\\(\\frac{\\partial^2z}{\\partial y\\partial x}\\)及\\(\\frac{\\partial^2z}{\\partial x\\partial y}\\)在区域\\(D\\)内连续，那么在该区域内这两个二阶混合偏导数必相等。\n全微分 必要条件 如果函数\\(z=f(x,y)\\)在点\\((x,y)\\)可微分（蕴含着函数在该点上连续），那么该函数在点\\((x,y)\\)的偏导数\\(\\frac{\\partial z}{\\partial x}\\)与\\(\\frac{\\partial z}{\\partial y}\\)必定存在，且该函数在该点的全微分为\n\\[ dz=\\frac{\\partial z}{\\partial x}\\Delta x+\\frac{\\partial z}{\\partial y}\\Delta y \\]\n但这只是必要条件。\n形式上的全微分\\(\\Delta z\\)(和上文的\\(dz\\)一个意思)应该满足\n\\[ \\frac{\\Delta z-[f_x(x_0,y_0)\\cdot\\Delta x+f_y(x_0,y_0)\\cdot\\Delta y]}{\\rho} \\]\n随着\\(\\rho\\to0\\)而趋于\\(0\\)。\n其中\n\\[ \\rho=\\sqrt{(\\Delta x)^2+(\\Delta y)^2} \\]\n才能可微。\n充分条件 如果函数\\(z=f(x,y)\\)的偏导数\\(\\frac{\\partial z}{\\partial x}\\)、\\(\\frac{\\partial z}{\\partial y}\\)在\\((x,y)\\)连续，那么该函数在该点可微分。\n多元复合函数的求导法则 一元函数与多元函数复合的情形 如果函数\\(u=\\varphi(t)\\)及\\(v=\\psi(t)\\)都在点\\(t\\)可导，函数\\(z=f(u,v)\\)在对应点\\((u,v)\\)具有连续偏导数，那么复合函数\\(z=f[\\varphi(t),\\psi(t)]\\)在t可导，且有\n\\[ \\frac{dz}{dt}=\\frac{\\partial z}{\\partial u}\\frac{du}{dt}+\\frac{\\partial z}{\\partial v}\\frac{dv}{dt} \\]\n多元函数与多元函数复合的情形 \\[ u=\\varphi(x,y),v=\\psi(x,y),z=f(u,v) \\]\n若都在对应点\\((x,y)\\)具有连续偏导数，则\n\\[ \\frac{\\partial z}{\\partial x}=\\frac{\\partial z}{\\partial u}\\frac{\\partial u}{\\partial x}+\\frac{\\partial z}{\\partial v}\\frac{\\partial v}{\\partial x} \\]\n\\[ \\frac{\\partial z}{\\partial y}=\\frac{\\partial z}{\\partial u}\\frac{\\partial u}{\\partial y}+\\frac{\\partial z}{\\partial v}\\frac{\\partial v}{\\partial y} \\]\n混合复合 根据每个复合函数是否含有自变量\\(x,y\\)进行偏导，例如\n\\[ u=\\varphi(x,y),v=\\psi(y),z=f(u,v) \\]\n则\n\\[ \\frac{\\partial z}{\\partial x}=\\frac{\\partial z}{\\partial u}\\frac{\\partial u}{\\partial x} \\]\n\\[ \\frac{\\partial z}{\\partial y}=\\frac{\\partial z}{\\partial u}\\frac{\\partial u}{\\partial y}+\\frac{\\partial z}{\\partial v}\\frac{d v}{d y} \\]\n如果有两层复合函数，则要求导至将\\(x,y\\)这样的自变量暴露出来。\n全微分形式的不变性 设函数\\(z=f(u,v)\\)具有连续偏导数，则有全微分\n\\[ dz=\\frac{\\partial z}{\\partial u}du+\\frac{\\partial z}{\\partial v}dv \\]\n若有\\(u=\\varphi(x,y),v=\\psi(x,y)\\)，有\n\\[ dz=\\frac{\\partial z}{\\partial x}dx+\\frac{\\partial z}{\\partial y}dy \\]\n显然可以算出\\(\\frac{\\partial z}{\\partial x},\\frac{\\partial z}{\\partial y}\\)，代入有\n\\[ dz=\\frac{\\partial z}{\\partial u}du+\\frac{\\partial z}{\\partial v}dv \\]\n此为全微分形式的不变性。\n隐函数的求导公式 一个方程的情形 \\[ F(x,y)=0 \\]\n\\[ \\frac{dy}{dx}=-\\frac{F_x}{F_y} \\]\n条件：F在某点的某一邻域内具有连续偏导数，\\(F_y\\)在该点不为0\n\\[ F(x,y,z)=0 \\]\n\\[ \\frac{\\partial z}{\\partial x}=-\\frac{F_x}{F_z},\\frac{\\partial z}{\\partial y}=-\\frac{F_y}{F_z} \\]\n条件类似于上条。\n方程组的情形 考虑如下方程组\n\\[ \\left\\{\\begin{matrix} F(x,y,u,v)=0\\\\ G(x,y,u,v)=0 \\end{matrix}\\right. \\]\n一般四个变量只能有两个变量独立变化\n即\n\\[ u(x,y),v(x,y) \\]\n两边应用求导法则得\n\\[ F_x+F_u\\frac{\\partial u}{\\partial x}+F_v\\frac{\\partial v}{\\partial x}=0 \\]\n\\[ G_x+G_u\\frac{\\partial u}{\\partial x}+G_v\\frac{\\partial v}{\\partial x}=0 \\]\n解方程求出偏导数，求关于\\(y\\)的偏导数同理。\n多元函数积分学的几何应用 一元向量值函数及其导数 空间曲线\\(\\Gamma\\)的参数方程为\n\\[ \\left\\{\\begin{matrix} x=\\varphi(t), \\\\ y=\\psi(t), \\\\ z=\\omega(t) \\end{matrix}\\right. t\\in[\\alpha,\\beta] \\]\n写成向量形式，则为\n\\[ \\bold{r}=x\\bold{i}+y\\bold{j}+z\\bold{k} \\]\n\\[ \\bold{f}(t)=\\varphi(t)\\bold{i}+\\psi(t)\\bold{j}+\\omega(t)\\bold{k} \\]\n所以有\\(\\bold{r=f}(t)\\),\\(\\bold{r}\\)称为向量函数\n向量值导数如下：\n\\[ \\bold{f}\u0026#39;(t_0)=\\lim_{\\Delta t\\to 0}\\frac{\\Delta \\bold{r}}{\\Delta t} =\\lim_{\\Delta t\\to 0}\\frac{\\bold{f}(t_0+\\Delta t)-\\bold{f}(t_0)}{\\Delta t} \\]\n或者如下计算：\n\\[ \\bold{f}\u0026#39;(t_0)=\\bold{f_1}\u0026#39;(t_0)\\bold{i}+\\bold{f_2}\u0026#39;(t_0)\\bold j+ \\bold{f_3}\u0026#39;(t_0)\\bold k \\]\n空间曲线的切线与法平面 还是上面那个曲线\\(\\Gamma\\)，则切线方程为\n\\[ \\frac{x-x_0}{\\varphi\u0026#39;(t_0)}= \\frac{y-y_0}{\\psi\u0026#39;(t_0)}= \\frac{z-z_0}{\\omega\u0026#39;(t_0)} \\]\n法平面方程为\n\\[ \\varphi\u0026#39;(t_0)(x-x_0)+ \\psi\u0026#39;(t_0)(y-y_0)+ \\omega\u0026#39;(t_0)(z-z_0)=0 \\]\n若\\(\\Gamma\\)变为\n\\[ \\left\\{\\begin{matrix} x=x \\\\ y=\\varphi(x) \\\\ z=\\psi(x) \\end{matrix}\\right. \\]\n则切线方程变为\n\\[ \\frac{x-x_0}{1}= \\frac{y-y_0}{\\varphi\u0026#39;(x_0)}= \\frac{z-z_0}{\\psi\u0026#39;(x_0)} \\]\n法平面方程变为\n\\[ (x-x_0)+ \\varphi\u0026#39;(x_0)(y-y_0)+ \\psi\u0026#39;(x_0)(z-z_0)=0 \\]\n曲线为方程组情形时（三个变量一般只有一个自由变量，所以直接将\\(y,z\\)替换为\\(\\varphi(x),\\psi(x)\\)）\n\\[ F[x,\\varphi(x),\\psi(x)]=0 \\]\n\\[ G[x,\\varphi(x),\\psi(x)]=0 \\]\n两边求对\\(x\\)的全导数\n\\[ \\frac{\\partial F}{\\partial x}+\\frac{\\partial F}{\\partial y} \\frac{dy}{dx}+\\frac{\\partial F}{\\partial z}\\frac{dz}{dx}=0 \\]\n\\[ \\frac{\\partial G}{\\partial x}+\\frac{\\partial G}{\\partial y} \\frac{dy}{dx}+\\frac{\\partial G}{\\partial z}\\frac{dz}{dx}=0 \\]\n解出\\(\\bold{T}=(1,\\frac{dy}{dx},\\frac{dz}{dx})\\)，即\\(\\bold{T}=(1,\\varphi\u0026#39;(x_0),\\psi\u0026#39;(x_0))\\)，就是在此点的切向量，代入可知切线与法平面方程\n曲面的切平面与法线 若曲面由\\(F(x,y,z)=0\\)隐性给出，则在点\\(M(x_0,y_0,z_0)\\)切平面方程为\n\\[ F_x(x-x_0)+F_y(y-y_0)+F_z(z-z_0)=0 \\]\n其中各个偏导数都是在M点的偏导数，法线方程如下\n\\[ \\frac{x-x_0}{F_x}=\\frac{y-y_0}{F_y}=\\frac{z-z_0}{F_z} \\]\n考虑曲面方程为\\(z=f(x,y)\\)，则可令\\(F(x,y,z)=f(x,y)-z\\)\n显然有\n\\[ F_x(x,y,z)=f_x(x,y),F_y(x,y,z)=f_y(x,y),F_z(x,y,z)=-1 \\]\n切平面、法线方程类似于上。\n方向导数与梯度 方向导数：\n\\[ \\frac{\\partial f}{\\partial l}\\bigg|_{(x_0,y_0)}= \\lim _{t\\to 0^+}\\frac{f(x_0+tcos\\alpha,y_0+tcos\\beta)-f(x_0,y_0)}{t} \\]\n如果函数\\(f(x,y)\\)在点\\(P_0(x_0,y_0)\\)可微分，那么函数在该点沿任一方向\\(l\\)的方向导数存在，且有\n\\[ \\frac{\\partial f}{\\partial l}\\bigg|_{(x_0,y_0)}= f_x(x_0,y_0)cos\\alpha+f_y(x_0,y_0)cos\\beta \\]\n其中\\(cos\\alpha,cos\\beta\\)是方向\\(l\\)的方向余弦。\n梯度：\n\\[ \\bold{grad}f(x_0,y_0)=\\nabla f(x_0,y_0)=f_x(x_0,y_0)\\bold{i}+ f_y(x_0,y_0)\\bold{j} \\]\n如果方向导数存在，则\n\\[ \\frac{\\partial f}{\\partial l}\\bigg|_{(x_0,y_0)}= f_x(x_0,y_0)cos\\alpha+f_y(x_0,y_0)cos\\beta =\\nabla f(x_0,y_0)\\cdot \\bold{e}_l=|\\nabla f|cos\\theta \\]\n其中\n\\[ \\theta=\u0026lt;\\nabla f,\\bold{e}_l\u0026gt; \\]\n多元函数的极值及其求法 必要条件 设函数\\(z=f(x,y)\\)在点\\((x_0,y_0)\\)具有偏导数，且在点\\((x_0,y_0)\\)处有极值，则有\n\\[ f_x(x_0,y_0)=0,f_y(x_0,y_0)=0 \\]\n充分条件 设函数\\(z=f(x,y)\\)在点\\((x_0,y_0)\\)的某领域内连续且有一阶和二阶连续偏导数，又\\(f_x(x_0,y_0)=0,f_y(x_0,y_0)=0\\)，令\n\\[ f_{xx}(x_0,y_0)=A,f_{xy}(x_0,y_0)=B,f_{yy}(x_0,y_0)=C \\]\n若\n\\(AC-B^2\u0026gt;0\\)时具有极值，\\(A\u0026lt;0\\)时有极大值，\\(A\u0026gt;0\\)时有极小值；\n\\(AC-B^2\u0026lt;0\\)时没有极值\n\\(AC-B^2=0\\)时可能有也可能没有，需要另作讨论。\n拉格朗日乘数法 要找函数\\(z=f(x,y)\\)在附加条件\\(\\varphi(x,y)=0\\)下的可能极值点，先设\n\\[ L(x,y)=f(x,y)+\\lambda\\varphi(x,y) \\]\n令\n\\[ \\left\\{\\begin{matrix} L_x=f_x+\\lambda\\varphi_x=0 \\\\ L_y=f_y+\\lambda\\varphi_y=0 \\\\ L_{\\lambda}=\\varphi=0 \\end{matrix}\\right. \\]\n解出\\(x,y,\\lambda\\)，代入函数\\(f\\)中求得可能的极值点。\n多个条件时，如多加一个\\(\\psi(x,y)=0\\)，则设方程\n\\[ L(x,y)=f(x,y)+\\lambda\\varphi(x,y)+\\mu\\psi(x,y) \\]\n分别求\\(L_x=0,L_y=0,L_\\lambda=0,L\\mu=0\\)，代入原函数中求可能的极值点。\n重积分 二重积分的概念与性质 性质：\n设\\(\\alpha,\\beta\\)为常数，则 \\[ \\iint\\limits_{D}[\\alpha f(x,y)+\\beta g(x,y)]d\\sigma= \\alpha\\iint\\limits_{D}f(x,y)d\\sigma+\\beta\\iint\\limits_{D}g(x,y)d\\sigma \\]\n如果闭区域\\(D\\)被有限条曲线分为有限个部分闭区域，那么在\\(D\\)上的二重积分等于在各部分闭区域上的二重积分的和 \\[ \\iint\\limits_{D}f(x,y)d\\sigma= \\iint\\limits_{D_1}f(x,y)d\\sigma+\\iint\\limits_{D_2}f(x,y)d\\sigma \\]\n如果在\\(D\\)上，\\(f(x,y)=1\\),\\(\\sigma\\)为\\(D\\)的面积，那么 \\[ \\sigma=\\iint\\limits_{D}1\\cdot d\\sigma=\\iint\\limits_{D}d\\sigma \\]\n如果在\\(D\\)上，\\(f(x,y)\\leq g(x,y)\\)，那么有 \\[ \\iint\\limits_{D}f(x,y)d\\sigma\\leq\\iint\\limits_{D}g(x,y)d\\sigma \\]\n特别的，有\n\\[ \\left|\\iint\\limits_{D}f(x,y)d\\sigma\\right|\\leq \\iint\\limits_{D}|f(x,y)|d\\sigma \\]\n设\\(M\\)和\\(N\\)分别是\\(f(x,y)\\)在闭区域\\(D\\)上的最大值和最小值，\\(\\sigma\\)是\\(D\\)的面积，则有 \\[ m\\sigma\\leq\\iint\\limits_{D}f(x,y)d\\sigma\\leq M\\sigma \\]\n设函数\\(f(x,y)\\)在闭区域D上连续，\\(\\sigma\\)是\\(D\\)的面积，则在\\(D\\)上至少存在一点\\((\\xi,\\eta)\\)，使得 \\[ \\iint\\limits_{D}f(x,y)d\\sigma=f(\\xi,\\eta)\\sigma \\]\n二重积分的计算法 利用直角坐标计算二重积分 10-4 在如图的区域中，积分上限为上方曲线，积分下限为下方曲线。\n\\[ \\iint\\limits_{D}f(x,y)d\\sigma=\\int_a^bdx\\int_{\\varphi_1(x)} ^{\\varphi_2(x)}f(x,y)dy \\]\n10-6 如图则，积分上限为右侧曲线，下限为左侧曲线。\n\\[ \\iint\\limits_{D}f(x,y)d\\sigma=\\int_c^ddy\\int_{\\psi_1(y)} ^{\\psi_2(y)}f(x,y)dx \\]\n利用极坐标计算二重积分 有\n\\[ x=\\rho cos\\theta \\]\n\\[ y=\\rho sin\\theta \\]\n且有对于下图\n10-18 \\[ \\iint\\limits_{D}f(x,y)d\\sigma=\\iint\\limits_{D}f(\\rho cos\\theta, \\rho sin\\theta)\\rho d\\rho d\\theta \\]\n\\[ =\\int_\\alpha^\\beta d\\theta\\int_{\\varphi_1(\\theta)} ^{\\varphi_2(\\theta)}f(\\rho cos\\theta, \\rho sin\\theta)\\rho d\\rho \\]\n三重积分的计算 利用直角坐标计算三重积分 “先1后2法”，即先以\\(z\\)为积分变量计算 \\[ \\iiint\\limits_\\Omega f(x,y,z)dv=\\int_a^bdx\\int_{y_1(x)}^{y_2(x)} dy\\int_{z_1(x,y)}^{z_2(x,y)}f(x,y,z)dz \\]\n“先2后1法”，即先以\\(xy\\)为积分变量计算 \\[ \\iiint\\limits_\\Omega f(x,y,z)dv=\\int_{c_1}^{c_2}dz\\iint\\limits_{D_z} f(x,y,z)dxdy \\]\n利用柱面坐标计算 有\n\\[ \\left\\{\\begin{matrix} x=\\rho cos\\theta \\\\ y=\\rho sin\\theta \\\\ z=z \\end{matrix}\\right. \\]\n有\n\\[ \\iiint\\limits_{\\Omega}f(x,y,z)dxdydz= \\iiint\\limits_{\\Omega}F(\\rho,\\theta,z)\\rho d\\rho d\\theta dz \\]\n利用球面坐标计算 有\n\\[ \\left\\{\\begin{matrix} x=rsin\\varphi cos\\theta \\\\ y=rsin\\varphi sin\\theta \\\\ z=rcos\\varphi \\end{matrix}\\right. \\]\n有\n\\[ \\iiint\\limits_{\\Omega}f(x,y,z)dxdydz= \\iiint\\limits_{\\Omega}F(r,\\varphi,\\theta)r^2sin\\varphi drd\\varphi d\\theta \\]\n拆分被积函数 详细的证明没有在书中和老师的教学中找到，互联网搜索也较难\n书上有许多例子，如当\n\\[ \\rho ^2\\leq z\\leq4,0\\leq\\rho\\leq2,0\\leq\\theta\\leq2\\pi \\]\n有\n\\[ \\iiint\\limits_{\\Omega}zdxdydz=\\iiint\\limits_{\\Omega}z\\rho d\\rho d\\theta dz=\\int_0^{2\\pi}d\\theta\\int_0^2\\rho d\\rho\\int_{\\rho^2}^4zdz \\]\n推断为，首先被积函数要是\\(f(z)g(\\rho)\\)等用乘法连接的，如\\(z\\rho\\)，而不能是加法如\\(z+\\rho\\)，才能拆分。另外跟积分上下限的关系不明。\n如果是加法，如\\(x+y+z\\)可以从轮换对称性考虑（如果有）\n重积分的应用 曲面面积 设曲面为\\(z=f(x,y)\\)，则\n\\[ A=\\iint\\limits_D\\sqrt{1+f_x^2(x,y)+f_y^2(x,y)}dxdy \\]\n质心 设有一平面薄片，占据\\(xOy\\)面上的闭区域\\(D\\)，在点\\((x,y)\\)处的面密度为\\(\\mu(x,y)\\)\n则有\n\\[ M_y=\\iint\\limits_Dx\\mu(x,y)d\\sigma, M_x=\\iint\\limits_Dy\\mu(x,y)d\\sigma \\]\n\\[ M=\\iint\\limits_D\\mu(x,y)d\\sigma \\]\n质心坐标为\n\\[ \\bar{x}=\\frac{M_y}{M}= \\frac{\\iint\\limits_Dx\\mu(x,y)d\\sigma}{\\iint\\limits_D\\mu(x,y)d\\sigma} \\]\n\\[ \\bar{y}=\\frac{M_x}{M}=\\frac{\\iint\\limits_Dy\\mu(x,y)d\\sigma}{\\iint\\limits_D\\mu(x,y)d\\sigma} \\]\n转动惯量 \\[ I_x=\\iint\\limits_Dy^2\\mu(x,y)d\\sigma,I_y=\\iint\\limits_Dx^2\\mu(x,y)d\\sigma \\]\n引力 空间一物体对物体外一点\\(P_0(x_0,y_0,z_0)\\)的单位质量的质点的引力\n物体密度\\(\\rho(x,y,z)\\)，\n\\[ \\bold{F}=(F_x,F_y,F_z) \\]\n\\[ =\\left ( \\iiint\\limits_\\Omega\\frac{G\\rho(x,y,z)(x-x_0)}{r^3}dv, \\iiint\\limits_\\Omega\\frac{G\\rho(x,y,z)(y-y_0)}{r^3}dv, \\iiint\\limits_\\Omega\\frac{G\\rho(x,y,z)(z-z_0)}{r^3}dv \\right ) \\]\n曲线积分与曲面积分 对弧长的曲线积分 性质 设\\(\\alpha,\\beta\\)为常数，则 \\[ \\int_L[\\alpha f(x,y)+\\beta g(x,y)]ds=\\alpha\\int_L f(x,y)ds+\\beta \\int_Lg(x,y)ds \\]\n若积分弧段\\(L\\)课分成两段光滑曲线弧\\(L_1\\)和\\(L_2\\)，则 \\[ \\int_Lf(x,y)ds=\\int_{L_1}f(x,y)ds+\\int_{L_2}f(x,y)ds \\]\n设在\\(L\\)上\\(f(x,y)\\leq g(x,y)\\), 则 \\[ \\int_L f(x,y)ds\\leq\\int_L g(x,y)ds \\]\n特别地，有\n\\[ \\left|\\int_L f(x,y)ds\\right|\\leq\\int_L|f(x,y)|ds \\]\n对弧长的曲线积分的计算法 设\\(f(x,y)\\)在曲线弧\\(L\\)上有定义且连续，\\(L\\)的参数方程为\n\\[ \\left\\{\\begin{matrix} x=\\varphi(t) \\\\ y=\\psi(t) \\end{matrix}\\right. (\\alpha\\leq t\\leq\\beta) \\]\n若\\(\\varphi(t)\\)、\\(\\psi(t)\\)在\\([\\alpha,\\beta]\\)上具有一阶连续导数，且\\(\\varphi\u0026#39;^2(t)+\\psi\u0026#39;^2(t)\\neq0\\)，则曲线积分\\(\\int_Lf(x,y)ds\\)存在，且\n\\[ \\int_Lf(x,y)ds=\\int_\\alpha^\\beta f[\\varphi(t),\\psi(t)] \\sqrt{\\varphi\u0026#39;^2(t)+\\psi\u0026#39;^2(t)}dt (a\u0026lt;\\beta) \\]\n注意\\(\\alpha\u0026lt;\\beta\\)是一定要有的。\n对坐标的曲线积分 \\[ \\int_LP(x,y)dx+Q(x,y)dy \\]\n也可以写作向量形式\n\\[ \\int_L\\bold{F(x,y)}\\cdot d\\bold{r} \\]\n其中\\(\\bold{F}=P\\bold{i}+Q\\bold{j}\\),\\(d\\bold{r}=dx\\bold{i}+dy\\bold{j}\\).\n性质 与上节相同\n与上节相同\n设\\(L\\)是有向光滑曲线弧，\\(L^-\\)是\\(L\\)的反向曲线弧，则\n\\[ \\int_{L^-}\\bold F(x,y)d\\bold r = -\\int_L\\bold F(x,y)d\\bold r \\]\n对坐标的曲线积分的计算方法 条件相似，不再重复，查阅书籍\n\\[ \\left\\{\\begin{matrix} x=\\varphi(t) \\\\ y=\\psi(t) \\end{matrix}\\right. \\]\n\\(t\\)单调地由\\(\\alpha\\)变到\\(\\beta\\)\n\\[ \\int_LP(x,y)dx+Q(x,y)dy \\]\n\\[ =\\int_\\alpha^\\beta\\{P[\\varphi(t),\\psi(t)]\\varphi\u0026#39;(t)+ Q[\\varphi(t),\\psi(t)]\\psi\u0026#39;(t)\\}dt \\]\n不需要\\(\\alpha\u0026lt;\\beta\\)，有时有\\(x=x,y=y(x)\\)，类似的替换公式即可。\n两类曲线积分之间的联系 \\[ \\int_LPdx+Qdy=\\int_L(Pcos\\alpha+Qcos\\beta)ds \\]\n易推广至三维\n也可以写成向量形式\n\\[ \\int_L\\bold A\\cdot d\\bold r = \\int_L\\bold A\\cdot\\bm{\\tau}ds= \\int_LA_{\\tau}ds \\]\n格林公式 定理1，设闭区域\\(D\\)由分段光滑的曲线\\(L\\)围成，若函数\\(P(x,y)\\)及\\(Q(x,y)\\)在\\(D\\)上具有一阶连续偏导数，则有\n\\[ \\iint\\limits_D(\\frac{\\partial Q}{\\partial x}-\\frac{\\partial P}{\\partial y}) dxdy=\\oint_LPdx+Qdy \\]\n其中\\(L\\)是\\(D\\)的取正向的边界曲线。\n对平面区域\\(D\\)的边界曲线\\(L\\)，规定正向如下：当观察者沿着\\(L\\)的这个方向行走时，\\(D\\)总在他的左边。\n定理2，设区域\\(G\\)是一个单连通域（复连通不是充要条件），若函数\\(P(x,y),Q(x,y)\\)在\\(G\\)内具有一阶连续偏导数，则曲线积分\\(\\int_LPdx+Qdy\\)在\\(G\\)内与路径无关（或沿着\\(G\\)内任意闭曲线的曲线积分为0）的充分必要条件是\n\\[ \\frac{\\partial P}{\\partial y}=\\frac{\\partial Q}{\\partial x} \\]\n在\\(G\\)内恒成立。\n定理3，设区域\\(G\\)是一个单连通域（复连通不是充要条件，若函数\\(P(x,y),Q(x,y)\\)在\\(G\\)内具有一阶连续偏导数，则\\(P(x,y)dx+Q(x,y)dy\\)在\\(G\\)内为某一函数\\(u(x,y)\\)的全微分的充分必要条件是\n\\[ \\frac{\\partial P}{\\partial y}=\\frac{\\partial Q}{\\partial x} \\]\n在\\(G\\)内恒成立。\n对面积的曲面积分 \\[ \\iint\\limits_{\\Sigma}f(x,y,z)dS \\]\n\\[ =\\iint\\limits_{D_{xy}}f[x,y,z(x,y)]\\sqrt{1+z_x^2(x,y)+z_y^2(x,y)}dxdy \\]\n对坐标的曲面积分 关于方向 假设某块小曲面\\(\\Delta S\\)与\\(z\\)轴的夹角为\\(\\gamma\\)角，在\\(xOy\\)面上的投影是\\((\\Delta\\sigma)_{xy}\\)，则规定\\(\\Delta S\\)在\\(xOy\\)面上的投影\\((\\Delta S)_{xy}\\)为\n\\[ (\\Delta S)_{xy}=\\left\\{\\begin{matrix} (\\Delta\\sigma)_{xy}, cos\\gamma\u0026gt;0 \\\\ -(\\Delta\\sigma)_{xy}, cos\\gamma\u0026lt;0 \\\\ 0, cos\\gamma\\equiv 0 \\end{matrix}\\right. \\]\n投影到其他坐标面类似，总而言之向上、向右、向前是正向曲面。\n对坐标的曲面积分的计算法 如果曲面积分是在曲面\\(\\Sigma\\)上侧的，那么\n\\[ \\iint\\limits_\\Sigma R(x,y,z)dxdy=\\iint\\limits_{D_{xy}}R[x,y,z(x,y)]dxdy \\]\n若在下侧，则\n\\[ \\iint\\limits_\\Sigma R(x,y,z)dxdy=-\\iint\\limits_{D_{xy}}R[x,y,z(x,y)]dxdy \\]\n同理有\n\\[ \\iint\\limits_\\Sigma P(x,y,z)dydz=\\pm\\iint\\limits_{D_{yz}}P[x(y,z),y,z]dydz \\]\n\\[ \\iint\\limits_\\Sigma Q(x,y,z)dzdx=\\pm\\iint\\limits_{D_{zx}}Q[x,y(z,x),z]dzdx \\]\n两类曲面积分之间的联系 \\[ \\iint\\limits_\\Sigma Pdydz+Qdzdx+Rdxdy=\\iint\\limits_\\Sigma(Pcos\\alpha+Qcos\\beta+Rcos\\gamma)dS \\]\n写成向量形式\n\\[ \\iint\\limits_\\Sigma \\bold{A}\\cdot d\\bold{S}=\\iint\\limits_\\Sigma \\bold{A}\\cdot\\bold{n}dS \\]\n高斯公式 通量与散度 高斯公式 设空间闭区域\\(\\Omega\\)是由分片光滑的闭曲面\\(\\Sigma\\)所围成，若函数\\(P(x,y,z),Q(x,y,z),R(x,y,z)\\)在\\(\\Omega\\)上具有一阶连续偏导数，则有 \\[ \\iiint\\limits_\\Omega(\\frac{\\partial P}{\\partial x}+\\frac{\\partial Q}{\\partial y}+\\frac{\\partial R}{\\partial z})dv=\\oiint\\limits_\\Sigma Pdydz+Qdzdx+Rdxdy \\]\n或\n\\[ \\iiint\\limits_\\Omega(\\frac{\\partial P}{\\partial x}+\\frac{\\partial Q}{\\partial y}+\\frac{\\partial R}{\\partial z})dv=\\oiint\\limits_\\Sigma(Pcos\\alpha+Qcos\\beta+Rcos\\gamma)dS \\]\n这里\\(\\Sigma\\)是\\(\\Omega\\)的整个边界曲面的外侧，\\(cos\\alpha、cos\\beta、cos\\gamma\\)是\\(\\Sigma\\)在点\\((x,y,z)\\)处的法向量的方向余弦。\n沿任意闭曲面的曲面积分为零的条件 设\\(G\\)是空间二维单连通区域，若\\(P(x,y,z),Q(x,y,z),R(x,y,z)\\)在\\(G\\)内具有一阶连续偏导数，则曲面积分\n\\[ \\iint\\limits_\\Sigma Pdydz+Qdzdx+Rdxdy \\]\n在\\(G\\)内所取曲面\\(\\Sigma\\)无关而只取决于\\(\\Sigma\\)的边界曲线(或沿\\(G\\)内任一闭曲面的曲面积分为零)的充分必要条件是\n\\[ \\frac{\\partial P}{\\partial x}+\\frac{\\partial Q}{\\partial y}+\\frac{\\partial R}{\\partial z}=0 \\]\n在\\(G\\)内恒成立。\n通量与散度 设有向量场\n\\[ \\bold{A}(x,y,z) = P(x,y,z)\\bold i+Q(x,y,z)\\bold j+R(x,y,z)\\bold k \\]\n其中函数\\(P,Q,R\\)均有一阶连续偏导数，\\(\\Sigma\\)是场内的一片有向曲面，\\(\\bold n\\)是\\(\\Sigma\\)在点\\((x,y,z)\\)处的单位法向量，则积分\n\\[ \\iint\\limits_\\Sigma \\bold A\\cdot \\bold ndS \\]\n称为向量场\\(\\bold A\\)通过曲面\\(\\Sigma\\)向着指定侧的通量（或流量）。 又可表达为\n\\[ \\iint\\limits_\\Sigma \\bold A\\cdot \\bold ndS=\\iint\\limits_\\Sigma \\bold Ad\\bold S=\\iint\\limits_\\Sigma Pdydz+Qdzdx+Rdxdy \\]\n对于这个向量场，其散度记作\\(div\\bold A\\)，即\n\\[ div\\bold A=\\frac{\\partial P}{\\partial x}+\\frac{\\partial Q}{\\partial y}+\\frac{\\partial R}{\\partial z} \\]\n利用向量微分算子\\(\\nabla\\)，也可以表示为\n\\[ div\\bold A = \\nabla\\cdot\\bold A \\]\n利用向量场的通量和散度，高斯公式可以写成\n\\[ \\iiint\\limits_{\\Omega}div\\bold Adv=\\iint\\limits_\\Sigma A_ndS \\]\n斯托克斯公式 环流量与旋度 斯托克斯公式 设\\(\\Gamma\\)为分段光滑的空间有向闭曲线，\\(\\Sigma\\)是以\\(\\Gamma\\)为边界的分片光滑的有向曲面，\\(\\Gamma\\)的正向与\\(\\Sigma\\)的侧符合右手规则，若函数\\(P(x,y,z),Q(x,y,z),R(x,y,z)\\)在曲面\\(\\Sigma\\)(连同边界\\(\\Gamma\\))上具有一阶连续偏导数，则有\n\\[ \\iint\\limits_\\Sigma\\left(\\frac{\\partial R}{\\partial y}-\\frac{\\partial Q}{\\partial z}\\right)dydz+\\left(\\frac{\\partial P}{\\partial z}-\\frac{\\partial R}{\\partial x}\\right)dzdx+\\left(\\frac{\\partial Q}{\\partial x}-\\frac{\\partial P}{\\partial y}\\right)dxdy \\]\n\\[ =\\oint_\\Gamma Pdx+Qdy+Rdz \\]\n空间曲线积分与路径无关的条件 设空间区域\\(G\\)是一维单连通域，若函数\\(P(x,y,z),Q(x,y,z),R(x,y,z)\\)在\\(G\\)内具有一阶连续偏导数，则空间曲线积分\\(\\int_\\Gamma Pdx+Qdy+Rdz\\)在\\(G\\)内与路径无关（或沿\\(G\\)内任意闭合曲线的曲线积分为零）的充分必要条件是\n\\[ \\frac{\\partial P}{\\partial y}=\\frac{\\partial Q}{\\partial x},\\frac{\\partial Q}{\\partial z}=\\frac{\\partial R}{\\partial y},\\frac{\\partial R}{\\partial x}=\\frac{\\partial P}{\\partial z} \\]\n在\\(G\\)内恒成立\n环流量与旋度 设有向量场\n\\[ \\bold{A}(x,y,z) = P(x,y,z)\\bold i+Q(x,y,z)\\bold j+R(x,y,z)\\bold k \\]\n其中函数\\(P,Q,R\\)均连续，\\(\\Gamma\\)是\\(\\bold A\\)的定义域内的一条分段光滑的有向闭曲线，\\(\\bm\\tau\\)是\\(\\Gamma\\)在点\\((x,y,z)\\)处的单位切向量，则积分\n\\[ \\oint_L\\bold A\\cdot\\bm {\\tau}ds \\]\n称为向量场\\(\\bold A\\)沿有向闭曲线\\(\\Gamma\\)的环流量。\n又可表述为\n\\[ \\oint_L\\bold A\\cdot\\bm {\\tau}ds=\\oint_L\\bold Ad\\bold r = \\oint_\\Gamma Pdx+Qdy+Rdz \\]\n向量场\\(\\bold A\\)的旋度，记作\\(\\bold{rotA}\\)，即\n\\[ \\bold{rotA} = \\left(\\frac{\\partial R}{\\partial y}-\\frac{\\partial Q}{\\partial z}\\right)\\bold i+\\left(\\frac{\\partial P}{\\partial z}-\\frac{\\partial R}{\\partial x}\\right)\\bold j+\\left(\\frac{\\partial Q}{\\partial x}-\\frac{\\partial P}{\\partial y}\\right)\\bold k \\]\n\\[ \\bold{rotA}=\\nabla\\times\\bold A \\]\n同样的，斯托克斯公式可以写成\n\\[ \\iint\\limits_\\Sigma\\bold{rotA}\\cdot\\bold{n}dS=\\oint_\\Gamma\\bold{A}\\cdot\\bm{\\tau}ds \\]\n\\[ \\iint\\limits_\\Sigma(\\bold{rotA})_ndS=\\oint_{\\Gamma}\\bold{A}_{\\tau} ds \\]\n无穷级数 常数项级数的概念和性质 常数项级数的概念 如果级数\\(\\sum^{\\infty}_{i=1}u_i\\)的部分和数列\\(\\{s_n\\}\\)有极限s，即\n\\[ \\lim\\limits_{n\\to\\infty}s_n=s \\]\n那么称无穷级数\\(\\sum^{\\infty}_{i=1}u_i\\)收敛，这时极限\\(s\\)叫做这级数的和，并写成\n\\[ s=u_1+u_2+\\dots+u_n+\\cdots \\]\n如果\\(\\{s_n\\}\\)没有极限，那么称无穷级数\\(\\sum^{\\infty}_{i=1}u_i\\)发散\n收敛级数的基本性质 性质1 如果级数\\(\\sum^{\\infty}_{n=1}u_n\\)收敛于和\\(s\\)，那么级数\\(\\sum^{\\infty}_{i=1}ku_i\\)也收敛，且其和为\\(ks\\).\n性质2 如果级数\\(\\sum^{\\infty}_{n=1}u_n\\)与\\(\\sum^{\\infty}_{n=1}v_n\\)分别收敛于\\(s,\\sigma\\)，那么级数\\(\\sum^{\\infty}_{n=1}(u_n\\pm v_n)\\)也收敛，且其和为\\(s\\pm\\sigma\\)\n性质3 在级数中去掉、加上或改变有限项，不会改变级数的收敛性\n性质4 如果级数\\(\\sum^{\\infty}_{n=1}u_n\\)收敛，那么对于这级数的项任意加括号后所成的级数仍收敛，且其和不变\n性质5（级数收敛的必要条件） 如果级数\\(\\sum^{\\infty}_{n=1}u_n\\)收敛，那么它的一般项\\(u_n\\)趋于0，即\n\\[ \\lim\\limits_{n\\to\\infty}u_n=0 \\]\n常数项级数的审敛法 正项级数及其审敛法 定理1 正项级数\\(\\sum^{\\infty}_{n=1}u_n\\)收敛的充分必要条件是：它的部分和数列\\(\\{s_n\\}\\)有界\n定理2（比较审敛法） 设\\(\\sum^{\\infty}_{n=1}u_n\\)和\\(\\sum^{\\infty}_{n=1}v_n\\)都是正项级数，且\\(u_n\\leq v_n\\).若级数\\(\\sum^{\\infty}_{n=1}v_n\\)收敛，则级数\\(\\sum^{\\infty}_{n=1}u_n\\)收敛，若级数\\(\\sum^{\\infty}_{n=1}u_n\\)发散，则级数\\(\\sum^{\\infty}_{n=1}v_n\\)发散.\n推论 设\\(\\sum^{\\infty}_{n=1}u_n\\)和\\(\\sum^{\\infty}_{n=1}v_n\\)都是正项级数，如果级数\\(\\sum^{\\infty}_{n=1}v_n\\)收敛，且存在正整数\\(N\\)使当\\(n\\ge N\\)时有\\(u_n\\leq kv_n(k\u0026gt;0)\\)成立，那么级数\\(\\sum^{\\infty}_{n=1}u_n\\)收敛；如果级数\\(\\sum^{\\infty}_{n=1}v_n\\)发散，且存在正整数\\(N\\)使当\\(n\\ge N\\)时有\\(u_n\\ge kv_n(k\u0026gt;0)\\)成立，那么级数\\(\\sum^{\\infty}_{n=1}u_n\\)发散.\n定理3（比较审敛法的极限形式） 设\\(\\sum^{\\infty}_{n=1}u_n\\)和\\(\\sum^{\\infty}_{n=1}v_n\\)都是正项级数，\n如果\\(\\lim\\limits_{n\\to\\infty}\\frac{u_n}{v_n}=l(0\\leq l\u0026lt;+\\infty)\\)，且级数\\(\\sum^{\\infty}_{n=1}v_n\\)收敛，那么级数\\(\\sum^{\\infty}_{n=1}u_n\\)收敛； 如果\\(\\lim\\limits_{n\\to\\infty}\\frac{u_n}{v_n}=l\u0026gt;0\\)或\\(\\lim\\limits_{n\\to\\infty}\\frac{u_n}{v_n}=+\\infty\\)，且级数\\(\\sum^{\\infty}_{n=1}v_n\\)发散，那么级数\\(\\sum^{\\infty}_{n=1}u_n\\)发散； 定理4（比值审敛法，达朗贝尔判别法） 设\\(\\sum^{\\infty}_{n=1}u_n\\)是正项级数，如果\n\\[ \\lim\\limits_{n\\to\\infty}\\frac{u_{n+1}}{u_n}=\\rho \\]\n那么当\\(\\rho\u0026lt;1\\)时级数收敛，\\(\\rho\u0026gt;1\\)(或\\(\\lim\\limits_{n\\to\\infty}\\frac{u_{n+1}}{u_n}=\\infty\\))时级数发散，\\(\\rho=1\\)时级数可能收敛也可能发散。\n定理5（根值审敛法，柯西判别法） 设\\(\\sum^{\\infty}_{n=1}u_n\\)是正项级数，如果\n\\[ \\lim\\limits_{n\\to\\infty}\\sqrt[n]{u_n}=\\rho \\]\n那么当\\(\\rho\u0026lt;1\\)时级数收敛，\\(\\rho\u0026gt;1\\)(或\\(\\lim\\limits_{n\\to\\infty}\\sqrt[n]{u_n}=+\\infty\\))时级数发散，\\(\\rho=1\\)时级数可能收敛也可能发散。\n定理6（极限审敛法） \\(\\sum^{\\infty}_{n=1}u_n\\)是正项级数，\n如果\\(\\lim\\limits_{n\\to\\infty}nu_n=l\u0026gt;0\\)(或\\(\\lim\\limits_{n\\to\\infty}nu_n=+\\infty\\))，那么该级数发散； 如果\\(p\u0026gt;1\\)，而\\(\\lim\\limits_{n\\to\\infty}n^pu_n=l\u0026gt;0(0\\leq l\u0026lt;+\\infty)\\)，那么该级数收敛. 交错级数及其审敛法 定理7（莱布尼茨定理） 如果交错级数\\(\\sum^{\\infty}_{n=1}(-1)^{n-1}u_n\\)满足条件： 1. \\(u_n\\ge u_{n+1}\\) 2. \\(\\lim\\limits_{n\\to\\infty}u_n=0\\)\n那么级数收敛，且其和\\(s\\leq u_1\\)，其余项\\(r_n\\)的绝对值小于等于\\(u_{n+1}\\)\n绝对收敛与条件收敛 对于级数\\(\\sum^{\\infty}_{n=1}u_n\\)，若\\(\\sum^{\\infty}_{n=1}|u_n|\\)收敛，那么称\\(\\sum^{\\infty}_{n=1}u_n\\)绝对收敛；如果\\(\\sum^{\\infty}_{n=1}u_n\\)收敛，而\\(\\sum^{\\infty}_{n=1}|u_n|\\)发散，则成\\(\\sum^{\\infty}_{n=1}u_n\\)条件收敛。\n定理8 如果级数\\(\\sum^{\\infty}_{n=1}u_n\\)绝对收敛，那么\\(\\sum^{\\infty}_{n=1}u_n\\)必定收敛。\n绝对收敛级数的性质 定理9 绝对收敛级数经改变项的位置后构成的级数也收敛，且与原级数有相同的和.\n定理10 （绝对收敛级数的乘法） 设\\(\\sum^{\\infty}_{n=1}u_n\\)和\\(\\sum^{\\infty}_{n=1}v_n\\)都是绝对收敛，其和分别为\\(s,\\sigma\\)，则它们的柯西乘积\n\\[ u_1v_1+(u_1v_2+u_2v_1)+\\dots+(u_1v_n+u_2v_{n-1}+\\dots+u_nv_1)+\\cdots \\]\n也是绝对收敛的，且其和为\\(s\\sigma\\)\n幂级数 收敛域：开区间；收敛区间：要判断边界点\n定理1（阿贝尔定理) 如果级数\\(\\sum^{\\infty}_{n=0}a_nx^n\\)当\\(x=x_0\\neq0\\)时收敛，那么适合不等式\\(|x|\u0026lt;|x_0|\\)的一切\\(x\\)使这幂级数绝对收敛，反之，如果级数\\(\\sum^{\\infty}_{n=0}a_nx^n\\)当\\(x=x_0\\neq0\\)当\\(x=x_0\\)时发散，那么适合不等式\\(|x|\u0026gt;|x_0|\\)的一切\\(x\\)使这幂级数发散.\n推论 如果幂级数\\(\\sum^{\\infty}_{n=0}a_nx^n\\)不仅在\\(x=0\\)一点收敛，也不是在整个数轴上都收敛，那么必有一个确定的正数\\(R\\)存在，使得\n当\\(|x|\u0026lt;R\\)时，幂级数绝对收敛\n当\\(|x|\u0026gt;R\\)时，幂级数发散\n当\\(|x|=R\\)时，幂级数可能收敛也可能发散，如果收敛可能是绝对或条件收敛。\n正数\\(R\\)通常叫做收敛半径。\n定理2 如果 \\[ \\lim\\limits_{n\\to\\infty}\\left|\\frac{a_{n+1}}{a_n}\\right|=\\rho \\]\n其中\\(a_n,a_{n+1}\\)是幂级数\\(\\sum^{\\infty}_{n=0}a_nx^n\\)的相邻两项的系数，那么这幂级数的收敛半径\n\\[ R=\\left\\{\\begin{matrix} \\frac{1}{\\rho}, \\rho\\ne0\\\\ +\\infty, \\rho=0 \\\\ 0, \\rho=+\\infty \\end{matrix}\\right. \\]\n注意如果级数的项中为\\(x^{2n}\\)等不能化为\\(x^n\\)的，不能用这个定理，只能用比值审敛法等通用手段。\n幂级数的运算 设\\(\\sum^{\\infty}_{n=0}a_nx^n\\)和\\(\\sum^{\\infty}_{n=0}b_nx^n\\)分别在区间\\((-R,R),(-R\u0026#39;,R\u0026#39;)\\)内收敛，则对于这两个幂级数，\n\\(\\sum^{\\infty}_{n=0}a_nx^n\\pm\\sum^{\\infty}_{n=0}b_nx^n=\\sum^{\\infty}_{n=0}(a_n\\pm b_n)x^n\\)在\\((-R,R),(-R\u0026#39;,R\u0026#39;)\\)中较小的区间内成立. \\(\\sum^{\\infty}_{n=0}a_nx^n\\sum^{\\infty}_{n=0}b_nx^n=a_0b_0+(a_0b_1+a_1b_0)x+\\dots+(a_0b_n+a_1b_{n-1}+\\dots+a_nb_0)x^n+\\cdots\\)\\((-R,R),(-R\u0026#39;,R\u0026#39;)\\)中较小的区间内成立. \\(\\frac{\\sum^{\\infty}_{n=0}a_nx^n}{\\sum^{\\infty}_{n=0}b_nx^n}=\\sum^{\\infty}_{n=0}c_nx^n\\)，假设\\(b_0\\ne0\\)，\\(c\\)可以由下式求出 \\[ a_0=b_0c_0\\\\ a_1=b_1c_0+b_0c_1\\\\ a_2=b_2c_0+b_1c_1+b_0c_2\\\\ \\cdots \\] 幂级数\\(\\sum^{\\infty}_{n=0}c_nx^n\\)的收敛区间可能比原来两级数的收敛区间小得多。 幂级数的和函数的性质\n性质1 幂级数\\(\\sum^{\\infty}_{n=0}a_nx^n\\)的和函数\\(s(x)\\)在其收敛域\\(I\\)上连续\n性质2 幂级数\\(\\sum^{\\infty}_{n=0}a_nx^n\\)的和函数\\(s(x)\\)在其收敛域\\(I\\)上可积，并有逐项积分公式\n\\[ \\int_0^xs(x)dt=\\int_0^x[\\sum^{\\infty}_{n=0}a_nt^n]dt=\\sum^{\\infty}_{n=0}\\int_0^xa_nt^ndt=\\sum^{\\infty}_{n=0}\\frac{a_n}{n+1}x^{n+1}(x\\in I), \\]\n逐项积分后所得到的幂级数和原级数有相同的收敛半径。\n性质3 幂级数\\(\\sum^{\\infty}_{n=0}a_nx^n\\)的和函数\\(s(x)\\)在其收敛域\\(I\\)上可导，且有逐项求导公式\n\\[ s\u0026#39;(x)=(\\sum^{\\infty}_{n=0}a_nx^n)\u0026#39;=\\sum^{\\infty}_{n=0}(a_nx^n)\u0026#39;=\\sum^{\\infty}_{n=1}na_nx^{n-1} \\]\n逐项求导后所得到的幂级数和原级数有相同的收敛半径.\n反复应用上述结论可得：\\(s(x)\\)在其收敛区间\\((-R,R)\\)内具有任意阶导数。\n函数展开成幂级数 泰勒级数和麦克劳林级数不再重复，见上册整理。\n\\(f(x)\\)能在某个邻域展开成泰勒级数的充要条件是\n\\[ \\lim\\limits_{n\\to\\infty}R_n(x)=0, x\\in U(x_0) \\]\n除了直接展开外，通常也会有间接展开的办法。即通过四则运算、求导、积分、变量替换等等运算转化为一些常见的函数，再代入这些常见函数的展开式。\n下面给出一些常见函数的展开式\n\\[ \\frac{1}{1-x}=\\sum_{n=0}^{\\infty}x^n,x\\in(-1,1) \\]\n\\[ \\frac{1}{1+x}=\\sum_{n=0}^{\\infty}(-1)^nx^n,x\\in(-1,1) \\]\n\\[ e^x=\\sum_{n=0}^{\\infty}\\frac{x^n}{n!},x\\in(-\\infty,\\infty) \\]\n\\[ sinx=\\sum_{n=0}^{\\infty}\\frac{(-1)^n}{(2n+1)!}x^{2n+1},x\\in(-\\infty,\\infty) \\]\n\\[ cosx=\\sum_{n=0}^{\\infty}\\frac{(-1)^n}{(2n)!}x^{2n},x\\in(-\\infty,\\infty) \\]\n\\[ ln(1+x)=\\sum_{n=0}^{\\infty}\\frac{(-1)^n}{n+1}x^{n+1}= \\sum_{n=1}^{\\infty}\\frac{(-1)^{n-1}}{n}x^{n},x\\in(-1,1] \\]\n\\[ (1+x)^m=1+mx+\\frac{m(m-1)}{2!}x^2+\\cdots+\\frac{m(m-1)\\cdots(m-n+1)}{n!}x^n+\\cdots \\]\n傅里叶级数 一个定义在\\((-\\infty,\\infty)\\)上周期为\\(2\\pi\\)的函数\\(f(x)\\)，如果它在一个周期上可积，那么一定可以做出\\(f(x)\\)的傅里叶级数\n\\[ f(x) = \\frac{a_0}{2}+\\sum_{n=1}^{\\infty}(a_ncosnx+b_nsinnx) \\]\n其中\n\\[ a_n=\\frac{1}{\\pi}\\int^\\pi_{-\\pi}f(x)\\cos nxdx,(n=0,1,2,3,\\cdots) \\]\n\\[ b_n=\\frac{1}{\\pi}\\int^\\pi_{-\\pi}f(x)\\sin nxdx,(n=1,2,3,\\cdots) \\]\n定理 设\\(f(x)\\)是周期为\\(2\\pi\\)的周期函数，如果它满足：\n在一个周期内连续或只有有限个第一类间断点 在一个周期内至多只有有限个极值点 那么\\(f(x)\\)的傅立叶级数收敛，并且\n当\\(x\\)是\\(f(x)\\)的连续点时，级数收敛于\\(f(x)\\);\n当\\(x\\)是\\(f(x)\\)的间断点时，级数收敛于\\(\\frac{1}{2}[f(x^-)+f(x^+)]\\)\n如果函数只在\\([-\\pi,\\pi]\\)上有定义，可以使用周期延拓来展开成傅里叶级数。\n正弦级数和余弦级数 当\\(f(x)\\)为奇函数时，可以展开为正弦级数 \\[ \\sum_{n=1}^\\infty b_n\\sin nx \\]\n当\\(f(x)\\)为偶函数时，可以展开为余弦函数 \\[ \\frac{a_0}{2}+\\sum_{n=1}^\\infty a_n\\cos nx \\]\n一般周期的傅里叶级数 周期为\\(2l\\)\n\\[ f(x)=\\frac{a_0}{2}+\\sum^\\infty_{n=1}\\left(a_ncos\\frac{n\\pi x}{l}+b_nsin\\frac{n\\pi x}{l}\\right)(x\\in C) \\]\n其中\n\\[ a_n=\\frac{1}{l}\\int_{-l}^lf(x)cos\\frac{n\\pi x}{l}dx\\quad (n=0,1,2,\\cdots) \\]\n\\[ b_n=\\frac{1}{l}\\int_{-l}^lf(x)sin\\frac{n\\pi x}{l}dx\\quad (n=1,2,3,\\cdots) \\]\n\\[ C=\\left\\{x\\left|f(x)=\\frac{1}{2}[f(x^-) +f(x^+)]\\right. \\right\\} \\]\n","date":"2022-05-25T21:43:40+08:00","permalink":"https://kegalas.top/p/%E6%88%91%E7%9A%84%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%E4%B8%8B%E5%86%8C%E8%B5%84%E6%96%99%E6%95%B4%E7%90%86/","title":"我的高等数学下册资料整理"},{"content":"第一部分 第一篇 协和和弦——三和弦 第一章 大调式三和弦 自然大调的七个三和弦中，I、IV、V是大三和弦，II、III、VI是小三和弦，VII是减三和弦。\nI级上的三和弦称之为主和弦，IV上的为下属和弦，V上的称为属和弦。\n按功能分，主和弦组：I、VI；属和弦组：V、III；下属和弦组：IV、II；\n第二章 大调式三和弦的连接 对于初学者来说，根据低音写出另外三个声部的音，应当重复根音。\n除相邻的音级上建立的三和弦，任意两个三和弦至少有一个共同音。\n对于初学者，链接两个三和弦应当将共同音保持，不是共同音的音按照最近的方式排列；\n显然旋律音的位置受到共同音的影响，但是根音可以较为自由的上行或下行，如果一定要在六度跳进或是三度进行中做出选择，那后者应该更好。\n第三章 无共同音的三和弦连接 不允许有两个声部间出现平行五度和平行八度。按照之前的共同音保持法链接，显然不会出现平行五八。但如果两个和弦间没有共同音，则上方声部的音应当和根音做反向进行。并且上方声部的两个和弦之间，音的排列顺序不能相同。\n第四章 打破三和弦连接规则 打破规则的原因：如果坚持规则可能会导致某一声部的音太高。\n要注意的有：\n两个三和弦，上方声部连接时不能保持同样的音的排列顺序，否则必然出现平行五八。\n最上方声部不能跳进超过四度。\n低声部和高声部要反向进行，防止出现隐伏五八度。当两个声部通向进行到五度或八度，则会构成隐伏五八度。（注意高声部内部也不要出现隐伏五度）。\n不允许违背规则的情况：\n属和弦进行到主和弦时，如果属和弦的三音即导音位于最高声部，必须上行到主音。如果导音在内声部，可以下行三度进行。\n主和弦到下属和弦时，主和弦的三音类似导音，处理方式同上。\n第五章 和声模进 模进动机保持相同的声部排列位置。\nVII是减三和弦，使用的时候要特别谨慎，但在和弦模进中，它是允许的，因为可以作为动机重复和模进进行。\n当然减三和弦还可以作为两个和弦的经过和弦。这种连接必须同一声部保留共同音。\n第六章 小调式和声 小调式和声建立在和声小调之上。除七音升高半音外，其他与平行大调音阶上的音相同。\n和声小调上的三和弦：小三和弦：I、IV；大三和弦V、VI；减三和弦：II、VII；增三和弦：III。\n和声小调的和弦连接也应当遵从前面的规则。\n不协和和弦（除小三和大三）要有预备，可以与两个相邻的三和弦作正确连接，或是作为一个动机内的和弦。\n不协和和弦连接具体如下：\nVII级通常连到V级，而不连到II和IV级，因为此时会出现增二度进行，及其不悦耳。\nII级可以与IV、V、VI连接，但要避免隐伏五八、增二度进行；减三和弦与属三和弦连接时，上方三声部与低声部作反向进行就不会出现增二度。\nIII级与I、V、VI连接不会有问题。\n任何时候都要避免使用增二度。因此，导音（属和弦三音）要上行解决到VI级三和弦时，VI级三和弦应当重复三音。当VI进行到V时（比较少见），也应当重复VI的三音。\n第七章 密集排列与开放排列 声部之间的音排列比较密集，成为密集排列。否则称为开放排列。\n将密集排列改写为开放排列时，注意要一个声部整体移动八度，不能出现声部更换，也不能出现声部超越。\n第八章 三和弦的转位 将根音转移到上方其他声部，低声部不是根音的三和弦，被称为和弦的转位。\n第一转位，即最低声部为三音，被称为三六和弦，简称六和弦。\n第二转位，即最低声部为五音，被称为四六和弦。\n原位和弦因为具有纯五度，音响协和程度要高于两个转位和弦。\n和弦通常重复根音或者五音，重复三音不够自然，仅用在一些特殊位置（如可以获得更好的声部进行）。\n我们常常会碰到连续的六和弦级进进行。这种情况最好让两个声部与低音作同向进行，另一声部作反向进行。如果低音上行，首先重复五音；如果低音下行，首先重复根音。\n如果是属六和弦进行到主和弦，那么属六和弦的三音不能重复，因为其是导音。\n第九章 减三和弦与增三和弦的转位 减三和弦的第一转为接近协和和弦，所以用的比原位多。\n减六和弦与其他和弦的连接分为两种情况\n在主和弦之前。减三和弦的根音，即导音，必须上行解决，因为它不能重复。最好重复五音，偶尔可以重复三音。由于导音在任何时候都必须解决到主音，因此减三和弦中的五音位于根音上方时，不能上行，否则必定会出现禁止进行（平行五度）(所以必须让在根音上方的五音下行)。因此，我们必须避免减六和弦中的两个五音都位于根音上方(这样会导致两个五音之后一个上行一个下行)。\n除主和弦外的其他和弦之前。大多数重复根音（就像其他六和弦一样），因为这里根音不作为导音。\n小调中II级上的减六和弦也遵从这些规则。\n第二篇 不协和和弦——七和弦和九和弦 七和弦和九和弦都不是独立的和弦，都需要有准备，并要合理地进行到后面的和弦。不协和和弦进行到协和和弦，被称为“解决”。每一个七和弦都必须要解决到三和弦上。\n第十章 属七和弦 所有七和弦中，最重要，最常用的是V级上的七和弦，即属七和弦。属七和弦解决到主和弦。\n属七和弦的解决方式：七音级进下行解决到主和弦的三音。五音级进上行或下行解决到主和弦的三音或根音，更多解决到根音。三音（即导音）级进上行到主音，根音四度上行或五度下行到主和弦的根音。\n属七和弦的解决会产生缺五音的不完全主和弦。\n停更 ","date":"2021-12-31T22:44:43+08:00","permalink":"https://kegalas.top/p/%E5%AE%9E%E7%94%A8%E5%92%8C%E5%A3%B0%E5%AD%A6%E6%8C%87%E5%8D%97%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/","title":"《实用和声学指南》读书笔记"},{"content":"函数与极限 等价无穷小 当$x\\to 0$时，有\n$$ sinx\\sim x\\qquad tanx\\sim x\\qquad ln(1+x)\\sim x\\qquad e^x-1\\sim x $$\n$$ arcsinx\\sim x\\qquad arctanx\\sim x\\qquad log_a(1+x)\\sim \\frac{x}{lna} $$\n$$ x-ln(1+x)\\sim \\frac{1}{2}x^2\\qquad 1-cosx\\sim\\frac{1}{2}x^2\\qquad ln(x+\\sqrt{1+x^2})\\sim x $$\n$$ x-sinx\\sim \\frac{1}{6}x^3\\qquad tanx-x\\sim \\frac{1}{3}x^3\\qquad (1+x)^a-1\\sim ax $$\n$$ arcsinx-x\\sim \\frac{1}{6}x^3\\qquad x-arctanx\\sim\\frac{1}{3}x^3\\qquad tanx-sinx\\sim\\frac{1}{2}x^3 $$\n两个重要极限 $$ \\lim_{x\\to 0}\\frac{sinx}{x}=1 $$\n$$ \\lim_{x\\to \\infty}(1+\\frac1x)^x=e $$\n间断点的分类 第一类间断点 如果$x_0$是函数的间断点，且左极限$f(x_0^-)$及右极限$f(x_0^+)$都存在。\n若左极限和右极限相等，但不等于该点函数值或函数在该点无定义，则称为可去间断点。\n若左极限右极限不相等，则称为跳跃间断点。\n第二类间断点 不是第一类间断点的任何间断点称之为第二类间断点，包含震荡间断点，无穷间断点等。\n部分函数及其图像 双曲函数 $$ sh\\ x=\\frac{e^x-e^{-x}}{2}\\qquad ch\\ x=\\frac{e^x+e^{-x}}{2}\\qquad th\\ x=\\frac{sh\\ x}{ch\\ x}=\\frac{e^x-e^{-x}}{e^x+e^{-x}} $$\n函数图像如下\n其常用公式如下：\n$$ sh(x+y)=sh\\ xch\\ x+ch\\ xsh\\ y $$\n$$ sh(x-y)=sh\\ xch\\ x-ch\\ xsh\\ y $$\n$$ ch(x+y)=ch\\ xch\\ x+sh\\ xsh\\ y $$\n$$ ch(x-y)=ch\\ xch\\ x-sh\\ xsh\\ y $$\n$$ ch^2x-sh^2x=1\\qquad sh\\ 2x=2sh\\ xch\\ x\\qquad ch\\ 2x=ch^2x+sh^2x $$\n反双曲函数如下\n$$ arsh\\ x=ln(x+\\sqrt{x^2+1}) $$\n$$ arch\\ x=ln(x+\\sqrt{x^2-1}) $$\n$$ arth\\ x=\\frac{1}{2}ln\\frac{1+x}{1-x} $$\n部分三角函数和反三角函数 $cot\\ x,sec\\ x,csc\\ x$的函数图像如下\n反三角函数图像如下\n三角函数公式 和差化积 ​ $$sin\\alpha+sin\\beta=2sin\\frac{\\alpha+\\beta}{2}\\cdot cos\\frac{\\alpha-\\beta}{2}$$ ​ $$sin\\alpha-sin\\beta=2cos\\frac{\\alpha+\\beta}{2}\\cdot sin\\frac{\\alpha-\\beta}{2}$$ ​ $$cos\\alpha+cos\\beta=2cos\\frac{\\alpha+\\beta}{2}\\cdot cos\\frac{\\alpha-\\beta}{2}$$ ​ $$cos\\alpha-cos\\beta=-2sin\\frac{\\alpha+\\beta}{2}\\cdot sin\\frac{\\alpha-\\beta}{2}$$\n积化和差 ​ $$sin\\alpha cos\\beta=\\frac{1}{2}\\left[sin(\\alpha+\\beta)+sin(\\alpha-\\beta)\\right]$$ ​ $$cos\\alpha sin\\beta=\\frac{1}{2}\\left[sin(\\alpha+\\beta)-sin(\\alpha-\\beta)\\right]$$ ​ $$cos\\alpha cos\\beta=\\frac{1}{2}\\left[cos(\\alpha+\\beta)+cos(\\alpha-\\beta)\\right]$$ ​ $$sin\\alpha sin\\beta=-\\frac{1}{2}\\left[cos(\\alpha+\\beta)-cos(\\alpha-\\beta)\\right]$$\n半角公式 ​ $$sin\\frac{\\theta}{2}=\\pm \\sqrt{\\frac{1-cos\\alpha}{2}}$$ ​ $$sin\\frac{\\theta}{2}=\\pm \\sqrt{\\frac{1+cos\\alpha}{2}}$$ ​ $$tan\\frac{\\theta}{2}=\\pm \\sqrt{\\frac{1-cos\\alpha}{1+cos\\alpha}}=\\frac{sin\\alpha}{1+cos\\alpha}=\\frac{1-cos\\alpha}{sin\\alpha}$$\n辅助角公式 ​ $$asin\\theta\\pm bcos\\theta=\\sqrt{a^2+b^2}sin(\\theta\\pm\\varphi),\\quad tan\\varphi=\\frac{b}{a}$$\n$sin\\ x$和$cos\\ x$的$tan\\ \\frac x2$有理式表示 $$ sin\\ x=\\frac{2tan\\frac x2}{1+tan^2\\frac x2} $$\n$$ cos\\ x=\\frac{1-tan^2\\frac x2}{1+tan^2\\frac x2} $$\n导数与微分 反函数求导 如果函数$x=f(y)$在区间$I_y$内单调、可导且$f\u0026rsquo;(y)\\ne 0$，那么它的反函数$y=f^{-1}(x)$在区间$ I_x = \\{ x | x = f(y) , y\\in I_y \\} $内也可导，且\n$$ [f^{-1}(x)]\u0026rsquo;=\\frac{1}{f\u0026rsquo;(y)}\\quad or \\quad \\frac{dy}{dx}=\\frac{1}{\\frac {dx}{dy}} $$\n部分常用导数 $$ (tan\\ x)\u0026rsquo;=sec^2x\\qquad (cot\\ x)\u0026rsquo;=-csc^2x $$\n$$ (sec\\ x)\u0026rsquo;=sec\\ xtan\\ x\\qquad (csc\\ x)\u0026rsquo;=-csc\\ xcot\\ x $$\n$$ (a^x)\u0026rsquo;=a^xlna(a\u0026gt;0,a\\ne 1)\\qquad (log_ax)\u0026rsquo;=\\frac{1}{xlna} $$\n$$ (arcsin\\ x)\u0026rsquo;=\\frac{1}{\\sqrt{1-x^2}}\\qquad (arccosx)\u0026rsquo;=-\\frac{1} {\\sqrt{1-x^2}} $$\n$$ (arctan\\ x)\u0026rsquo;=\\frac{1}{1+x^2}\\qquad (arccotx)\u0026rsquo;=-\\frac{1}{1+x^2} $$\n$$ (sh\\ x)\u0026rsquo;=ch\\ x,\\ (ch\\ x)\u0026rsquo;=sh\\ x,\\ (th\\ x)\u0026rsquo;=\\frac{1}{ch^2x} $$\n$$ (arsh\\ x)\u0026rsquo;=\\frac{1}{\\sqrt{x^2+1}},\\ (arch\\ x)\u0026rsquo;=\\frac{1}{\\sqrt{x^2-1}}, \\ (arth\\ x)\u0026rsquo;=\\frac{1}{1-x^2} $$\n参数方程求导 对如下参数方程\n$$ x = \\varphi (t),\\ y = \\psi (t) $$\n求导得\n$$ \\frac{dy}{dx}=\\frac{dy}{dt}\\cdot \\frac{1}{\\frac{dx}{dt}}= \\frac{\\psi\u0026rsquo;(t)}{\\varphi\u0026rsquo;(t)} $$\n中值定理 罗尔定理 如果函数$f(x)$满足\n（1）在闭区间$[a,b]$上连续\n（2）在开区间$(a,b)$内可导\n（3）在区间端点处的函数值相等，即$f(a)=f(b)$,\n那么在$(a,b)$内至少有一点$\\xi\\ (a\u0026lt;\\xi\u0026lt;b)$，使得$f\u0026rsquo;(\\xi)=0.$\n拉格朗日中值定理 如果函数$f(x)$满足\n（1）在闭区间$[a,b]$上连续；\n（2）在开区间$(a,b)$内可导，\n那么在$(a,b)$内至少有一点$\\xi (a\u0026lt;\\xi\u0026lt;b)$，使等式\n$$ f(b)-f(a)=f\u0026rsquo;(\\xi)(b-a) $$\n成立\n柯西中值定理 如果函数$f(x)$及$F(x)$满足\n（1）在闭区间$[a,b]$上连续\n（2）在开区间$(a,b)$内可导\n（3）对任一$x\\in(a,b),F\u0026rsquo;(x)\\ne0$\n那么在$(a,b)$内至少有一点$\\xi$，使等式\n$$ \\frac{f(b)-f(a)}{F(b)-F(a)}=\\frac{f\u0026rsquo;(x)}{F\u0026rsquo;(x)} $$\n成立\n泰勒公式 在$x_0$处展开如下\n$$ f(x)=f(x_0)+f\u0026rsquo;(x_0)(x-x_0)+\\frac{f\u0026rsquo;\u0026rsquo;(x_0)}{2!}(x-x_0)^2+\\dots+ \\frac{f^{(n)}(x_0)}{n!}(x-x_0)^n+R_n(x) $$\n皮亚诺余项 $$ R_n(x)=o((x-x_0)^n) $$\n拉格朗日余项 $$ R_n(x)=\\frac{f^{(n+1)}(\\xi)}{(n+1)!}(x-x_0)^{(n+1)} $$\n这里$\\xi$是$x_0$与$x$之间的某个值\n曲率 弧微分公式 $$ ds=\\sqrt{1+y\u0026rsquo;^2}dx $$\n曲率表达式 对于$y=f(x)$，曲率$K$为\n$$ K=\\frac{|y\u0026rsquo;\u0026rsquo;|}{(1+y\u0026rsquo;^2)^{3/2}} $$\n对于$x = \\varphi (t),y = \\psi (t)$，有\n$$ K=\\frac{|\\varphi\u0026rsquo;(t)\\psi\u0026rsquo;\u0026rsquo;(t)-\\varphi\u0026rsquo;\u0026rsquo;(t)\\psi\u0026rsquo;(t)|}{[\\varphi\u0026rsquo;^2(t)+ \\psi\u0026rsquo;^2(t)]^{3/2}} $$\n曲率圆与曲率半径 曲率半径与曲率的关系\n$$ \\rho = \\frac{1}{K},\\ K=\\frac{1}{\\rho} $$\n曲率中心$D(\\alpha,\\beta)$\n$$ \\alpha = x-\\frac{y\u0026rsquo;(1+y\u0026rsquo;^2)}{y\u0026rsquo;\u0026rsquo;},\\quad \\beta = y+\\frac{1+y\u0026rsquo;^2}{y\u0026rsquo;\u0026rsquo;} $$\n不定积分 常用积分表 $$ \\int\\frac{dx}{1+x^2}=arctan\\ x+C,\\quad \\int\\frac{dx}{\\sqrt{1-x^2}} =arcsin\\ x+C $$\n$$ \\int\\frac{dx}{cos^2x}=\\int{sec^2x}dx=tan\\ x+C,\\quad\\int\\frac{dx}{sin^2x}= \\int csc^2xdx=-cot\\ x+C $$\n$$ \\int sec\\ xtan\\ xdx=sec\\ x+C,\\quad \\int csc\\ xcot\\ xdx=-csc\\ x+C $$\n$$ \\int sh\\ xdx=ch\\ x+C,\\quad \\int ch\\ xdx=sh\\ x+C $$\n$$ \\int tan\\ xdx=-ln|cos\\ x|+C,\\quad \\int cot\\ xdx=ln|sin\\ x|+C $$\n$$ \\int sec\\ xdx=ln|sec\\ x+tan\\ x|+C,\\quad \\int csc\\ xdx=ln|csc\\ x-cot\\ x|+C $$\n$$ \\int \\frac{dx}{a^2+x^2}=\\frac{1}{a}arctan\\frac{x}{a}+C,\\quad \\int \\frac{dx}{x^2-a^2}=\\frac{1}{2a}ln\\left |\\frac{x-a}{x+a}\\right |+C $$\n$$ \\int \\frac{dx}{\\sqrt{a^2-x^2}}=arcsin\\frac xa+C,\\quad \\int \\frac{dx}{\\sqrt{x^2+a^2}}=ln(x+\\sqrt{x^2+a^2})+C $$\n$$ \\int \\frac{dx}{\\sqrt{x^2-a^2}}=ln|x+\\sqrt{x^2-a^2}|+C $$\n换元积分法 第一类换元法 设$f(u)$具有原函数，$u=\\varphi(x)$可导，则有换元公式\n$$ \\int f[\\varphi(x)]\\varphi\u0026rsquo;(x)dx=\\left[\\int f(u)du \\right]_{u=\\varphi(x)} $$\n设要求$\\int g(x)dx$，如果$g(x)$可以化为$g(x)=f[\\varphi(x)]\\varphi\u0026rsquo;(x)$的形式，那么\n$$ \\int g(x)dx= \\int f[\\varphi(x)]\\varphi\u0026rsquo;(x)dx=\\left[\\int f(u)du \\right]_{u=\\varphi(x)} $$\n第二类换元法 设$x=\\psi(t)$是单调的可导函数，并且$\\psi\u0026rsquo;(t)\\ne 0$.又设$f[\\psi(x)]\\psi\u0026rsquo;(x)dx$具有原函数 ，则有换元公式\n$$ \\int f(x)dx= \\left[\\int f[\\psi(t)]\\psi\u0026rsquo;(t)dt\\right]_{t=\\psi^{-1}(x)} $$\n分部积分法 设函数$u=u(x)$及$v=v(x)$具有连续导数，则有\n$$ \\int uv\u0026rsquo;dx=uv-\\int u\u0026rsquo;vdx $$\n定积分 积分上限的函数的导数 若\n$$ \\Phi(x)=\\int_{a}^{x}f(t)dt $$\n则\n$$ \\Phi\u0026rsquo;(x)=f(x) $$\n若\n$$ \\Phi(x)=\\int_{a}^{g(x)}f(t)dt $$\n则\n$$ \\Phi\u0026rsquo;(x)=f(g(x))g\u0026rsquo;(x) $$\n定积分在几何学上的应用 平面图形的面积 直角坐标 例如，以$x$为积分变量，求$f(x)$及直线$x=a$, $x=b$与$x$轴围成的曲边梯形的面积\n$$ A=\\int_a^bf(x)dx $$\n以y为积分变量，则求的是两直线、函数、与$y$轴围成的曲边梯形的面积\n极坐标 $$ dA=\\frac12(\\rho(\\theta))^2d\\theta $$\n$$ A=\\int_\\alpha^\\beta\\frac12[\\rho(\\theta)]^2d\\theta $$\n体积 旋转体的体积 $$ V=\\int_a^b\\pi[f(x)]^2dx $$\n平行截面面积为已知的立体的体积 $$ V=\\int_a^bA(x)dx $$\n平面曲线的弧长 参数方程 $x=\\varphi(t),\\quad y=\\psi(t).\\quad(\\alpha\\leq t\\leq\\beta)$\n$$ s=\\int_\\alpha^\\beta\\sqrt{\\varphi\u0026rsquo;^2(t)+\\psi\u0026rsquo;^2(t)}dt $$\n直角坐标 $$ s=\\int_a^b\\sqrt{1+y\u0026rsquo;^2}dx $$\n极坐标 $$ s=\\int_\\alpha^\\beta\\sqrt{\\rho^2(\\theta)+\\rho\u0026rsquo;^2(\\theta)}d\\theta $$\n微分方程 齐次方程 如果一阶微分方程可化成\n$$ \\frac{dy}{dx}=\\varphi\\left(\\frac yx\\right) $$\n的形式，那么就称这方程为齐次方程。在齐次方程中，引入新的未知函数$u=\\frac{y}{x}$，有\n$$ y=ux,\\ \\frac{dy}{dx}=u+x\\frac{du}{dx} $$\n$$ u+x\\frac{du}{dx}=\\varphi(u) $$\n用分离变量的办法求出关于$u$的积分，最后再以$\\frac yx$代替$u$.\n一阶线性微分方程 方法一 方程\n$$ \\frac{dy}{dx}+P(x)y=Q(x) $$\n的通解为\n$$ y=Ce^{-\\int P(x)dx}+e^{-\\int P(x)dx}\\int Q(x)e^{\\int P(x)dx}dx $$\n方法二 先求对应齐次方程\n$$ \\frac{dy}{dx}+P(x)y=0 $$\n的解，得到\n$$ y=Ce^{-\\int P(x)dx} $$\n将$C$替换为$u$，再对上解求导得$\\frac{dy}{dx}$，将其代入原非齐次方程，解出$u$，则\n$$ y=ue^{-\\int P(x)dx} $$\n可降阶的高阶微分方程 $y\u0026rsquo;\u0026rsquo;=f(x,y\u0026rsquo;)$型的微分方程\n设$y\u0026rsquo;=p$则$y\u0026rsquo;\u0026rsquo;=\\frac{dp}{dx}=p\u0026rsquo;$，代入原方程中求解$p$，再求解$y$\n$y\u0026rsquo;\u0026rsquo;=f(y,y\u0026rsquo;)$型的微分方程\n设$y\u0026rsquo;=p$\n$$ y\u0026rsquo;\u0026rsquo;=\\frac{dp}{dx}=\\frac{dp}{dy}\\cdot\\frac{dy}{dx}=p\\frac{dp}{dy} $$\n代入原方程中求解$p$，再求解$y$\n高阶线性微分方程 定理1 如果函数$y_1(x)$与$y_2(x)$是方程\n$$ y\u0026rsquo;\u0026rsquo;+P(x)y\u0026rsquo;+Q(x)y=0 $$\n的两个特解，那么\n$$ y=C_1y_1(x)+C_2y_2(x) $$\n也是方程的解\n定理2 如果函数$y_1(x)$与$y_2(x)$是方程的两个线性无关的特解，那么\n$$ y=C_1y_1(x)+C_2y_2(x) $$\n就是 方程的通解\n定理3 设$y^*(x)$是方程\n$$ y\u0026rsquo;\u0026rsquo;+P(x)y\u0026rsquo;+Q(x)y=f(x) $$\n的一个特解，$Y(x)$是该方程对应的齐次方程的通解，则\n$$ y=Y(x)+y^*(x) $$\n是该非齐次方程的通解\n定理4 设定理三种的非齐次线性方程的右端$f(x)$是两个函数之和，即\n$$ y\u0026rsquo;\u0026rsquo;+P(x)y\u0026rsquo;+Q(x)y=f_1(x)+f_2(x) $$\n而$y_1^* (x)$与$y_2^*(x)$分别是方程\n$$ y\u0026rsquo;\u0026rsquo;+P(x)y\u0026rsquo;+Q(x)y=f_1(x) $$\n与\n$$ y\u0026rsquo;\u0026rsquo;+P(x)y\u0026rsquo;+Q(x)y=f_2(x) $$\n的特解，则$y_1^*(x)+y_2^ *(x)$就是原方程的特解\n常系数齐次线性微分方程 二阶形式如下 $$ y\u0026rsquo;\u0026rsquo;+py\u0026rsquo;+qy=0 $$\n先求解如下方程\n$$ r^2+pr+q=0 $$\n分为三种情况\n有两个不等实根$r_1,r_2$\n则通解为\n$$ y=C_1e^{r_1x}+C_2e^{r_2x} $$\n有两个相等实根$r_{1,2}$\n则通解为\n$$ y=(C_1+C_2x)e^{r_1x} $$\n有一对共轭复根\n$$ r_1=\\alpha+\\beta i,\\quad r_2=\\alpha-\\beta i $$\n$$ \\alpha=-\\frac{p}{2},\\quad \\beta=\\frac{\\sqrt{4q-p^2}}{2} $$\n则通解为\n$$ y=e^{\\alpha x}(C_1cos\\ \\beta x+C_2sin\\ \\beta x) $$\nn阶形式如下 $$ y^{(n)}+p_1y^{(n-1)}+p_2y^{(n-2)}+\\dots+p_{n-1}y\u0026rsquo;+p_ny=0 $$\n其中$p_1\\dots p_n$都是常数。\n其特征方程如下\n$$ r^n+p_1r^{n-1}+\\dots+p_{n-1}r+p_n=0 $$\n分四种情况\n单实根$r$，给出一项：$Ce^{rx}$\n一对单负根$r_{1,2}=\\alpha\\pm\\beta i$，给出两项：$e^{\\alpha x}(C_1cos\\beta x+C_2sin\\beta x)$\nk重实根r，给出$k$项：$e^{rx}(C_1+C_2x+\\dots+C_kx^{k-1})$\n一对k重复根$r_{1,2}=\\alpha\\pm\\beta i$，给出$2k$项：$e^{\\alpha x}[(C_1+C_2x+\\dots+C_kx^{k-1})cos\\beta x+(D_1+D_2x+\\dots+D_kx^{k-1})sin\\beta x]$\n常系数非齐次线性微分方程 二阶常系数非齐次线性微分方程的一般形式是\n$$ y\u0026rsquo;\u0026rsquo;+py\u0026rsquo;+qy=f(x) $$\n求其通解只用求该方程的一个特解和上一节学到的求其对应齐次方程的通解，高数上册只介绍了$f(x)$的两种形式\n$f(x)=e^{\\lambda x}P_m(x)$，其中$\\lambda$是常数，$P_m(x)$是$x$的一个$m$次多项式\n$$ P_m(x)=a_0x^m+a_1x^{m-1}+\\dots+a_{m-1}x+a_{m} $$\n$f(x)=e^{\\lambda x}[P_l(x)cos\\omega x+Q_n(x)sin\\omega x]$，其中$\\lambda,\\omega$是常数，$\\omega\\ne0$，$P_l(x),Q_n(x)$分别是$x$的$l$次、$n$次多项式，且仅有一个可为零.\n$f(x)=e^{\\lambda x}P_m(x)$型 $$ y^*=x^kR_m(x)e^{\\lambda x} $$\n其中 $R_m(x)$是与$P_m(x)$同次的多项式，而$k$按$\\lambda$不是特征方程(即$r^2+pr+q=0$)的根，是特征方程的单根或是特征方程的重根依次取值为0,1,2.\n其中$R_m(x)$中的每一个系数，应当代入原方程中进行计算。\n$f(x)=e^{\\lambda x}[P_l(x)cos\\omega x+Q_n(x)sin\\omega x]$型 $$ y^*=x^ke^{\\lambda x}[R^{(1)}_m(x)cos\\omega x+R^{(2)}_m(x)sin\\omega x] $$\n其中$R^{(1)}_m(x)$、$R^{(2)}_m(x)$是$m$次多项式，$m=max\\{l,n\\}$，而$k$按$\\lambda+\\omega i$(或$\\lambda-\\omega i$)不是特征方程的根、或是特征方程的单根依次取0或1\n","date":"2021-12-27T16:45:49+08:00","permalink":"https://kegalas.top/p/%E6%88%91%E7%9A%84%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%E4%B8%8A%E5%86%8C%E8%B5%84%E6%96%99%E6%95%B4%E7%90%86/","title":"我的高等数学上册资料整理"},{"content":"排序 只给出归并排序，有可能在求逆序对的时候用得上。其他时候排序用sort函数即可。\n归并排序 #include \u0026lt;stdio.h\u0026gt; void merge(long *num,long *tmp, int left, int mid_index ,int right){ int first=left, second = mid_index+1, tmp_index = left; while(first\u0026lt;mid_index+1\u0026amp;\u0026amp;second\u0026lt;right+1){ if(*(num+first)\u0026lt;*(num+second)){ tmp[tmp_index] = *(num+first); tmp_index++; first++; } else{ tmp[tmp_index] = *(num+second); tmp_index++; second++; } } while(first\u0026lt;mid_index+1){ tmp[tmp_index++] = *(num+first); first++; } while(second\u0026lt;right+1){ tmp[tmp_index++] = *(num+second); second++; } int i; for(i=left;i\u0026lt;=right;i++){ num[i]=tmp[i]; } return; } void merge_sort(long *num,long *tmp, int left, int right){ int mid_index; if(left\u0026lt;right){ mid_index = left + (right-left)/2;//这样写疑似可以避免int溢出 merge_sort(num,tmp,left,mid_index); merge_sort(num,tmp,mid_index+1,right); merge(num,tmp,left,mid_index,right); } return; } int main(){ int num_count; long num[20000]; long tmp[20000]; scanf(\u0026#34;%d\u0026#34;,\u0026amp;num_count); int i; for(i=1;i\u0026lt;=num_count;i++){ scanf(\u0026#34;%d\u0026#34;,\u0026amp;num[i]); } merge_sort(num,tmp,1,num_count); for(i=1;i\u0026lt;=num_count;i++){ printf(\u0026#34;%d \u0026#34;,num[i]); } return 0; } 技巧 快速幂 #include \u0026lt;iostream\u0026gt; using namespace std; long long binpow(long long n, long long p){ long long res = 1; while(p\u0026gt;0){ if(p\u0026amp;1){ res = res * n; } n *= n; p\u0026gt;\u0026gt;=1; } return res; } int main(){ long long n,p; cin\u0026gt;\u0026gt;n\u0026gt;\u0026gt;p; cout\u0026lt;\u0026lt;binpow(n,p)\u0026lt;\u0026lt;endl; return 0; } 离散化 //离散化 例如将1,500,40,1000保持相对大小不变，离散化为1,3,2,4 #include \u0026lt;iostream\u0026gt; #include \u0026lt;vector\u0026gt; #include \u0026lt;algorithm\u0026gt; using namespace std; vector\u0026lt;int\u0026gt; arr,assi; int main(){ int n; cin\u0026gt;\u0026gt;n; for(int i=1;i\u0026lt;=n;i++){ int a; cin\u0026gt;\u0026gt;a; arr.push_back(a); assi.push_back(a); } sort(assi.begin(),assi.end()); unique(assi.begin(),assi.end()); for(int i=0;i\u0026lt;n;i++){ arr[i] = upper_bound(assi.begin(),assi.end(),arr[i])-assi.begin(); } for(int i=0;i\u0026lt;n;i++){ cout\u0026lt;\u0026lt;arr[i]\u0026lt;\u0026lt;\u0026#34; \u0026#34;; } cout\u0026lt;\u0026lt;endl; return 0; } 字符串 KMP //kmp,luogu3375 #include \u0026lt;iostream\u0026gt; #include \u0026lt;cstdio\u0026gt; #include \u0026lt;string\u0026gt; using namespace std; #define MAXN 1000005 int nxt[MAXN]; string s1,s2; int getNext(){ nxt[0]=0; int r = 1; int l = 0; while (r\u0026lt;s2.length()){ if (s2[l] == s2[r]){ nxt[r]=l+1; r++; l++; } else if (l){ l = nxt[l-1]; } else{ nxt[r]=0; r++; } } return 0; } int main(){ cin\u0026gt;\u0026gt;s1\u0026gt;\u0026gt;s2; //给定两个字符串 getNext(); int pos=0,tar=0; while (tar\u0026lt;s1.length()) { if(s1[tar]==s2[pos]){ pos++; tar++; } else if (pos){ pos = nxt[pos-1]; } else{ tar++; } if (pos==s2.length()){ cout\u0026lt;\u0026lt;tar-pos+1\u0026lt;\u0026lt;endl; //输出s2在s1中出现的位置 pos = nxt[pos-1]; } } for(int i=0;i\u0026lt;s2.length();i++){ cout\u0026lt;\u0026lt;nxt[i]\u0026lt;\u0026lt;\u0026#34; \u0026#34;; //表示s2​的长度为i的前缀的最长border长度。 } cout\u0026lt;\u0026lt;endl; return 0; } 字典树(Trie) #include \u0026lt;iostream\u0026gt; #include \u0026lt;cstdio\u0026gt; #include \u0026lt;cstring\u0026gt; #define MAXN 500005 using namespace std; int nxt[MAXN][26]; int cnt; void init(){ memset(nxt,0,sizeof(nxt)); cnt = 1; } void insert(string s){ int cur = 1; for(auto c:s){ if(!nxt[cur][c-\u0026#39;a\u0026#39;]){ nxt[cur][c-\u0026#39;a\u0026#39;]=++cnt; } cur = nxt[cur][c-\u0026#39;a\u0026#39;]; } } bool find_prefix(string s){ int cur=1; for(auto c:s){ if (!nxt[cur][c - \u0026#39;a\u0026#39;]) { return false; } cur = nxt[cur][c - \u0026#39;a\u0026#39;]; } return true; } int main(){ int n; cin\u0026gt;\u0026gt;n; for(int i=1;i\u0026lt;=n;i++){ string s1; cin\u0026gt;\u0026gt;s1; insert(s1); } while(1){ string s1; cin\u0026gt;\u0026gt;s1; cout\u0026lt;\u0026lt;find_prefix(s1)\u0026lt;\u0026lt;endl; } return 0; } 数论 扩展欧几里得 //求解ax+by=gcd(a,b)的一组解 //扩展欧几里得 #include \u0026lt;iostream\u0026gt; using namespace std; int exgcd(int a, int b, int \u0026amp;x, int \u0026amp;y){ if(!b){ x = 1; y = 0;//此时ax+by=gcd(a,b)中b=0，任何数与0的最大公约数是他本身，所以ax+0y=a，x=1 y=0 return a; } int d = exgcd(b, a%b, x, y); int t = x; x = y; y = t-(a/b)*y; return d; } int main(){ int a,b,x,y,z; cin\u0026gt;\u0026gt;a\u0026gt;\u0026gt;b; z = exgcd(a,b,x,y); cout\u0026lt;\u0026lt;x\u0026lt;\u0026lt;\u0026#34; \u0026#34;\u0026lt;\u0026lt;y\u0026lt;\u0026lt;\u0026#34; \u0026#34;\u0026lt;\u0026lt;z\u0026lt;\u0026lt;endl; //x,y的意义见开头，z即是最大公约数 return 0; } 欧几里得算法 #include \u0026lt;iostream\u0026gt; using namespace std; int main(){ long long a,b; cin\u0026gt;\u0026gt;a\u0026gt;\u0026gt;b; if(a\u0026lt;b){ a=a+b; b=a-b; a=a-b; } long long ans = b; while((a%b)!=0){ long long tmp = a%b; a = b; b = tmp; ans = b; } cout\u0026lt;\u0026lt;ans\u0026lt;\u0026lt;endl; //返回最大公约数 return 0; } 欧拉筛 //欧拉筛 #include \u0026lt;iostream\u0026gt; #include \u0026lt;cstring\u0026gt; #define MAXN 50005 using namespace std; int main(){ int n, prime[MAXN], cnt=0; bool is_not_prime[MAXN]; cin\u0026gt;\u0026gt;n; //2~n中有多少个素数 memset(is_not_prime, 0, sizeof(prime)); for (int i = 2;i\u0026lt;=n;i++){ if(!is_not_prime[i]) prime[++cnt] = i; for(int j = 1;j\u0026lt;=cnt\u0026amp;\u0026amp;i*prime[j]\u0026lt;=n;j++){ is_not_prime[i*prime[j]] = 1; if(i%prime[j]==0) break; } } for(int i = 1;i\u0026lt;=cnt;i++){ cout\u0026lt;\u0026lt;prime[i]\u0026lt;\u0026lt;\u0026#34; \u0026#34;; //输出素数 } return 0; } Miller-Rabin素数测试 //miller-rabin #include \u0026lt;iostream\u0026gt; #include \u0026lt;ctime\u0026gt; #include \u0026lt;cstdio\u0026gt; using namespace std; const int test_time = 10; int qPowMod(int a, int m, int n){ if(m==0) return 1; if(m==1) return (a%n); long long ans = 1; //不打ll会溢出 while(m){ if(m\u0026amp;1){ ans = ans%n*a%n; } a = (long long)a%n*a%n;//这里不打ll会溢出导致判断错误 m\u0026gt;\u0026gt;=1; } return ans; } bool millerRabin(int n) { if (n \u0026lt; 3 || n % 2 == 0) return n == 2; int a = n - 1, b = 0; while (a % 2 == 0) a /= 2, ++b; // test_time 为测试次数,建议设为不小于 8 // 的整数以保证正确率,但也不宜过大,否则会影响效率 for (int i = 1, j; i \u0026lt;= test_time; ++i) { int x = rand() % (n - 2) + 2, v = qPowMod(x, a, n); if (v == 1) continue; for (j = 0; j \u0026lt; b; ++j) { if (v == n - 1) break; v = (long long)v * v % n; } if (j \u0026gt;= b) return 0; } return 1; } int main(){ srand(time(NULL)); int n; cin\u0026gt;\u0026gt;n; if(millerRabin(n)){ cout\u0026lt;\u0026lt;\u0026#34;Probably a prime\u0026#34;\u0026lt;\u0026lt;endl; } else{ cout\u0026lt;\u0026lt;\u0026#34;A composite\u0026#34;\u0026lt;\u0026lt;endl; } return 0; } 乘法逆元 //乘法逆元 //分为扩展欧几里得法、快速幂法、线性求逆元 //ax≡1(mod b)，x为a在乘法意义上的逆元，记作a^(-1)，或者inv(a) //用扩展欧几里得法的角度看，就是求ax+by=1的整数解 //快速幂法利用费马小定理，需要b为素数 #include \u0026lt;iostream\u0026gt; #include \u0026lt;cstdio\u0026gt; using namespace std; const int MAXN = 3000005; int exgcd(int a, int b, int \u0026amp;x, int \u0026amp;y){ if(!b){ x=1; y=0; return a; } int d = exgcd(b,a%b,x,y); int tmp = x; x = y; y = tmp - a/b*y; return d; } void exgcd_inv(int a, int b){ int x,y; int d = exgcd(a,b,x,y); if(d!=1){//显然a，b要互质才会有逆元 cout\u0026lt;\u0026lt;\u0026#34;None\u0026#34;\u0026lt;\u0026lt;endl; } else{ cout\u0026lt;\u0026lt;(x+b)%b\u0026lt;\u0026lt;endl;//实际上是为了防止出现x为负数的情况 } } int qPowMod(int a, int n, int b){ int ans = 1; while(n){ if(n\u0026amp;1){ ans = ans%b*a%b; } a = a%b*a%b; n\u0026gt;\u0026gt;=1; } return ans; } void fermat_inv(int a, int b){ cout\u0026lt;\u0026lt;qPowMod(a,b-2,b)\u0026lt;\u0026lt;endl; } long long inv[MAXN]; int main(){ long long a,b,n; cin\u0026gt;\u0026gt;a\u0026gt;\u0026gt;b; exgcd_inv(a,b); //fermat_inv(a,b); /* //线性求逆元 inv[1] = 1; for(long long i = 2;i\u0026lt;=n;i++){ //inv[i] = -(b/i)*inv[b%i]; //这样写会出现负数 inv[i] = (long long)(b-b/i)*inv[b%i]%b; } for(long long i=1;i\u0026lt;=n;i++){ printf(\u0026#34;%lld\\n\u0026#34;,inv[i]); } */ return 0; } 线性同余方程 //ax≡c (mod b)求解x //和ax+by=c等价 #include \u0026lt;iostream\u0026gt; using namespace std; int exgcd(int a, int b, int \u0026amp;x, int \u0026amp;y){ if(!b){ x=1; y=0; return a; } int d = exgcd(b, a%b, x, y); int tmp=x; x = y; y = tmp-a/b*y; return d; } int linearEquation(int a, int b, int c, int \u0026amp;x, int \u0026amp;y){ int d = exgcd(a,b,x,y); if(c%d!=0) return -1; x = x*c/d; y = y*c/d; return d; } int main(){ int a,b,c,x,y; cin\u0026gt;\u0026gt;a\u0026gt;\u0026gt;b; c=1; int d = linearEquation(a,b,c,x,y); //d是a,b的最大公约数 if(d==-1){ cout\u0026lt;\u0026lt;\u0026#34;None\u0026#34;\u0026lt;\u0026lt;endl; } else{ //cout\u0026lt;\u0026lt;x\u0026lt;\u0026lt;\u0026#34; \u0026#34;\u0026lt;\u0026lt;y\u0026lt;\u0026lt;endl; //下面输出的是最小整数解 int t = b/d; x = (x%t+t)%t; cout\u0026lt;\u0026lt;x\u0026lt;\u0026lt;endl; } return 0; } 中国剩余定理 求解如下方程中的$x$\n$$ \\left{\\begin{matrix} x \\equiv a_1(mod\\quad r_1) \\ x \\equiv a_2(mod\\quad r_2 \\ \\vdots \\ x \\equiv a_k(mod\\quad r_k) \\end{matrix}\\right. $$\n#include \u0026lt;iostream\u0026gt; using namespace std; typedef long long ll; const int MAXN = 10005; long long a[MAXN],r[MAXN]; long long exgcd(ll a, ll b, ll \u0026amp;x, ll \u0026amp;y){ if(!b){ x=1; y=0; return a; } ll d = exgcd(b,a%b,x,y); ll tmp = x; x = y; y = tmp - (a/b)*y; return d; } int main(){ int k; cin\u0026gt;\u0026gt;k; //共有k个方程 for(int i=1;i\u0026lt;=k;i++){ cin\u0026gt;\u0026gt;a[i]\u0026gt;\u0026gt;r[i]; //x≡ai(mod ri) } ll n=1,ans=0; for(int i=1;i\u0026lt;=k;i++){ n = n * r[i]; } for(int i=1;i\u0026lt;=k;i++){ ll m = n/r[i]; ll x,y; exgcd(m,r[i],x,y); ans = (ans+a[i]*m*x%n)%n; } cout\u0026lt;\u0026lt;ans\u0026lt;\u0026lt;endl; //输出x的值 return 0; } 图论 最短路 Dijkstra #include \u0026lt;iostream\u0026gt; #include \u0026lt;cstring\u0026gt; #include \u0026lt;vector\u0026gt; #include \u0026lt;queue\u0026gt; #define MAXN 500005 #define MAXINT 0x7fffffff using namespace std; struct edge{ int v,w;//下一点，权 }; struct node { int dis, u; bool operator\u0026gt;(const node\u0026amp; a) const { return dis \u0026gt; a.dis; } }; int n,m,s;//点，边，起点 vector\u0026lt;edge\u0026gt; graph[MAXN]; int dis[MAXN]; bool tag[MAXN]; priority_queue\u0026lt;node, vector\u0026lt;node\u0026gt;, greater\u0026lt;node\u0026gt; \u0026gt; pq; int main(){ scanf(\u0026#34;%d%d%d\u0026#34;,\u0026amp;n,\u0026amp;m,\u0026amp;s); for(int i=1;i\u0026lt;=m;i++){ int a,b,c; scanf(\u0026#34;%d%d%d\u0026#34;,\u0026amp;a,\u0026amp;b,\u0026amp;c); //起点，终点，边权 edge t; t.v=b; t.w=c; graph[a].push_back(t); } for(int i=1;i\u0026lt;=n;i++){ dis[i] = MAXINT; //初始化为无限远 } dis[s]=0; node tmp; tmp.dis=0; tmp.u=s; pq.push(tmp); while (!pq.empty()) { int u = pq.top().u; pq.pop(); if(tag[u]) continue; tag[u]=1; for(auto g : graph[u]){ int v = g.v, w = g.w; if(dis[v]\u0026gt;dis[u]+w){ dis[v] = dis[u]+w; tmp.dis = dis[v]; tmp.u = v; pq.push(tmp); } } } for(int i=1;i\u0026lt;=n;i++){ printf(\u0026#34;%d \u0026#34;,dis[i]); } return 0; } Bellman-Ford #include \u0026lt;iostream\u0026gt; #include \u0026lt;vector\u0026gt; #include \u0026lt;cstring\u0026gt; #define MAXN 500005 #define INF 0x6fffffff using namespace std; struct edge{ int v;//下一点 int w;//权 }; int n,m,s; int dis[MAXN]; vector\u0026lt;edge\u0026gt; graph[MAXN]; int main(){ cin\u0026gt;\u0026gt;n\u0026gt;\u0026gt;m\u0026gt;\u0026gt;s; for(int i=1;i\u0026lt;=n;i++) dis[i]=INF; for(int i=1;i\u0026lt;=m;i++){ edge tmp; int a,b,c; cin\u0026gt;\u0026gt;a\u0026gt;\u0026gt;b\u0026gt;\u0026gt;c; //起点，终点，边权 tmp.v=b; tmp.w=c; graph[a].push_back(tmp); } dis[s] = 0; bool flag; for (int i=1;i\u0026lt;=n;i++)//松弛n-1轮，若第n轮还能松弛，就说明有负环 { flag = 0; for(int u=1;u\u0026lt;=n;u++){//这里看似是两层循环，实际上总数是边数，整个算法的复杂度是mn for (auto e : graph[u]){ int w=e.w,v=e.v; if(dis[v]\u0026gt;dis[u]+w){ dis[v]=dis[u]+w; flag = 1; } } } if(!flag){ break; } } cout\u0026lt;\u0026lt;flag\u0026lt;\u0026lt;endl;//可以输出是否有负权环 for(int i=1;i\u0026lt;=n;i++){ //if(dis[i]!=INF){ cout\u0026lt;\u0026lt;dis[i]\u0026lt;\u0026lt;\u0026#34; \u0026#34;; //} //else{ // cout\u0026lt;\u0026lt;\u0026#34;2147483647 \u0026#34;;//根据luogu P3371要输出这个数 //} } return 0; } SPFA /* bellman-ford的优化 只有上一次被松弛的结点，所连接的边， 才有可能引起下一次的松弛操作 */ #include \u0026lt;iostream\u0026gt; #include \u0026lt;vector\u0026gt; #include \u0026lt;queue\u0026gt; #define MAXN 500005 #define INF 0x5fffffff using namespace std; struct edge{ int v; int w; }; int dis[MAXN];//距离 int cnt[MAXN];//算到达本节点所要经过的边数，若cnt\u0026gt;=n，则说明有负权环 bool tag[MAXN];//用于判断是否为上次松弛过的节点的边所连的点 int n,m,s; queue\u0026lt;int\u0026gt; qu; vector\u0026lt;edge\u0026gt; graph[MAXN]; int main(){ cin\u0026gt;\u0026gt;n\u0026gt;\u0026gt;m\u0026gt;\u0026gt;s; for(int i=1;i\u0026lt;=n;i++){ dis[i] = INF; } dis[s] = 0; tag[s] = 1; for(int i=1;i\u0026lt;=m;i++){ int a,b,c; cin\u0026gt;\u0026gt;a\u0026gt;\u0026gt;b\u0026gt;\u0026gt;c; //起点，终点，边权 edge tmp; tmp.v=b; tmp.w=c; graph[a].push_back(tmp); } qu.push(s); bool is_negative_circle = 0; while(!qu.empty()){ if(is_negative_circle) break; int u = qu.front(); qu.pop(); tag[u]=0; for(auto e : graph[u]){ int v = e.v, w = e.w; if(dis[v]\u0026gt;dis[u]+w){ dis[v]=dis[u]+w; cnt[v]=cnt[u]+1; if(cnt[v]\u0026gt;=n) { is_negative_circle = 1; break; } if(!tag[v]){ qu.push(v); tag[v]=1; } } } } cout\u0026lt;\u0026lt;is_negative_circle\u0026lt;\u0026lt;endl;//可以输出是否有负权环 for(int i=1;i\u0026lt;=n;i++){ //if(dis[i]!=INF){ cout\u0026lt;\u0026lt;dis[i]\u0026lt;\u0026lt;\u0026#34; \u0026#34;; //} //else{ // cout\u0026lt;\u0026lt;\u0026#34;2147483647 \u0026#34;;//根据luogu P3371要输出这个数 //} } return 0; } Floyd //floyd #include \u0026lt;iostream\u0026gt; #include \u0026lt;cstring\u0026gt; #define MAXN 5005 #define MAXINT 0x3fffffff //不能设置为int的最大值，否则后面加法可能导致溢出 using namespace std; int graph[MAXN][MAXN]; int main(){ int n,m;//点数，边数 cin\u0026gt;\u0026gt;n\u0026gt;\u0026gt;m; for(int i = 1;i\u0026lt;=n;i++){ for(int j = 1;j\u0026lt;=n;j++){ graph[i][j] = MAXINT; } } for(int i = 1;i\u0026lt;=n;i++){ graph[i][i] = 0; } for(int i=1;i\u0026lt;=m;i++){ int a,b,v; cin\u0026gt;\u0026gt;a\u0026gt;\u0026gt;b\u0026gt;\u0026gt;v;//起点，终点，边权 graph[a][b] = v; } for(int k = 1;k\u0026lt;=n;k++){ for(int i=1;i\u0026lt;=n;i++){ for(int j=1;j\u0026lt;=n;j++){ graph[i][j] = min(graph[i][j],graph[i][k]+graph[k][j]); } } } for(int i = 1;i\u0026lt;=n;i++){ for(int j=1;j\u0026lt;=n;j++){ cout\u0026lt;\u0026lt;graph[i][j]\u0026lt;\u0026lt;\u0026#34; \u0026#34;; } cout\u0026lt;\u0026lt;endl; } return 0; } 拓扑排序 //拓扑排序 //拓扑排序 #include \u0026lt;iostream\u0026gt; #include \u0026lt;vector\u0026gt; #include \u0026lt;queue\u0026gt; using namespace std; struct graph{ int value; int to; }; struct point { int in_num; vector\u0026lt;graph\u0026gt; graph1; }point1[100]; int main(){ int n,m; cin\u0026gt;\u0026gt;n\u0026gt;\u0026gt;m; for(int i = 1;i\u0026lt;=n;i++){ point1[i].in_num=0; } for (int i=1;i\u0026lt;=m;i++){ int a,b,value; cin\u0026gt;\u0026gt;a\u0026gt;\u0026gt;b;//起点，终点；本次是无权图 graph tmp; tmp.to=b; tmp.value = 0; point1[a].graph1.push_back(tmp); point1[b].in_num++; } queue\u0026lt;int\u0026gt; que; vector\u0026lt;int\u0026gt; ans; for (int i = 1; i \u0026lt;= n; i++) { if(point1[i].in_num == 0){ que.push(i); } } while (!que.empty()) { int p = que.front(); que.pop(); ans.push_back(p); for(int i = 0;i\u0026lt;point1[p].graph1.size();i++){ int next = point1[p].graph1[i].to; point1[next].in_num--; if(point1[next].in_num==0){ que.push(next); } } } if(ans.size()==n){ for(int i = 0;i\u0026lt;ans.size();i++){ cout\u0026lt;\u0026lt;ans[i]\u0026lt;\u0026lt;\u0026#34; \u0026#34;; } } else{ cout\u0026lt;\u0026lt;\u0026#34;none\u0026#34;; } return 0; } 最小生成树 Kruskal #include \u0026lt;iostream\u0026gt; #include \u0026lt;algorithm\u0026gt; #define MAXN 200005 using namespace std; int u[MAXN],v[MAXN],w[MAXN]; int r[MAXN];//临时边序号，间接排序 int find_sets[MAXN];//并查集 int cmp(const int i, const int j){return w[i]\u0026lt;w[j];} int find(int x){return find_sets[x]==x ? x : find_sets[x] = find(find_sets[x]);} int main(){ int n,m;//点数和边数 cin\u0026gt;\u0026gt;n\u0026gt;\u0026gt;m; for(int i=1;i\u0026lt;=m;i++){ cin\u0026gt;\u0026gt;u[i]\u0026gt;\u0026gt;v[i]\u0026gt;\u0026gt;w[i]; //起点，终点，边权 } for(int i = 1;i\u0026lt;=n;i++){ find_sets[i]=i; } for(int i=1;i\u0026lt;=m;i++){ r[i]=i; } sort(r+1,r+m+1,cmp); int ans = 0; //int cnt=0; for(int i=1;i\u0026lt;=m;i++){ int tmp = r[i]; int x = find(u[tmp]); int y = find(v[tmp]); if(x!=y){ ans += w[tmp]; find_sets[x] = y; //cnt++; } } //计数，如果小于n-1则不连通 /* if(cnt\u0026lt;n-1){ cout\u0026lt;\u0026lt;\u0026#34;orz\u0026#34;\u0026lt;\u0026lt;endl; return 0; //如果是多个样例注意这个return 0 } */ cout\u0026lt;\u0026lt;ans\u0026lt;\u0026lt;endl; return 0; } Prim算法 #include \u0026lt;iostream\u0026gt; #include \u0026lt;vector\u0026gt; #include \u0026lt;queue\u0026gt; using namespace std; const int MAXN = 5005; const int MAXM = 200005; const int INF = 0x5fffffff; struct edge{ int v,w; edge()=default; edge(int v,int w):v(v),w(w){} bool operator\u0026gt;(const edge\u0026amp; x) const {return w\u0026gt;x.w;} }; vector\u0026lt;edge\u0026gt; graph[MAXN]; bool vis[MAXN]; priority_queue\u0026lt;edge, vector\u0026lt;edge\u0026gt;, greater\u0026lt;edge\u0026gt; \u0026gt; pq; //以下orz代表不连通 int main(){ int n,m;//点数，边数 scanf(\u0026#34;%d%d\u0026#34;,\u0026amp;n,\u0026amp;m); int ans = 0; int cnt = 1; for(int i=1;i\u0026lt;=m;i++){ int a,b,c;//起点，终点，边权 scanf(\u0026#34;%d%d%d\u0026#34;,\u0026amp;a,\u0026amp;b,\u0026amp;c); graph[a].push_back(edge(b,c)); graph[b].push_back(edge(a,c)); //无向图 } for(int i=0;i\u0026lt;graph[1].size();i++){ pq.push(graph[1][i]); } vis[1]=true; while(cnt!=n\u0026amp;\u0026amp;!pq.empty()){ edge minx=pq.top(); pq.pop(); while(vis[minx.v]){ if(pq.empty()){ cout\u0026lt;\u0026lt;\u0026#34;orz\u0026#34;\u0026lt;\u0026lt;endl; return 0; } minx=pq.top(); pq.pop(); } vis[minx.v] = true; ans+=minx.w; cnt++; for(int i=0;i\u0026lt;graph[minx.v].size();i++){ if(!vis[graph[minx.v][i].v]) pq.push(graph[minx.v][i]); } } if(cnt\u0026lt;n){ cout\u0026lt;\u0026lt;\u0026#34;orz\u0026#34;\u0026lt;\u0026lt;endl; } else{ cout\u0026lt;\u0026lt;ans\u0026lt;\u0026lt;endl; } return 0; } 最小树形图 朱刘算法 //最小树形图，朱刘算法 //从根节点能到达其他所有点 //luogu4716 #include \u0026lt;iostream\u0026gt; using namespace std; const int MAXN = 105; const int MAXM = 10005; const int INF = 0x7fffffff; struct Edge{ int u,v,w; }; Edge edge[MAXM]; int vis[MAXN],id[MAXN]; int in[MAXN],pre[MAXN]; int n,m,root; int zhuliu(){ int ans = 0; for(;;){ for(int i=1;i\u0026lt;=n;i++) in[i]=INF; for(int i=1;i\u0026lt;=m;i++){ int u = edge[i].u; int v = edge[i].v; if(u!=v\u0026amp;\u0026amp;edge[i].w\u0026lt;in[v]){//遍历所有边，找到对每个点的最短入边 in[v] = edge[i].w; pre[v] = u; } } for(int i=1;i\u0026lt;=n;i++){ if(i!=root\u0026amp;\u0026amp;in[i]==INF){ return -1;//无解 } } int cnt = 0;//记录环数以及下一次循环的点数 for(int i=1;i\u0026lt;=n;i++){ vis[i] = -1; id[i] = -1; } in[root] = 0; for(int i=1;i\u0026lt;=n;i++){ if(i==root) continue; ans += in[i]; int v=i; while(vis[v]!=i\u0026amp;\u0026amp;id[v]==-1\u0026amp;\u0026amp;v!=root){ vis[v] = i; v = pre[v]; } if(v!=root\u0026amp;\u0026amp;id[v]==-1){ id[v] = ++cnt; for(int u=pre[v];u!=v;u=pre[u]) id[u] = cnt; } } if(cnt==0){//无环，得到解 break; } for(int i=1;i\u0026lt;=n;i++){ if(id[i]==-1) id[i]=++cnt; } for(int i=1;i\u0026lt;=m;i++){ int u = edge[i].u; int v = edge[i].v; edge[i].u = id[u]; edge[i].v = id[v]; if(edge[i].u!=edge[i].v) edge[i].w -= in[v]; } n = cnt; root = id[root]; } return ans; } int main(){ cin\u0026gt;\u0026gt;n\u0026gt;\u0026gt;m\u0026gt;\u0026gt;root;//点数，边数，根节点序号 for(int i=1;i\u0026lt;=m;i++){ cin\u0026gt;\u0026gt;edge[i].u\u0026gt;\u0026gt;edge[i].v\u0026gt;\u0026gt;edge[i].w; //起点，终点，边权 } cout\u0026lt;\u0026lt;zhuliu()\u0026lt;\u0026lt;endl; return 0; } 网络流 最大流 Ford-Fulkerson DFS实现的Ford-Fulkerson //luogu P3376 //超时 #include \u0026lt;iostream\u0026gt; #include \u0026lt;vector\u0026gt; #include \u0026lt;cstring\u0026gt; #include \u0026lt;cstdio\u0026gt; using namespace std; typedef long long ll; typedef unsigned long long ull; const ll INF = 0xffffffff; const int MAXM = 100005; struct Edge{ int to; int rev; ll cap; Edge()=default; Edge(int to, ll cap, int rev):to(to),cap(cap),rev(rev){} }; vector\u0026lt;Edge\u0026gt; G[MAXM]; bool used[MAXM]; ll dfs(int v, int t, ll f){ if(v==t) return f; used[v] = true; for(int i=0;i\u0026lt;G[v].size();i++){ Edge\u0026amp; e=G[v][i]; if(!used[e.to]\u0026amp;\u0026amp;e.cap\u0026gt;0){ ll d = dfs(e.to, t, min(f,e.cap)); if(d\u0026gt;0){ e.cap-=d; G[e.to][e.rev].cap+=d; return d; } } } return 0; } ll max_flow(int s, int t){ ll flow = 0; for(;;){ memset(used,0,sizeof(used)); ll f = dfs(s,t,INF); if(f==0) return flow; flow+=f; } } int main(){ int n,m; cin\u0026gt;\u0026gt;n\u0026gt;\u0026gt;m; //点数，边数 int s,t; cin\u0026gt;\u0026gt;s\u0026gt;\u0026gt;t; //源点，汇点 for(int i=1;i\u0026lt;=m;i++){ int a,b; ll c; scanf(\u0026#34;%d%d%ld\u0026#34;,\u0026amp;a,\u0026amp;b,\u0026amp;c); //起点，终点，边容量 //cin\u0026gt;\u0026gt;a\u0026gt;\u0026gt;b\u0026gt;\u0026gt;c; G[a].push_back(Edge(b,c,G[b].size()));//这里第三个参数实际上是反向边的编号 G[b].push_back(Edge(a,0,G[a].size()-1)); } ll ans = max_flow(s,t); //得到最大流 printf(\u0026#34;%ld\u0026#34;,ans); //cout\u0026lt;\u0026lt;ans\u0026lt;\u0026lt;endl; return 0; } /* 4 5 4 3 4 2 30 4 3 20 2 3 20 2 1 30 1 3 40 */ EdmondsKarp #include \u0026lt;iostream\u0026gt; #include \u0026lt;vector\u0026gt; #include \u0026lt;queue\u0026gt; #include \u0026lt;cstring\u0026gt; using namespace std; typedef long long ll; const int MAXN = 205; const ll INF = 1LL\u0026lt;\u0026lt;35; struct Edge{ int from, to; ll cap,flow; Edge(int u, int v, ll c, ll f):from(u),to(v),cap(c),flow(f){} }; struct EdmondKarp{ int n,m; vector\u0026lt;Edge\u0026gt; edges; vector\u0026lt;int\u0026gt; G[MAXN]; //邻接表 ll a[MAXN]; ll p[MAXN]; void init(int n){ for(int i=0;i\u0026lt;n;i++){ G[i].clear(); } edges.clear(); } void AddEdge(int from, int to, ll cap){ edges.push_back(Edge(from, to, cap, 0)); edges.push_back(Edge(to, from, 0, 0)); m = edges.size(); G[from].push_back(m-2); G[to].push_back(m-1); } int Maxflow(int s, int t){ ll flow = 0; for(;;){ memset(a, 0 ,sizeof(a)); queue\u0026lt;ll\u0026gt; Q; Q.push(s); a[s] = INF; while(!Q.empty()){ ll x=Q.front(); Q.pop(); for(int i=0;i\u0026lt;G[x].size();i++){ Edge\u0026amp; e = edges[G[x][i]]; if(!a[e.to]\u0026amp;\u0026amp;e.cap\u0026gt;e.flow){ p[e.to] = G[x][i]; a[e.to] = min(a[x], e.cap-e.flow); Q.push(e.to); } } if(a[t]) break; } if(!a[t]) break; for(int u=t;u!=s;u=edges[p[u]].from){ edges[p[u]].flow+=a[t]; edges[p[u]^1].flow -= a[t]; } flow += a[t]; } return flow; } }; int main(){ EdmondKarp EK; cin\u0026gt;\u0026gt;EK.n; //点数 int s,t; int m; cin\u0026gt;\u0026gt;m\u0026gt;\u0026gt;s\u0026gt;\u0026gt;t; //边数，源点，汇点 for(int i=1;i\u0026lt;=m;i++){ int tmp1,tmp2,tmp3; cin\u0026gt;\u0026gt;tmp1\u0026gt;\u0026gt;tmp2\u0026gt;\u0026gt;tmp3; //起点，终点，边容量 EK.AddEdge(tmp1,tmp2,tmp3); } cout\u0026lt;\u0026lt;EK.Maxflow(s,t)\u0026lt;\u0026lt;endl; return 0; } 连通性相关 强连通分量 Tarjan算法 #include \u0026lt;iostream\u0026gt; #include \u0026lt;vector\u0026gt; #include \u0026lt;stack\u0026gt; using namespace std; const int MAXN = 5005; const int MAXM = 10005; int dfn[MAXN], low[MAXN], instk[MAXN], scc[MAXN], cnt=0, cscc=0; //scc代表每个店所属的强连通分量的编号 vector\u0026lt;int\u0026gt; edges[MAXN]; stack\u0026lt;int\u0026gt; stk; void tarjan(int u){ low[u] = dfn[u] = ++cnt; instk[u] = 1; stk.push(u); for(int i=0;i\u0026lt;edges[u].size();i++){ int v = edges[u][i]; if(!dfn[v]){ tarjan(v); low[u] = min(low[u],low[v]); } else if(instk[v]){ low[u] = min(low[u], dfn[v]); } } if(low[u]==dfn[u]){ int top; cscc++; do{ top = stk.top(); stk.pop(); instk[top] = 0; scc[top] = cscc; }while(top!=u); } } int main(){ int n,m; cin\u0026gt;\u0026gt;n\u0026gt;\u0026gt;m; //点数，边数 for(int i=1;i\u0026lt;=m;i++){ int a,b; cin\u0026gt;\u0026gt;a\u0026gt;\u0026gt;b; //起点，终点 edges[a].push_back(b); } for(int i=1;i\u0026lt;=n;i++){ if(!dfn[i]) tarjan(i); } for(int i=1;i\u0026lt;=n;i++){ cout\u0026lt;\u0026lt;scc[i]\u0026lt;\u0026lt;endl; } return 0; } 割点 Tarjan算法 //tarjan求割点,luogu P3388 #include \u0026lt;iostream\u0026gt; #include \u0026lt;vector\u0026gt; #include \u0026lt;stack\u0026gt; #include \u0026lt;algorithm\u0026gt; using namespace std; const int MAXN = 20005; const int MAXM = 100005; int dfn[MAXN], low[MAXN], cnt=0; vector\u0026lt;int\u0026gt; edges[MAXN]; vector\u0026lt;int\u0026gt; cut;//存储割点 void tarjan(int u, bool root = true){ int tot = 0; low[u] = dfn[u] = ++cnt; for(int i=0;i\u0026lt;edges[u].size();i++){ int v = edges[u][i]; if(!dfn[v]){ tarjan(v,false); low[u] = min(low[u],low[v]); tot += (low[v]\u0026gt;=dfn[u]);//统计满足的点的个数 } else{ low[u] = min(low[u], dfn[v]); } } if(tot\u0026gt;root){//如果是根节点，则需要有至少两个子树，否则只需要有一个子树 cut.push_back(u); } } int main(){ int n,m; cin\u0026gt;\u0026gt;n\u0026gt;\u0026gt;m; //点数，边数 for(int i=1;i\u0026lt;=m;i++){ int a,b; cin\u0026gt;\u0026gt;a\u0026gt;\u0026gt;b; //起点，终点 edges[a].push_back(b); edges[b].push_back(a); //无向图 } for(int i=1;i\u0026lt;=n;i++){ if(!dfn[i]) tarjan(i); } cout\u0026lt;\u0026lt;cut.size()\u0026lt;\u0026lt;endl; sort(cut.begin(),cut.end()); for(int i=0;i\u0026lt;cut.size();i++){ cout\u0026lt;\u0026lt;cut[i]\u0026lt;\u0026lt;\u0026#34; \u0026#34;; //输出割点的编号 } return 0; } 割边 Tarjan算法 //tarjan求割边 #include \u0026lt;iostream\u0026gt; #include \u0026lt;vector\u0026gt; #include \u0026lt;stack\u0026gt; #include \u0026lt;algorithm\u0026gt; using namespace std; const int MAXN = 20005; const int MAXM = 100005; int dfn[MAXN], low[MAXN], cnt=0, fa[MAXN];//fa记录父节点 vector\u0026lt;int\u0026gt; edges[MAXN]; vector\u0026lt;pair\u0026lt;int, int\u0026gt;\u0026gt; bridges;//存储割边 void tarjan(int u){ low[u] = dfn[u] = ++cnt; for(int i=0;i\u0026lt;edges[u].size();i++){ int v = edges[u][i]; if(!dfn[v]){ fa[v] = u; tarjan(v); low[u] = min(low[u],low[v]); if(low[v]\u0026gt;dfn[u]) bridges.emplace_back(u,v); } else if(fa[u]!=v){ low[u] = min(low[u], dfn[v]); } } } int main(){ int n,m; cin\u0026gt;\u0026gt;n\u0026gt;\u0026gt;m; //点数，边数 for(int i=1;i\u0026lt;=m;i++){ int a,b; cin\u0026gt;\u0026gt;a\u0026gt;\u0026gt;b; //起点，终点 edges[a].push_back(b); edges[b].push_back(a); //无向图 } for(int i=1;i\u0026lt;=n;i++){ if(!dfn[i]) tarjan(i); } cout\u0026lt;\u0026lt;bridges.size()\u0026lt;\u0026lt;endl; for(int i=0;i\u0026lt;bridges.size();i++){ cout\u0026lt;\u0026lt;bridges[i].first\u0026lt;\u0026lt;\u0026#34; \u0026#34;\u0026lt;\u0026lt;bridges[i].second\u0026lt;\u0026lt;endl; //输出割边 } return 0; } 计算几何 二维凸包 Andrew扫描法 #include \u0026lt;iostream\u0026gt; #include \u0026lt;cstdio\u0026gt; #include \u0026lt;cstring\u0026gt; #include \u0026lt;vector\u0026gt; #include \u0026lt;algorithm\u0026gt; #define MAXN 50005 using namespace std; struct Point{ double x,y; Point()=default; Point(double x, double y):x(x),y(y){} Point operator + (Point p){ return Point(x+p.x, y+p.y); } Point operator - (Point p){ return Point(x-p.x, y-p.y); } Point operator * (double d){ return Point(x*d, y*d); } double dot(Point p){//点积 return x*p.x+y*p.y; } double det(Point p){//叉积 return x*(p.y)-(p.x)*y; } }; int n; Point po[MAXN*2]; bool cmp(Point\u0026amp; a, Point\u0026amp; b){ if(a.x!=b.x) return a.x\u0026lt;b.x; return a.y\u0026lt;b.y; } vector\u0026lt;Point\u0026gt; convexHull(){ //返回凸包上的点 int k = 0; vector\u0026lt;Point\u0026gt; qs; for(int i=0;i\u0026lt;n;i++){ while(k\u0026gt;1\u0026amp;\u0026amp;(qs[k-1]-qs[k-2]).det(po[i]-qs[k-1])\u0026lt;=0){ qs.erase(qs.end()-1); k--; } qs.push_back(po[i]); k++; } for(int i=n-2,t=k;i\u0026gt;=0;i--){ while(k\u0026gt;t\u0026amp;\u0026amp;(qs[k-1]-qs[k-2]).det(po[i]-qs[k-1])\u0026lt;=0) { qs.erase(qs.end()-1); k--; } qs.push_back(po[i]); k++; } qs.erase(qs.end()-1); return qs; } int main(){ cin\u0026gt;\u0026gt;n; for(int i=0;i\u0026lt;n;i++){ cin\u0026gt;\u0026gt;po[i].x\u0026gt;\u0026gt;po[i].y; //输入点的横纵坐标 } sort(po,po+n,cmp); for(auto p:convexHull()){ cout\u0026lt;\u0026lt;p.x\u0026lt;\u0026lt;\u0026#34; \u0026#34;\u0026lt;\u0026lt;p.y\u0026lt;\u0026lt;endl; } return 0; } 旋转卡壳求最远点对 //Luogu P1452 //旋转卡壳和凸包 #include \u0026lt;iostream\u0026gt; #include \u0026lt;cstring\u0026gt; #include \u0026lt;vector\u0026gt; #include \u0026lt;algorithm\u0026gt; #define MAXN 50005 using namespace std; struct Point{ int x,y; Point()=default; Point(int x, int y):x(x),y(y){} Point operator - (Point p){ return Point(x-p.x, y-p.y); } Point operator + (Point p){ return Point(x+p.x, y+p.y); } Point operator * (int d){ return Point(x*d, y*d); } int dot(Point p){ return x*p.x+y*p.y; } int det(Point p){ return x*(p.y)-y*(p.x); } }; bool cmp(Point\u0026amp; a, Point\u0026amp; b){ if(a.x!=b.x) return a.x\u0026lt;b.x; return a.y\u0026lt;b.y; } int n; Point po[MAXN]; vector\u0026lt;Point\u0026gt; convexHull(){ //返回凸包上的点 vector\u0026lt;Point\u0026gt; ans; int k = 0; for(int i=0;i\u0026lt;n;i++){ while(k\u0026gt;1\u0026amp;\u0026amp;(ans[k-1]-ans[k-2]).det(po[i]-ans[k-1])\u0026lt;=0){ ans.erase(ans.end()-1); k--; } ans.push_back(po[i]); k++; } for(int i=n-2,t=k;i\u0026gt;=0;i--){ while(k\u0026gt;t\u0026amp;\u0026amp;(ans[k-1]-ans[k-2]).det(po[i]-ans[k-1])\u0026lt;=0){ ans.erase(ans.end()-1); k--; } ans.push_back(po[i]); k++; } ans.erase(ans.end()-1); return ans; } inline long long dist(Point a, Point b){//计算距离的平方 return (a-b).dot(a-b); } void rc(vector\u0026lt;Point\u0026gt; ans){ int tn = ans.size(); int cnt=0; if(tn==2){ cout\u0026lt;\u0026lt;dist(ans[0],ans[1])\u0026lt;\u0026lt;endl; return; } int i=0,j=0; for(int k=0;k\u0026lt;tn;k++){ if(!cmp(ans[i],ans[k])) i=k; if(cmp(ans[j],ans[k])) j=k; } long long res = 0; int si=i,sj=j; while(i!=sj||j!=si){ res = max(res,dist(ans[i],ans[j])); if((ans[(i+1)%tn]-ans[i]).det(ans[(j+1)%tn]-ans[j])\u0026lt;0){ i = (i+1)%tn; }else{ j = (j+1)%tn; } cnt++; } //返回凸包最远点对的距离的平方 cout\u0026lt;\u0026lt;res\u0026lt;\u0026lt;endl; } int main(){ cin\u0026gt;\u0026gt;n; vector\u0026lt;Point\u0026gt; qs; for(int i=0;i\u0026lt;n;i++){ cin\u0026gt;\u0026gt;po[i].x\u0026gt;\u0026gt;po[i].y; //按横纵坐标输入点对 } sort(po,po+n,cmp); qs = convexHull(); rc(qs); return 0; } 组合数学 卡特兰数 #include \u0026lt;iostream\u0026gt; //前几项：1, 1, 2, 5, 14, 42, 132, 429, 1430, 4862, 16796 using namespace std; typedef long long ll; const int MAXN = 3005; ll h[MAXN]; ll comb(int a,int b){ ll ans=1; for(int i=1;i\u0026lt;=b;i++){ ans*=a;//数字太大会爆 a--; } for(int i=1;i\u0026lt;=b;i++){ ans/=i; } return ans; } int main(){ int n; cin\u0026gt;\u0026gt;n; for(int i=1;i\u0026lt;=n;i++){ cout\u0026lt;\u0026lt;comb(2*i,i)/(i+1)\u0026lt;\u0026lt;endl; } cout\u0026lt;\u0026lt;\u0026#34;###\u0026#34;\u0026lt;\u0026lt;endl; //下面是递推求法，不容易爆 h[1]=1; cout\u0026lt;\u0026lt;h[1]\u0026lt;\u0026lt;endl; for(int i=2;i\u0026lt;=n;i++){ h[i] = h[i-1]*(4*i-2)/(i+1); cout\u0026lt;\u0026lt;h[i]\u0026lt;\u0026lt;endl; } return 0; } 稳定婚姻问题 Gale-Shapley算法 //POJ 3487 #include \u0026lt;iostream\u0026gt; #include \u0026lt;queue\u0026gt; #include \u0026lt;algorithm\u0026gt; #include \u0026lt;cstring\u0026gt; using namespace std; const int N = 30; const int inf = 1\u0026lt;\u0026lt;29; const int MOD = 2007; typedef long long ll; int couple; int maleLike[N][N], femaleLike[N][N]; int maleChoice[N], femaleChoice[N]; int maleName[N], femaleName[N]; char str[N]; queue\u0026lt;int\u0026gt;freemale;//目前单身的男人 int main(){ int t; scanf(\u0026#34;%d\u0026#34;,\u0026amp;t);//数据组数 while(t--){ scanf(\u0026#34;%d\u0026#34;,\u0026amp;couple);//男女对数 while(!freemale.empty()){ freemale.pop(); } for(int i=0;i\u0026lt;couple;i++){ scanf(\u0026#34;%s\u0026#34;,str); maleName[i]=str[0]-\u0026#39;a\u0026#39;;//题目中是以小写字母给男人名字，转化为数字 freemale.push(maleName[i]); } sort(maleName, maleName+couple);//名字排序，便于字典序 for(int i=0;i\u0026lt;couple;i++){ scanf(\u0026#34;%s\u0026#34;,str); femaleName[i]=str[0]-\u0026#39;A\u0026#39;;//女人名字是大写字母 } for(int i=0;i\u0026lt;couple;i++){ scanf(\u0026#34;%s\u0026#34;,str); for(int j=0;j\u0026lt;couple;j++){ maleLike[i][j]=str[j+2]-\u0026#39;A\u0026#39;;//男人喜好顺序由男人名字:女人名字列表给出;降序排列 } } //女士对男士的打分，添加虚拟人物，编号couple，为女士的初始对象 for(int i=0;i\u0026lt;couple;i++){ scanf(\u0026#34;%s\u0026#34;,str); for(int j=0;j\u0026lt;couple;j++){ femaleLike[i][str[j+2]-\u0026#39;a\u0026#39;]=couple-j;//排名越前打分越高 } femaleLike[i][couple]=0; } memset(maleChoice,0,sizeof(maleChoice)); //一开始男士的期望都是最喜欢的女士 for(int i=0;i\u0026lt;couple;i++){ femaleChoice[i]=couple; } while(!freemale.empty()){ int male=freemale.front(); //找出未配对的男士 int female=maleLike[male][maleChoice[male]]; //找出心意的女士 if(femaleLike[female][male]\u0026gt;femaleLike[female][femaleChoice[female]]){ //比现男友好 freemale.pop(); if(femaleChoice[female]!=couple){ //前男友再次单身，并且不能将虚拟人物加入队列 freemale.push(femaleChoice[female]); maleChoice[femaleChoice[female]]++; } femaleChoice[female]=male; //更换男友 } else maleChoice[male]++; //如果被拒绝，则选择下一位 } for(int i=0;i\u0026lt;couple;i++){ printf(\u0026#34;%c %c\\n\u0026#34;,maleName[i]+\u0026#39;a\u0026#39;, maleLike[maleName[i]][maleChoice[maleName[i]]]+\u0026#39;A\u0026#39;); } if(t) puts(\u0026#34;\u0026#34;); } return 0; } 树 树状数组 //树状数组 #include \u0026lt;iostream\u0026gt; #include \u0026lt;cstdio\u0026gt; #define MAXN 500005 using namespace std; int arr[MAXN]; int bit[MAXN]; int n,m; inline int lowbit(int n){ return n\u0026amp;(-n); } void update(int p, int k){ for(;p\u0026lt;=n;p+=lowbit(p)){ bit[p]+=k; } } long long query(int p){ int ans=0; for(;p;p-=lowbit(p)){ ans+=bit[p]; } return ans; } int main(){ scanf(\u0026#34;%d%d\u0026#34;,\u0026amp;n,\u0026amp;m); //数组长度，查询数 for(int i=1;i\u0026lt;=n;i++){ scanf(\u0026#34;%d\u0026#34;,\u0026amp;arr[i]); update(i,arr[i]); } for(int i=1;i\u0026lt;=m;i++){ int op; int x,y,k; scanf(\u0026#34;%d\u0026#34;,\u0026amp;op); scanf(\u0026#34;%d\u0026#34;,\u0026amp;x); if(op==1){ scanf(\u0026#34;%d\u0026#34;,\u0026amp;k); //将单点修改为k update(x,k); } else{ scanf(\u0026#34;%d\u0026#34;,\u0026amp;y); //输出[x,y]的数组和 cout\u0026lt;\u0026lt;query(y)-query(x-1)\u0026lt;\u0026lt;endl; } } return 0; } 并查集 //并查集 #include \u0026lt;iostream\u0026gt; using namespace std; const int MAXN = 1005; int find_sets[MAXN]; int findf(int x){ return find_sets[x]==x ? x : find_sets[x] = findf(find_sets[x]); } void unionSet(int x, int y){ x = findf(x); y = findf(y); find_sets[x] = y; } int main(){ int n; cin\u0026gt;\u0026gt;n; //点数 for(int i=1;i\u0026lt;=n;i++){ find_sets[i]=i; } int m; cin\u0026gt;\u0026gt;m; //边数 for(int i=1;i\u0026lt;=m;i++){ int a,b; cin\u0026gt;\u0026gt;a\u0026gt;\u0026gt;b; find_sets[b] = a; } cout\u0026lt;\u0026lt;findf(5)\u0026lt;\u0026lt;\u0026#34; \u0026#34;\u0026lt;\u0026lt;findf(8)\u0026lt;\u0026lt;endl; unionSet(5,8); cout\u0026lt;\u0026lt;findf(5)\u0026lt;\u0026lt;\u0026#34; \u0026#34;\u0026lt;\u0026lt;findf(8)\u0026lt;\u0026lt;endl; return 0; } /* 8 6 1 2 1 3 3 4 3 5 6 7 7 8 */ 线段树 //luogu 3372 #include \u0026lt;iostream\u0026gt; #include \u0026lt;cstdio\u0026gt; using namespace std; typedef long long ll; const int MAXN = 100005; ll st[MAXN*4+2];//对于一颗线段树，n个数所组成的树最多有4n-5个节点，开大了一点 ll tag[MAXN*4+2]; ll arr[MAXN]; void build(int s, int t, int p){//区间左端点、右端点、区间编号 if(s==t){ st[p] = arr[s]; return; } int m = s+((t-s)\u0026gt;\u0026gt;1);//写成(s+t)\u0026gt;\u0026gt;1可能会爆 build(s,m,p*2); build(m+1,t,p*2+1); st[p] = st[p*2]+st[p*2+1]; } void update(int l, int r, int s, int t, int p, ll c){//c表示加减的数值 if(l\u0026lt;=s\u0026amp;\u0026amp;t\u0026lt;=r){ st[p]+=(t-s+1)*c; tag[p]+=c; return; } ll m = s + ((t-s)\u0026gt;\u0026gt;1); if(tag[p]\u0026amp;\u0026amp;s!=t){ st[p*2] += (m-s+1)*tag[p]; st[p*2+1] += (t-m)*tag[p]; tag[p*2] += tag[p]; tag[p*2+1]+= tag[p]; tag[p]=0; } if(l\u0026lt;=m) update(l, r, s, m, p*2, c); if(r\u0026gt;m) update(l, r, m+1, t, p*2+1, c); st[p] = st[p*2] + st[p*2+1]; } ll query(int l, int r, int s, int t, int p){ //查询[l,r]的和 if(l\u0026lt;=s\u0026amp;\u0026amp;t\u0026lt;=r){ return st[p]; } ll sum=0; ll m = s+((t-s)\u0026gt;\u0026gt;1); if(tag[p]){ st[p*2] += (m-s+1)*tag[p]; st[p*2+1] += (t-m)*tag[p]; tag[p*2] += tag[p]; tag[p*2+1]+= tag[p]; tag[p]=0; } if(l\u0026lt;=m) sum+=query(l,r,s,m,p*2); if(r\u0026gt;m) sum+=query(l,r,m+1,t,p*2+1); return sum; } int main(){ int n,m; scanf(\u0026#34;%d%d\u0026#34;,\u0026amp;n,\u0026amp;m); //数组长度，查询次数 for(int i=1;i\u0026lt;=n;i++){ scanf(\u0026#34;%ld\u0026#34;,\u0026amp;arr[i]); } build(1,n,1); for(int i=1;i\u0026lt;=m;i++){ int ope; cin\u0026gt;\u0026gt;ope; if(ope==1){ int x,y,z; scanf(\u0026#34;%d%d%d\u0026#34;,\u0026amp;x,\u0026amp;y,\u0026amp;z); //[x,y]加上z update(x, y, 1, n, 1, z); } else{ int x,y; scanf(\u0026#34;%d%d\u0026#34;,\u0026amp;x,\u0026amp;y); //查询[x,y]的和 cout\u0026lt;\u0026lt;query(x, y, 1, n, 1)\u0026lt;\u0026lt;endl; } } return 0; } 倍增 ST表 对于经典的RMQ（即给定一个数组，求区间内的最大值）问题，有如下代码\n//luogu P3865 #include \u0026lt;cstdio\u0026gt; #include \u0026lt;iostream\u0026gt; const int MAXN = 100005; const int LOGN = 21; int fmax[MAXN][LOGN+1]; //fmax[a][b]表示[a,a+2^b-1]中的最大值 int logn[MAXN]; //预先计算logn int main(){ int n,m; //数组大小以及查询次数 scanf(\u0026#34;%d%d\u0026#34;,\u0026amp;n,\u0026amp;m); for(int i=1;i\u0026lt;=n;i++){ scanf(\u0026#34;%d\u0026#34;,\u0026amp;fmax[i][0]); } logn[1] = 0; logn[2] = 1; for(int i=3;i\u0026lt;MAXN;i++){ logn[i] = logn[i/2]+1; //预先计算logn } for(int j=1;j\u0026lt;=LOGN;j++){ for(int i=1;i+(1\u0026lt;\u0026lt;j)-1\u0026lt;=n;i++){ fmax[i][j] = std::max(fmax[i][j-1],fmax[i+(1\u0026lt;\u0026lt;(j-1))][j-1]); } } for(int i=1;i\u0026lt;=m;i++){ int a,b; scanf(\u0026#34;%d%d\u0026#34;,\u0026amp;a,\u0026amp;b); //查询[a,b]分为两部分，即[a,a+2^s-1]与[b-2^s+1,b] int s = logn[b-a+1]; printf(\u0026#34;%d\\n\u0026#34;,std::max(fmax[a][s],fmax[b-(1\u0026lt;\u0026lt;s)+1][s])); } return 0; } 倍增求最近公共祖先 //luogu P3379 #include \u0026lt;iostream\u0026gt; #include \u0026lt;vector\u0026gt; #include \u0026lt;cstdio\u0026gt; const int MAXN = 500005; const int LOGN = 31; std::vector\u0026lt;int\u0026gt; edge[MAXN];//邻接表 int fa[MAXN][LOGN],deep[MAXN]; //fa[a][b]代表a的第2^b个祖先，deep是深度，根节点深度为1 void build(int v,int father){ fa[v][0] = father; deep[v] = deep[father]+1; for(int i=1;i\u0026lt;LOGN;i++){ fa[v][i] = fa[fa[v][i-1]][i-1]; } for(auto v1:edge[v]){ if(v1==father) continue; build(v1,v); } } int lca(int x,int y){ if(deep[x]\u0026gt;deep[y]) std::swap(x,y); //保证y比x深 int tmp = deep[y]-deep[x]; for(int i=0;tmp;i++,tmp\u0026gt;\u0026gt;=1){ if(tmp\u0026amp;1) y=fa[y][i]; } if(x==y) return y; for(int i=LOGN-1;i\u0026gt;=0\u0026amp;\u0026amp;y!=x;i--){ if(fa[x][i]!=fa[y][i]){ x = fa[x][i]; y = fa[y][i]; } } return fa[y][0]; } int main(){ int n,m,s; scanf(\u0026#34;%d%d%d\u0026#34;,\u0026amp;n,\u0026amp;m,\u0026amp;s); //点数，询问数，根节点序号 for(int i=1;i\u0026lt;=n-1;i++){ int a,b; scanf(\u0026#34;%d%d\u0026#34;,\u0026amp;a,\u0026amp;b); //读入树 edge[a].push_back(b); edge[b].push_back(a); } build(s,0); for(int i=1;i\u0026lt;=m;i++){ int x,y; scanf(\u0026#34;%d%d\u0026#34;,\u0026amp;x,\u0026amp;y); //查询x,y的最近公共祖先 printf(\u0026#34;%d\\n\u0026#34;,lca(x,y)); } return 0; } 二分 二分答案 给出一个通用代码\nint l = 0; int r = MAXR; while(l+1\u0026lt;r){ int mid = (l+r)\u0026gt;\u0026gt;1; if(judge(mid)) l=mid; else r = mid; } if(judge(l)) std::cout\u0026lt;\u0026lt;l\u0026lt;\u0026lt;\u0026#34;\\n\u0026#34;; else std::cout\u0026lt;\u0026lt;r\u0026lt;\u0026lt;\u0026#34;\\n\u0026#34;; judge函数应该根据题意写出。\n如果是浮点数的二分，则不推荐使用EPS进行精度判断（有可能会丢精度）。而是使用计数器，一般迭代100次就能保证符合题目要求。\n","date":"2021-12-18T15:57:37+08:00","permalink":"https://kegalas.top/p/%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E5%B8%B8%E7%94%A8%E6%A8%A1%E6%9D%BF%E6%95%B4%E7%90%86/","title":"算法竞赛常用模板整理"},{"content":"网络设备管理 题目描述 ​\t叮叮叮！网络设备管理员欢欢在行动\n​\t欢欢就职于一家庞大的数据管理分析公司\n​\t公司有一个存储数据的庞大网络，把每个数据存储器看做一个节点，这个存储网络可以看做是一个树型结构，每天有庞大的数据流在节点之间穿梭\n​\t随着公司的发展，这个网络越来越庞大，数据的传输速度也越来越慢，通过研究，欢欢发现，每个节点的传输速度，只与与这个节点连接的节点数量有关，比如仅和一个节点连接的节点传输数据会很快，而和 100 个节点连接的节点传输数据会很慢\n​\t欢欢准备提交一份研究报告，报告将会指出，若对于网络中的所有节点，与该节点相连的节点数量不超过 d，那么网络的整体传输速度将会大幅提高。\n​\t欢欢准备通过添加新的网络设备来降低与某节点相连的节点的数量\n​\t简而言之，对于网络设备a，我们可以添加新的设备b，使得原来与a相连的若干节点断开与a的连接并与b连接，并且使a,b连接，显然，添加新的网络设备后，这个网络仍旧是一个树形结构这样通过添加若干新的网络设备，我们可以把所有网络设备的相连网络设备数量降低到不超过d台 (包括与新添加的网络设备相接的网络设备数量不超过 d)\n​\t欢欢发现，有很多种解决方案\n​\t聪明的你知道欢欢最少添加多少台网络设备吗？\n​\t注意: 欢欢添加新的设备后，网络的结构仍保持为树形结构\n输入 ​\t单组输入 ​\t第一行两个正整数 $n$, $d$ $(1\\le n\\le 10^5,3\\le d\\le n)$ ​\t接下来$n-1$行，每行两个正整数$a$,$b$ $(1\\le a, b\\le n)$，说明设备$a$与设备$b$相连接，数据保证设备网络为树形结构。\n输出 ​\t一个正整数，最小添加的网络设备数量，注意欢欢可以添加0台设备。\n样例 样例输入 样例输出 10 32 13 14 15 26 17 68 59 710 6 1 AC代码 #include \u0026lt;iostream\u0026gt; #define MAXN 100005 using namespace std; int arr[MAXN]; int main(){ int n,d; cin\u0026gt;\u0026gt;n\u0026gt;\u0026gt;d; for(int i=1;i\u0026lt;n;i++){ int a,b; scanf(\u0026#34;%d%d\u0026#34;,\u0026amp;a,\u0026amp;b); arr[a]+=1; arr[b]+=1; } int ans=0; for(int i=1;i\u0026lt;=n;i++){ if(arr[i]\u0026gt;d){ int tmp = (d-1)*2; if(arr[i]-tmp\u0026lt;=0){ ans+=1; } else if((arr[i]-tmp)%(d-2)==0) ans += 1 + (arr[i]-tmp)/(d-2); else ans += 1 + (arr[i]-tmp)/(d-2)+1; } } cout\u0026lt;\u0026lt;ans; return 0; } 正确性证明 先给出样例的示意图\n样例图\r其中红色数字表示与这个节点直接相连的节点的个数。显然只有1号节点连了大于3个节点，我们可以新增一个节点A，将2、3号与A相连，4、6号不变，然后将1与A相连，现在1与A连了三个节点，符合要求。不过这不是唯一的连法。\n这种有最大连接节点的结构，很容易让人回想起烷烃。显然的，饱和烷烃的碳链无论怎么排布，所连的氢原子的数目不会改变。每个碳原子也都会连四个原子。\n类比到这道题，我们要做的，就是将形如下图的点（假设上限为连3个）\n2\r变为如下的一些点，当然这里的点怎么排布都不影响，只要他最大的利用了链接上限，就是答案。\n3\r解释一下核心代码\nfor(int i=1;i\u0026lt;=n;i++){ if(arr[i]\u0026gt;d){//枚举超过链接上限的节点 int tmp = (d-1)*2; //点链两端，能“向外”链接d-1个点，必须要向“内部”链接一个点，才能构成点链，这个arr[i]-tmp得到的是还需要“向外”链接的数量。 if(arr[i]-tmp\u0026lt;=0){//特判一下，如果只用新增一个节点，并且有一个节点没有占满上限 ans+=1; } else if((arr[i]-tmp)%(d-2)==0)//内部每个节点都只能“向外”链接d-2个节点，如果能全部占满每个内部节点的上限，ans如下 ans += 1 + (arr[i]-tmp)/(d-2); else//不能占满则ans如下 ans += 1 + (arr[i]-tmp)/(d-2)+1; } ","date":"2021-11-21T14:53:54+08:00","image":"https://kegalas.top/p/%E7%AE%97%E6%B3%95%E9%A2%98-%E7%BD%91%E7%BB%9C%E8%AE%BE%E5%A4%87%E7%AE%A1%E7%90%86/1_hue13a31d22502e6414becf06d466eec8f_119570_120x120_fill_q75_box_smart1.jpg","permalink":"https://kegalas.top/p/%E7%AE%97%E6%B3%95%E9%A2%98-%E7%BD%91%E7%BB%9C%E8%AE%BE%E5%A4%87%E7%AE%A1%E7%90%86/","title":"算法题-网络设备管理"},{"content":"向量 题目描述 ​ 给你n个向量，请问是否可以通过旋转异或伸缩任意一个向量，使得这n个向量相加等于0向量。 ​\n​ 注意，在本题中，我们认为0向量只能伸缩为0向量，非0向量可以伸缩为0向量、方向相同长度任意的向量、方向相反长度任意的向量。\n输入 ​ 单组输入\n​ 第一行一个正整数 $n(1\\le n\\le 10^5)$，即向量的个数。\n​ 接下来$n$行，每行两个整数$x_i$, $y_i$ $(0\\le |x_i|,|y_i|\\le 10^9)$，分别代表第$i$个向量$x$轴与$y$轴的大小方向。\n数据保证\n$$\\sum_{i=1}^{n}(|x_i|+|y_i|)\\le 10^9$$\n输出 ​ 若存在满足要求的操作输出 “yes”，反之输出 “no”。\n样例 样例输入 样例输出 3\n0 0\n1 2\n4 2 no AC代码 #include \u0026lt;iostream\u0026gt; #include \u0026lt;cstdio\u0026gt; typedef long long ll; #define MAXN 100005 using namespace std; struct Vec { ll x; ll y; }; Vec vec[MAXN]; int main(){ int n; cin\u0026gt;\u0026gt;n; Vec allSum; allSum.x=0;allSum.y=0; for(int i=1;i\u0026lt;=n;i++){ cin\u0026gt;\u0026gt;vec[i].x\u0026gt;\u0026gt;vec[i].y; allSum.x+=vec[i].x; allSum.y+=vec[i].y; } ll ans = 0; for(int i=1;i\u0026lt;=n;i++){ if(vec[i].x==0\u0026amp;\u0026amp;vec[i].y==0) continue; Vec tmpSum = allSum; tmpSum.x-=vec[i].x; tmpSum.y-=vec[i].y; ll dis1 = tmpSum.x*tmpSum.x+tmpSum.y*tmpSum.y; ll dis2 = vec[i].x*vec[i].x+vec[i].y*vec[i].y; if(dis1==dis2) { ans=1; break; } if(vec[i].y*tmpSum.x-tmpSum.y*vec[i].x==0) { ans=1; break; } } if(ans) cout\u0026lt;\u0026lt;\u0026#34;yes\u0026#34;; else cout\u0026lt;\u0026lt;\u0026#34;no\u0026#34;; return 0; } 正确性证明 首先分析题目，出题人的表达和数据结果并不一致。“是否可以通过旋转异或伸缩任意一个向量”实际上应该是“是否可以通过旋转异或伸缩某一个向量”，从而“使得这n个向量相加等于0向量”。\n数据也就$10^5$，直接枚举就行。先将所有向量加到一起记为allSum，然后建立一个tmpSum = allSum-我们当前枚举的向量，记为v。\n然后判断这个tmpSum向量是否和v长度平方相等，是则可以通过旋转v，再相加得到0向量。判断tmpSum向量终点是否和$(0,0)$和v的终点在同一直线上,是则可以通过伸缩v来达到目的。这里判断三点共线的方法是求外积。若都为否，则不可以只对v伸缩或者旋转达到目的，枚举下一个。这里注意，我上述写的代码要将0向量略过，否则0向量总是可以通过三点共线的判断，达不到目的。\n如果枚举出一个向量可以达到目的，就输出yes。如果所有向量都达不到目的，就输出no。\n","date":"2021-11-15T22:30:41+08:00","permalink":"https://kegalas.top/p/%E7%AE%97%E6%B3%95%E9%A2%98-%E5%90%91%E9%87%8F/","title":"算法题-向量"},{"content":"有限小数 题目描述 ​\t现在有一个正整数n,可以证明存在若干个正整数d使得1/n在d进制下为有限小数，输出最小的d。\n输入 ​\t单组输入 ​\t第一行一个正整数$n(2\\le n\\le 10^{12})$\n输出 ​\t一个正整数d\n样例 输入 输出 9 3 999 111 AC代码 #include \u0026lt;iostream\u0026gt; #include \u0026lt;cstring\u0026gt; #include \u0026lt;cmath\u0026gt; using namespace std; int main(){ long long n; cin\u0026gt;\u0026gt;n; long long ans=1; long long tmp=n; //求n的质因数的乘积 for(long long i=2;i*i\u0026lt;=tmp;i++){ if(tmp%i==0){ ans*=i; while(tmp%i==0){ tmp/=i; } } } if(tmp\u0026gt;1) ans*=tmp; cout\u0026lt;\u0026lt;ans\u0026lt;\u0026lt;endl; return 0; } 正确性证明 ​\t若$1/n$可以在d进制表达为有限小数，那么一定有：\n​\t$$\\frac{1}{n}=\\frac{a_1}{d}+\\frac{a_2}{d^2}+\\dots+\\frac{a_m}{d^m}$$\n​\t其中$a_i\u0026lt;d(1\\le i\\le m)$，且$a$为正整数，$m$是一个正整数。将两边同乘$nd^m$得：\n​\t$$d^m=n(a_1d^{m-1}+\\dots+a_md^0)$$\n故只要$d^m$是n的倍数，$1/n$在d进制下就为有限小数。\n将n进行质因数分解，由唯一分解定理知只能分解为一种形式，设d为n的质因数的乘积，易知此时总存在m使得n|$d^m$，并且显然，这个d是最小的。\n","date":"2021-11-15T16:26:01+08:00","permalink":"https://kegalas.top/p/%E7%AE%97%E6%B3%95%E9%A2%98-%E6%9C%89%E9%99%90%E5%B0%8F%E6%95%B0/","title":"算法题-有限小数"},{"content":"各种主义整理 哲学、政治、社会 绝对主义 绝对主义认为在任何一种学说里，某种观点必定是绝对正确或者绝对错误的。\n荒诞主义 “荒诞主义”是对人生的极端反叛，认为人生的意义并不存在，所以可以活得很无厘头都无所谓。\n唯美主义 唯美主义者的人生目的就是去创造和享受一切美的东西。\n利他主义 利他主义者是一种随时都在无私地为他人福利着想的人，在道德判断上，认为别人的幸福快乐比自己的来得重要。利他主义在许多思想和文化中是一种美德。\n无政府主义（安那其主义） “无政府”一词并不代表混乱、虚无或道德沦丧的状态，而是一种由自由的个体自愿结合，以建立互助、自治、反独裁主义的和谐社会。庄子被认为是最早的无政府主义者。\n人类中心主义（以人为本） 人类中心主义认为人类是地球上最核心或者最重要的物种，评价现实的真实与否依靠人类的视角。人类中心主义是环境伦理学和环境哲学的主要概念，被认为是人类为何与自然环境发生冲突的根本原因，但这种理念已经根植在大多数人类的心中。\n无神论 无神论并没有统一的哲学思想，一些无神论者可能完全否定超自然事物，但另一些无神论者可能相信诸如占星术等伪科学。无神论经常同不可知论、反神论或反有神论相混淆。无神论者是认为没有神，不可知论者是认为神的存在是不可知，而反神论者是直接明确反对有神论。\n资本主义 资本主义的特色是私人拥有生产资料，且投资活动是由个人决策左右，而非由国家所控制，经济行为则以追求利润为目标。资本主义的主要经济模式包括了自由的资本和雇佣流动、市场竞争以及价格机制的运行。\n集体主义 集体主义是主张个人从属于社会，个人利益应当服从集体、民族、阶级和国家利益的一种思想理论。\n建构主义 建构主义者认为，任何一个社会人的行为都被约定俗成的社会传统、社会习惯和个人身份来制约或改变，因此现实和我们理解现实的方式都是人造的、主观的。\n犬儒主义 犬儒主义本意是指人不应被一切世俗的事物，包括宗教、礼节、惯常的衣食住行等习俗束缚，提倡对道德的无限追求，同时过着极简朴而非物质的生活。\n现代社会中“犬儒主义”一词常被误用作比喻一些否定利他主义、自私而且毫无道德的人。\n演绎主义 科学知识的产生是通过提出假设，然后通过实验和观察到的现象和数据来证明这样一个过程。\n决定论（determinism） 决定论是哲学的一种命题，认为每个事件的发生，包括人类的认知、举止、决定和行动，都是因为先前的事而有原因地发生。\n教条主义 指那些我们所相信的、不容质疑的观念。宗教上指那些具有权威性的团体所确立的教理，信徒以此作为应该学习的真理课程。\n二元论 二元论认为世界由两种力量统治：善与恶。善是精神，是灵魂，是善的力量创造的一切东西;而恶是物质，是肉体，是恶的力量创造的一切。这两种力量对抗着，共同支配世界。\n折衷主义 折衷主义是指操作运用不同的理论、方法、风格，拣选其中最佳要素，应用在新的创作中。在艺术或建筑批评等特定领域，指挪借多种视觉资源来创作新作品。\n平均主义 平均主义要求平均分享一切社会财富，对人人应该予以同样、平等对待。\n情感主义 情感主义是 20 世纪 30 年代，英美等国最流行的一种元伦理学，它否认伦理学的科学地位，主张道德是个人情感的表达，否认道德的客观性，认为道德判断没有合理的或有效的根据，没有真假之别，不过是表示某种情感、某种愿望。\n经验主义 经验主义指相信现代科学方法，认为理论应建立于对于事物的观察，通过实验研究而后进行理论归纳，优于单纯的逻辑推理、直觉或者先入为主的概念。\n副现象论（epiphenomenalism） 副现象论认为物理世界可以影响内心世界，但是反过来却不行。\n永恒论 永恒论认为时间不过是另外一个维度，明天已经存在了，只是你还没到那里而已。过去、现在、未来都一样真实。\n幸福主义 以幸福作为人生目的和理想的人生哲学。认为幸福包括物质生活和精神生活两个方面，人有追求幸福的权利，这是人的天性，人生的意义即在对于幸福的追求。\n存在主义 存在主义认为人存在的意义无法经由理性思考而得到答案，强调个人的主观经验。\n有序主义（extropy） 有序主义是相信科技进步可以解决人类问题的超人类主义思想之一。它认为随着科技的进步，总有一天人类可以得到永生。有序主义者愿意为了这个目的而努力，比如进行调查研究，志愿测试新技术等。\n女性主义 女性主义是指主要以女性经验为来源与动机的社会理论与政治运动。在对社会关系进行批判之外，许多女性主义的支持者也着重于性别不平等的分析以及推动妇女的权利、利益与议题。\n因果论（finalism） 因果论认为任何事物的发展都由预设好的既定结果来决定。\n自由意志 自由意志是指在社会、道德、政治的限制下，人们依照其拥有的条件去自主决定是否做一件事的能力。\n快乐主义 又称享乐主义。它倾向于用纯粹生物学的或心理学的观点来解释人的行为与需要，认为人们以求得快乐为生活目的，包括肉体与心灵的快乐。\n历史论 历史论认为去理解一个历史事件，我们必须考虑到当时的大环境和历史的上下文，而不是抽象地用概念去解释。\n唯心主义 唯心主义反对现实主义的哲学观，认为在人类的认知中，我们对物体的理解与感知，独立于物体的实际存在。\n个人主义 个人主义是一种道德的、政治的和社会的哲学，认为个人利益应是决定行为的最主要因素，强调个人自由和个人权利的重要性，超越集体如国家、种族、社会组织之上。\n神秘主义 也译作密契主义，包含人类与神明或某种超自然力量结合为一的各种形式、经验、体验，并且强调这是一切宗教共有的现象。神秘主义者的基本信条是世界上存在超自然的力量或隐藏的自然力量，这种力量可以通过特殊教育或者宗教仪式获得。\n自然主义 自然主义者认为自然的和超自然的都是一回事，可以用同一套方法来研究和解释。\n虚无主义 虚无主义作为哲学主义，为怀疑主义的极致形式，认为世界、生命(特别是人类)的存在是没有客观意义、目的以及可以理解的真相的。\n客观主义 在伦理学中，客观主义认为有些事情的对错是客观存在的。\n乐观主义 乐观主义是指一种对一切事物采与正面看法的观念。乐观的人不会想到一件事的缺点与瑕疵，永远以正面的想法对待身边的一切。\n泛神论 泛神论是一种将自然界与神等同起来，以强调自然界的至高无上的哲学观点。泛神论认为神就存在于自然界一切事物之中，并没有另外的超自然的主宰或精神力量。\n观点主义 观点主义认为人思想和价值判断来自不同的内心驱动和个人视角，并没有绝对的真理，只能去融合不同的观点。\n厌世主义 厌世主义，亦即悲观主义和虚无主义，是特定人群中所形成的一种无可奈何的悲观心理的反映。\n理性主义 理性主义是建立在承认人的理性可以作为知识来源的理论基础上的一种哲学方法，认为理性高于并独立于感官感知。\n相对主义 相对主义不是一个单一的学说，而是一系列观点，其共同的主题是，经验、思想、价值总是相对于其他东西而成立的，没有什么绝对的真理或评判标准。\n怀疑论 怀疑论是一种认识论，是认识问题的一种态度，它拒绝对问题作随意的不够严格的定论，对事物的看法采取一种类于“中立”的立场，既怀疑“是”也怀疑“不是”。怀疑论的反面是迷信，或更确切地说是独断论。\n斯多葛主义 斯多葛主义认为，重要的是在任何情况下都必须保持沉着，学会情感和生理的自我控制，以求得内心的平和与力量，获得更好的生活。斯多葛主义认为它的对立面激情是“背离理性和违反自然的精神冲动”。\n结构主义 结构主义认为任何一个现象都必须在知道了语境和上下文和他们之间的相互关系后才能被真正理解。\n融合主义 融合主义倡导不同宗教信仰或哲学主张之间的融合。\n有神论 广义上的有神论认为至少存在一个神明。狭义上特指一神论信仰，认为世界有一位至高的神明，关注于宇宙与这位神明之间的关系。\n功利主义 功利主义提倡追求大多数人的最大幸福，如果需要牺牲少部分人的利益也没办法。\n生命力论（活力论） 生命力论在人类历史上存在长久的历史，现代版本是19世纪初由瑞典化学家贝采利乌斯提出的，认为生命的运作，不只依循物理及化学定律。生命有自我决定的能力。\n新柏拉图主义 新柏拉图主义认为，世界有两极，一端是被称为“上帝”的神圣之光，另一端则是完全的黑暗。但新柏拉图主义也相信，完全的黑暗并不存在，只是缺乏亮光而已。\n柏拉图主义 尤指宣称理念形式是绝对的和永恒的实在，而世界中实在的现象却是不完美的和暂时的反映。\n伊壁鸠鲁学派 伊壁鸠鲁派认为并宣扬人死魂灭，这是人类思想史上的一大进步，同时提倡寻求快乐和幸福。但他们所主张的快乐决非肉欲物质享受之乐，而是排除情感困扰后的心灵宁静之乐。伊壁鸠鲁派生活简朴而又节制，目的就是要抵制奢侈生活对一个人身心的侵袭。\n斯多亚主义 斯多葛派认为世界理性决定事物的发展变化。所谓\u0026quot;世界理性\u0026quot;，就是神性，它是世界的主宰，个人只不过是神的整体中的一分子。在社会生活中斯多葛派强调顺从天命,要安于自己在社会中所处的地位，要恬淡寡欲，只有这样才能得到幸福。\n工具主义 工具主义的实践理性观可以表达为：理性指导人们的实践，是并且只是通过告诉人们采用何种必要的手段以达到既定目的来完成的，但是这些既定目的是否合适则不受理性的批判。\n世界主义 世界主义相信所有的人类都属于一个基于同样道德观念的社群，。世界主义的社群包括一个包容性的道德规范，共享的经济体制，和一个包含所有国家的政治结构。社群之中来自世界各地的人通过彼此的敬意来建立关系。\n加速主义 指一种政治与社会理论，认为资本主义制度或历史上某种技术相关的社会进程应该被加速以产生巨大社会变革。\n国际主义 国际主义是指各国无产阶级在反对剥削制度，争取自身解放斗争中，在政治、经济、道义等方面互相支持，互相援助，坚持国际团结的思想和政治原则。国际主义体现了无产阶级的民族观，是无产阶级处理民族问题的基本原则，也是无产阶级认识和处理各国无产阶级之间、各国无产阶级政党之间以及社会主义国家之间相互关系的行为准则。资本压迫和统治的国际性，决定了无产阶级反对资产阶级的斗争，从形式上看，首先是在一国范围内进行，但从内容上看，从来就是国际性的:无产阶级只有解放全人类，才能最后解放自己。\n沙文主义 沙文主义是资产阶级侵略性的民族主义。18世纪末、19世纪初产生于法国，因法国士兵沙文（Nicolas Chauvin）狂热拥护拿破仑一世的侵略扩张政策，主张用暴力建立法兰西帝国而得名。它鼓吹法兰西民族是世界上最优秀的民族，宣扬本民族利益高于一切，煽动民族之间的仇恨，主张征服和奴役其他民族。在帝国主义时代，沙文主义是帝国主义侵略和压迫其他国家和民族的舆论工具。\n民族主义 民族主义，即指以自我民族的利益为基础而进行的思想或运动。在近代以来，民族主义推动了民族解放与平等，是现代国际社会的源泉。美国学者汉斯·科恩认为：“民族主义首先而且最重要的是应该被看作是一种思想状态。”英国学者爱德华·卡尔认为：“民族主义通常被用来表示个人、群体和一个民族内部成员的一种意识，或者是增进自我民族的力量、自由或财富的一种愿望”。民族主义通常是指以维护本民族利益和尊严为出发点的思想与行为\n民粹主义 民粹主义（populism），又译平民主义，是在19世纪的俄国兴起的一股社会思潮。民粹主义的基本理论包括：强调平民群众的价值和理想，把平民化和大众化作为政治运动和政治制度合法性的最终来源；依靠平民大众对社会进行改革，并把普通群众当作政治改革的决定性力量；通过强调诸如平民的统一、全民公决、人民的创制权等民粹主义价值，对平民大众从整体上实施有效的控制和操纵。\n法西斯主义 法西斯主义（英语：Fascism；俄语：фашизм；意大利语：Fascismo；德语：Faschismus；西班牙语：Fascismo）是一种结合了社团主义、工团主义、独裁主义、极端民族主义、中央集权形式的军国主义、反无政府主义、反自由放任的资本主义、和反共产主义政治哲学；《大英百科全书》对法西斯主义的定义：“个人的地位被压制于集体—例如：某个国家、民族、种族、或社会阶级之下的社会组织。”\n纳粹主义 纳粹主义，是德文“Nationalsozialismus”缩写“Nazismus”的音译，意译为“民族社会主义”。\n纳粹主义意识形态的精神是“属于一个民族”，纳粹主义的基本理论包括：种族优秀论，“优等种族”至上；一切领域的“领袖”原则，“领袖”是国家整体意志的代表；反对英法资本主义体系以及共产主义思想体系，抵制共产主义理论。\n种族主义 种族主义是一种自我为中心的态度，认为种族差异决定人类社会历史和文化发展，认为自己所属的团体，例如人种、民族或国家，优越于其他的团体。\n修正主义 修正主义是在共产主义运动之中歪曲、篡改、否定马克思主义的一类资产阶级思潮和政治势力，是国际工人运动中打着马克思主义旗号反对马克思主义的机会主义思潮。“修正“一词来源于拉丁文reisio，意思是“修改、重新审查”。 修正主义产生于十九世纪九十年代。其社会基础是资本主义“和平”发展时期逐步形成起来的工人贵族阶层以及补充到工人阶级队伍中的小资产阶级。\n改良主义 改良主义是一种试图以非革命手段解决资本主义社会矛盾的资产阶级和小资产阶级思潮。这种思潮宣扬阶级合作，主张在保存资本主义制度的前提下，实行局部的微小的社会改良; 反对暴力革命和无产阶级专政，主张通过法令和立法途径实行社会改革，变资本主义为“普遍福利”社会。\n社会民主主义 社会民主主义是社会思潮和社会运动。它反映和代表了各国社会党 (包括社会民主党、工党) 及其国际联合组织“社会党国际” 解决社会矛盾问题、处理政治问题的共同的基本主张、基本观点、基本理论和方法，是各国社会党思想体系的统称。\n社会民主主义思潮最初于19世纪中叶诞生于欧洲，作为对资本剥削和侮辱劳动阶级的反抗运动，迄今已存在了一个半世纪之久。在一百五十余年的风风雨雨中，社会民主主义已经历了由理论到实践，由欧洲到世界的发展过程，愈益发展壮大。\n孤立主义 孤立主义，是一种外交政策。它通常由防务和经济上的两方面政策组成。在防务上，孤立主义采取不干涉原则，即除自卫战争外不主动卷入任何外部军事冲突；在经济文化上，通过立法最大程度限制与国外的贸易和文化交流。\n单边主义 所谓单边主义是指举足轻重的特定大国，不考虑大多数国家和民众的愿望，单独或带头退出或挑战已制订或商议好了的维护国际性、地区性、集体性和平、发展、进步的规则和制度，并对全局或局部的和平、发展、进步有破坏性的影响和后果的行为与倾向。\n多边主义 多边主义原是指不完全依赖俄罗斯或者独联体内部来解决问题而是谋求多边发展利用外部世界一切可能利用的因素和机会既为自己吸收更多的发展动力又可避免单方面依赖而受制于俄罗斯。现指三个或三个以上国家之间发生联系的方式。\n实用主义 冯友兰总结的实用主义主要观点最为简洁明了。在《三松堂自序》中冯说：“实用主义的特点在于它的真理论。它的真理论实际是一种不可知论。认识来源于经验，人们所能认识的，只限于经验，至于经验的背后还有什么东西，那是不可知的，也不必问这个问题。这个问题是没有意义的，因为无论怎么说，人们总是不能走出经验范围之外而有什么认识。要解决这个问题，还得靠经验。所谓真理，无非就是对于经验的一种解释，对于复杂的经验解释得通。如果解释得通，它就是真理，对于我们有用，即有用就是真理，忽略所谓客观的真理。”如此说得之，实用二字昭然若揭。\n计算机科学 符号主义 符号主义（Symbolism）是一种基于逻辑推理的智能模拟方法，又称为逻辑主义(Logicism)、心理学派(Psychlogism)或计算机学派(Computerism)，其原理主要为物理符号系统（即符号操作系统）假设和有限合理性原理，长期以来，一直在人工智能中处于主导地位，其代表人物是纽威尔、肖、西蒙和尼尔森。\n连接主义 连接主义(connectionism)，又称为仿生学派或生理学派，其主要原理为神经网络及神经网络间的连接机制与学习算法。\n行为主义 行为主义(actionism)，又称为进化主义或控制论学派，其原理为控制论及感知-动作型控制系统。\n文艺 文学 都合主义 剧情、人物、设定等为主角服务而无视因果、设定，这就是都合主义。\n魔幻现实主义 魔幻现实主义作为拉丁美洲所特有的文学样式，它具有与众不同的鲜明而独特的特征。将新闻报道般的写实与神奇的幻想结合起来，采用模糊化技巧和神话模式，表现拉丁美洲的历史文化和现实生活。这是魔幻现实主义突出的艺术特征。\n美术 浪漫主义 这一画派摆脱了当时学院派和古典主义的羁绊，偏重于发挥艺术家自己的想象和创造，创作题材取自现实生活，中世纪传说和文学名著（如莎士比亚、但丁、歌德、拜伦的作品）等，有一定的进步性。\n印象派 不依据可靠的知识，以瞬间的印象作画。画家们是抓住一个具有特点的侧面去作画，所以他们必须疾飞画笔把颜色直接涂在画布上，他们只能多考虑画的总体效果，较少的顾及枝节细部。印象主义的以粗放的笔法作画，作品缺乏修饰，是一种对笔法较草率的画法。\n印象主义采取在户外阳光下直接描绘景物，追求以思维来揣摩光与色的变化，并将瞬间的光感依据自己脑海中的处理附之于画布之上，这种对光线和色彩的揣摩也是达到了色彩和光感美的极致。\n画家：莫奈、马奈、毕沙罗、雷诺阿、 西斯莱、德加、科罗、莫里索、巴齐约\n点彩派（新印象派） 他们不用轮廓线划分形象，而用点状的小笔触，通过合乎科学的光色规律的并置，让无数小色点在观者视觉中混合，从而构成色点组成的形象，被一些艺术评论家称作“点彩派”。\n画家：乔治·修拉、保罗·西涅克、卡米尔·毕沙罗、M. 吕斯、H.-E.克罗斯\n新艺术派 简单讲就是喜欢画些清新脱俗的花草纹样，而且喜欢勾线，还经常画得扁扁平平的。女人头上长花是常有的事，当然，驴头上也可以长。\n画家：慕夏\n野兽派 顾名思义，就是像野兽一样狂放，这一派画家基本是不调色的，颜料挤出来就直接用，而且形状也是粗矿得很。国内的幼儿园墙画深得这种风格的真传。\n画家：马蒂斯\n风格派 风格派完全拒绝使用任何的具象元素，主张用纯粹几何形的抽象来表现纯粹的精神。认为抛开具体描绘,抛开细节，才能避免个别性和特殊性，获得人类共通的纯粹精神表现。\n画家：蒙德里安\n构成主义 简单讲，这个派别特备喜欢画立体块块和几何图形，而且喜欢乱摆。\n画家：里茨斯基\n超现实主义 简单讲就是觉得现实不重要，专门画现实里没有的东西。比如，为什么驴就不能长得像鱼呢？\n画家：达利\n表现主义 表现主义是艺术家通过作品着重表现内心的情感，而忽视对描写对象形式的摹写，因此往往表现为对现实的扭曲和抽象化，这个做法尤其用来表达恐惧的情感，因此，主题欢快的表现主义作品很少见。\n画家：席勒\n抽象表现主义 抽象表现主义是指一种结合了抽象形式和表现主义画家情感价值取向的非写实性绘画风格。\n该运动存在着多样的绘画风格，画风多半大胆粗犷、尖锐且尺幅巨大。画作色彩强烈，并经常出现偶然效果，例如让油彩自然流淌而不加以限制。\n画家：波洛克\n立体派 主要目的是追求一种几何形体的美，在形式的排列组合所产生的美感。 它否定了从一个视点观察事物和表现事物的传统方法，把三度空间的画面归结成平面。因为把不同视点所观察和理解的形诉诸于画面，从而表现出时间的持续性。\n画家：毕加索\n未来派 未来派全盘否定传统文艺的价值，认为人类的文化遗产和现存的文化都是腐朽、僵死，与现时代的精神不相容的。他们的口号是“摒弃一切博物馆、图书馆和学院”，反对一切模仿的形式，反抗和谐和趣味高雅，否定艺术批评的作用。未来派的美学主张与表现主义、立体主义有相同的地方，只是他们特别强调表现运动和力量，口号更激烈，纲领更明确，虚无主义的色彩更浓郁。\n他们觉得不能只表现静态的东西，画什么都要动起来、嗨起来，所以一个驴子可能带着七八个形状各异的残影。\n画家：波丘尼\n达达主义 达达主义是20世纪初期在欧洲兴起的虚无主义运动，是一种无政府主义的艺术运动，其艺术特点如下:\n1.反传统观念，公开蔑视文学艺术的一切现有形式，反秩序，反系统化\n2.运用理性的方法抨击人类，将人性化的内容与机械原理结合起来，并使用现成品作为艺术创作\n3.艺术手法抽象怪异，完全突破了已有的艺术观念和形式的束缚，被认为是后现代主义的创作者\n4.代表画家 杜尚，法国艺术家，被誉为\u0026quot;现代艺术的守护神\u0026quot;，其代表作是《下楼梯的裸女二号》，《泉》\n波普艺术 波普艺术，一种主要源于商业美术形式的艺术风格，其特点是将大众文化的一些细节，如连环画、快餐及印有商标的包装进行放大复制。\n画家：安迪·沃霍尔\n极简主义 顾名思义就是能省就省，企图以最少的东西表达最多的含义，能用一双眼睛搞定何必要画一整头驴呢？\n画家：纽曼\n概念艺术 概念艺术就是在20世纪60年代中后期出现，其基本概念源于马塞尔·杜尚的思想：一件艺术品从根本上说是艺术家的思想，而不是有形的实物，即绘画和雕塑；有形的实物出自那种思想。这种艺术导致以观念取代实物、是艺术摆脱物质的艺术品。\n画家：杜尚\n后现代主义 是一种对现代表达方式甚至思维方式以及价值观的颠覆和反叛。\n音乐 巴洛克时期 音乐领域中的巴洛克时期，如同其他艺术领域一样，也体现了各种不同的风格。 这段时期的音乐中没有太多的思想，讲究韵律的优美。歌剧、清唱剧和大合唱是声乐方面最重要的一些新形式，而奏鸣曲、协奏曲和前奏曲则是为器乐而创作的。\n古典主义时期 其特点是：理智和情感的高度统一，深刻的思想内容与完美的艺术形式的高度统一。创作技法上，继承欧洲传统的复调与主调音乐的成就，并确立了近代奏鸣曲曲式的结构以及交响曲、协奏曲、各类室内乐的体裁和形式，对西洋音乐的发展有深远影响。\n浪漫主义时期 这个时期艺术家的创作上则表现为对主观感情的崇尚，对自然的热爱和对未来的幻想。艺术表现形式也较以前有了新的变化，出现了浪漫主义思潮与风格的形成与发展。\n注：本文有许多内容搜集自互联网，若有侵权请联系删除。\n","date":"2021-01-17T23:25:28Z","permalink":"https://kegalas.top/p/%E5%90%84%E7%A7%8D%E4%B8%BB%E4%B9%89%E6%95%B4%E7%90%86/","title":"各种主义整理"},{"content":"系统：Ubuntu 20.10\n今天使用Ubuntu，想安装一下deepin的qq，在网上找到以下方法：\nwget -O- https://deepin-wine.i-m.dev/setup.sh | sh 正常执行\nsudo apt-get install com.qq.im.deepin 报错：\n下列软件包有未满足的依赖关系：\rlibgirepository-1.0-1 : 破坏: python-gi (\u0026lt; 3.34.0-4~) 但是 3.30.4-1 正要被安装\rE: 无法修正错误，因为您要求某些软件包保持现状，就是它们破坏了软件包间的依赖关系。 我试着安装python-gi，同样报错，我又试着删了libgirepository-1.0-1，但是他是很多包的依赖，不敢删。\n百度搜索无果，bing搜索外国也没找到解决办法，倒是有人遇到了同样的问题。\n在ubuntu搜集信息后，发现libgirepository-1.0-1依赖于libffi7，但是apt下载不到他，只能去https://packages.ubuntu.com/zh-cn/focal/libffi7手动下载。安装完后又去https://packages.ubuntu.com/zh-cn/focal/python-gi手动下载python-gi，先后安装成功。\n再次安装qq，重启，安装成功。\n但是发现字体显示不全。找了个网站下载了simsun.ttc，放到~/.deepinwine/Deepin-QQ/drive_c/windows/Fonts/\n问题解决。\n图片 1\r","date":"2021-01-03T12:16:26Z","image":"https://kegalas.top/p/ubuntu%E5%AE%89%E8%A3%85deepin-qq%E6%97%B6%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98%E4%B8%8E%E8%A7%A3%E5%86%B3/cover_huadd5fdafa4a185a8686ebe054dd413b9_24301_120x120_fill_q75_box_smart1.jpg","permalink":"https://kegalas.top/p/ubuntu%E5%AE%89%E8%A3%85deepin-qq%E6%97%B6%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98%E4%B8%8E%E8%A7%A3%E5%86%B3/","title":"ubuntu安装deepin-qq时遇到的问题与解决"},{"content":"[TOC]\n不等式 均值不等式 ​ $H_n$ 为调和平均数、 ​ $G_n$ 为几何平均数、 ​ $A_n$ 为算数平均数、 ​ $Q_n$ 为平方平均数。 ​ 任意$x_i\u0026gt; 0$都成立时，有 ​ $$H_n=\\frac{n}{\\sum\\limits_{i=1}^n\\frac{1}{x_i}}=\\frac{n}{\\frac{1}{x_1}+\\frac{1}{x_2}+\\dots+\\frac{1}{x_n}}$$ ​ $$G_n=\\sqrt[n]{\\prod_{i=1}^{n}x_i}=\\sqrt[n]{x_1 x_2 \\dots x_n}$$ ​ $$A_n=\\frac{\\sum\\limits_{i=1}^{n}x_i}{n}=\\frac{x_1+x_2+\\dots+x_n}{n}$$ ​ $$Q_n=\\sqrt{\\frac{\\sum\\limits_{i=1}^{n}x_i^{2}}{n}}=\\sqrt{\\frac{x_1^{2}+x_2^{2}+\\dots+x_n^{2}}{n}}$$ ​ $$H_n\\leq G_n\\leq A_n\\leq Q_n$$ ​ 当且仅当$x_1=x_2=\\dots =x_n$时取等号\n对数平均不等式 ​ $a\\neq b$时，有 ​ $$\\sqrt{ab}\u0026lt;\\frac{a-b}{lna-lnb}\u0026lt;\\frac{a+b}{2}$$\n柯西不等式 ​ $$\\sum\\limits_{i=1}^{n}a_i^{2}\\sum\\limits_{i=1}^{n}b_i^{2}\\geq (\\sum\\limits_{i=1}^{n}a_i b_i)^2$$ ​ 当且仅当$\\frac{a_1}{b_1}=\\frac{a_2}{b_2}=\\dots =\\frac{a_n}{b_n}$时取等号 ​ 其中二维形式如下 ​ $$(a^2+b^2)(c^2+d^2)\\geq (ac+bd)^2$$ ​ 当且仅当$ad=bc$即$\\frac{a}{c}=\\frac{b}{d}$时取等\n排序不等式 ​ 排序不等式表示如下 ​ 设有两组数$a_1,a_2,\\dots,a_n$和$b_1,b_2,\\dots,b_n$，满足$a_1\\leq a_2\\leq \\dots \\leq a_n$且$b_1\\leq b_2\\leq \\dots \\leq b_n$ ​ $c_1,c_2,\\dots,c_n$是$b_1,b_2,\\dots,b_n$的乱序排列，则有： ​ ​ $$a_1 b_n+a_2 b_{n-1}+\\dots+a_n b_1\\leq a_1 c_1+a_2 c_2+\\dots+a_n c_n\\leq a_1 b_1+a_2 b_2+\\dots+a_n b_n$$ ​ ​ 当且仅当$a_1=a_2=\\dots=a_n$或$b_1=b_2=\\dots=b_n$时取等号。 ​ 便于记忆，常记为： ​ 反序和$\\leq$乱序和$\\leq$顺序和\n权方和不等式 ​ 若$a_i\u0026gt;0$，$b_i\u0026gt;0$，$m\u0026gt;0$，则有 ​ $$\\sum\\limits_{i=1}^{n}\\frac{a_i^{m+1}}{b_i^{m}}\\geq \\frac{\\left (\\sum\\limits_{i=1}^{n}a_i\\right) ^{m+1}}{\\left (\\sum\\limits_{i=1}^{n}b_i\\right) ^m}$$ ​ 即为 ​ $$\\frac{a_1^{m+1}}{b_1^{m}}+\\frac{a_2^{m+1}}{b_2^{m}}+\\dots+\\frac{a_n^{m+1}}{b_n^{m}}\\geq \\frac{(a_1+a_2+\\dots+a_n)^{m+1}}{(b_1+b_2+\\dots+b_n)^{m}}$$ ​ 当且仅当$a_i=\\lambda b_i$时取等号 ​ 其中二维形式如下 ​ 对于正数$a$，$b$，$x$，$y$，有 ​ $$\\frac{a^2}{x}+\\frac{b^2}{y}\\geq \\frac{(a+b)^2}{x+y}$$ ​ 当且仅当$a:b=x:y$时取等号 ​ 也有 ​ $$\\frac{a^2}{ax}+\\frac{b^2}{by}=\\frac{a}{x}+\\frac{b}{y}\\geq \\frac{(a+b)^2}{ax+by}$$ ​ 当且仅当$x=y$时取等号\n舒尔不等式 ​ $a,b,c\\geq 0\\quad t\\in R$时，有 ​ $$a^t (a-b)(a-c)+b^t (b-a)(b-c)+c^t (c-a)(c-b)\\geq 0$$ ​ 当且仅当$a=b=c$，或其中两个数相等且另一个等于零时，取等号。 ​ 特别的，当$t$为非负偶数时，此不等式对任意实数$a,b,c$成立。\n琴生不等式 ​ 设$f(x)$在区间$I$上是下凸函数，则对任意$x_i\\in I$及$p_i\u0026gt;0\\quad (i=1,2,\\dots,n)$，有 ​ $$ \\frac{\\sum\\limits_{i=1}^{n}p_i\\cdot f(x_i)}{\\sum\\limits_{i=1}^{n}p_i}\\geq f \\left (\\frac{\\sum\\limits_{i=1}^{n}p_i\\cdot x_i}{\\sum\\limits_{i=1}^{n}p_i} \\right ) $$ ​ 其中等号当且仅当$x_1=x_2=\\dots=x_n$时成立，若$f(x)$在区间$I$上是上凸函数，则不等号反向。\n绝对值不等式 ​ $$||a|-|b|| \\leq |a\\pm b| \\leq |a|+|b|$$\n糖水不等式 $$\\frac{b+c}{a+c}\u0026gt;\\frac{b}{a}(a\u0026gt;b\u0026gt;0,c\u0026gt;0)$$ $$\\frac{b+c}{a+c}\u0026lt;\\frac{b}{a}(b\u0026gt;a\u0026gt;0,c\u0026gt;0)$$\n函数 拉格朗日中值定理 ​ 设$y=f(x)$在$[a,b]$上连续，在$(a,b)$上可导，则存在$\\xi \\in (a,b)$使得 ​ $$f^{\u0026rsquo;}(\\xi)=\\frac{f(b)-f(a)}{b-a}$$\n拉格朗日乘数法 ​ 【例题】若正数$a,b$满足$2a+b=1$，则$\\frac{a}{2-2a}+\\frac{b}{2-b}$的最小值为? ​ 解：构造拉格朗日函数 ​ $$L(a,b,\\lambda)=\\frac{a}{2-2a}+\\frac{b}{2-b}-\\lambda(2a+b-1)$$ ​ 令 ​ $$\\frac{\\partial L}{\\partial a}=L_a=\\frac{1}{2(1-a)^2}-2\\lambda=0$$ ​ $$\\frac{\\partial L}{\\partial b}=L_b=\\frac{2}{(2-b)^2}-\\lambda=0$$ ​ $$\\frac{\\partial L}{\\partial \\lambda}=L_\\lambda=-(2a+b-1)=0$$ ​ 联立解得 ​ $$a=\\frac{5-3\\sqrt{2}}{2},b=3\\sqrt{2}-4,\\lambda=\\frac{1}{27-18\\sqrt{2}}$$ ​ 从而 ​ $$\\frac{a}{2-2a}+\\frac{b}{2-b}=\\frac{2\\sqrt{2}}{3}-\\frac{1}{2}$$ ​ 此即为所求的最小值。\n高次韦达定理 ​ 设$x_1,x_2,\\dots,x_n$为如下方程的根 ​ $$a_n x^n+a_{n-1} x^{n-1}+\\dots+a_1 x+a_0=0$$ ​ 则有 ​ $$x_1+x_2+\\dots+x_n=-\\frac{a_{n-1}}{a_n}$$ ​ $$x_1 x_2+x_1 x_3+\\dots+x_n x_{n-1}=\\frac{a_{n-2}}{a_n}$$ ​ $$\\dots$$ ​ $$x_1 x_2\\dots x_n=(-1)^n \\frac{a_0}{a_n}$$ ​ 其中三次的形式如下 ​ 若$ax^3+bx^2+cx+d=0\\ (a\\neq 0)$的3个根分别为$x_1,x_2,x_3$则有 ​ $$x_1+x_2+x_3=-\\frac{b}{a}$$ ​ $$x_1 x_2+x_1 x_3+x_2 x_3=\\frac{c}{a}$$ ​ $$x_1\\cdot x_2\\cdot x_3=-\\frac{d}{a}$$\n泰勒展开 ​ 若函数$f(x)$在$x_0$存在$n$阶导数，则有 ​ $$f(x)=f(x_0)+\\frac{f\u0026rsquo;(x_0)}{1!}(x-x_0)+\\frac{f\u0026rsquo;\u0026rsquo;(x_0)}{2!}(x-x_0)^2+\\dots+\\frac{f^{(n)} (x_0)}{n!}(x-x_0)^n+R_{n+1}$$ ​ 上式即为函数$f(x)$在$x_0$处的泰勒展开式，其中$R_{n+1}=\\frac{f^{(n+1)} (\\xi)}{(n+1)!}(x-x_0)^{n+1}$（其中$\\xi$介于$x$和$x_0$间）叫做拉格朗日余项。 ​ 拉格朗日余项可用于证明不等式。如： ​ $-1\u0026lt;x\u0026lt;1$时 ​ $$\\ln(1+x)=x-\\frac{x^2}{2}+\\frac{x^3}{3}-\\frac{x^4}{4(1+\\xi)^4} (-1\u0026lt;\\xi\u0026lt;1)$$ ​ 因为$-\\frac{x^4}{4(1+\\xi)^4}\\leq 0$，所以$\\ln(1+x)\\leq x-\\frac{x^2}{2}+\\frac{x^3}{3}$\n极值点偏移 ​ 【例题】已知函数$f(x)=e^x-ax$有两个零点$x_1$和$x_2$，证明：$x_1 +x_2 \u0026gt;2$ ​ $$f(x)=e^x-ax=0\\Leftrightarrow \\frac{e^x}{x}=a$$ ​ 令$$\\varphi(x)=\\frac{e^x}{x}$$ ​ 则$$f(x_1)=f(x_2)\\Leftrightarrow\\varphi(x_1)=\\varphi(x_2),\\quad \\varphi\u0026rsquo;(x)=\\frac{(x-1)e^x}{x^2}$$ ​ 因此$\\varphi(x)$在$(0,1)$单减，$(1,+\\infty)$单增，不妨设$0\u0026lt;x_1\u0026lt;1\u0026lt;x_2$ ​ 则$x_1+x_2\u0026gt;2\\Leftrightarrow x_2\u0026gt;2-x_1$，注意到$2-x_1\u0026gt;1$ ​ $\\Leftrightarrow\\varphi(x_2)\u0026gt;\\varphi(2-x_1)$，注意到$\\varphi(x_1)=\\varphi(x_2)$ ​ 则$\\varphi(x_1)\u0026gt;\\varphi(2-x_1)$，其中$0\u0026lt;x_1\u0026lt;1$ ​ 令$$g(x)=\\varphi(x)-\\varphi(2-x), \\quad 0\u0026lt;x\u0026lt;1$$ ​ 易知 ​ $$g\u0026rsquo;(x)\u0026lt;0$$ ​ 所以$g(x)$在$(0,1)$上单减，$g(x)\u0026gt;g(1)=\\varphi(1)-\\varphi(1)=0$ ​ 即$\\varphi(x)-\\varphi(2-x)\u0026gt;0$，令$x=x_1$，Q.E.D.\n最值函数基本定理 ​ 定理一: ​ $$min{a,b } \\leq \\frac{a+b}{2} \\leq max{a,b } $$ ​ $$min{a,b}\\leq\\sqrt{ab}\\leq max{a,b}.(a\u0026gt;0,b\u0026gt;0)$$ ​ 定理二： ​ $$max{\\left|a+b\\right|,\\left|a-b\\right| }=|a|+|b|$$ ​ $$min{\\left|a+b\\right|,\\left|a-b\\right| }=||a|-|b||$$ ​ 定理三： ​ $$max{|a|,|b|}=\\frac{|a+b|}{2}+\\frac{|a-b|}{2}$$ ​ $$min{|a|,|b|}=\\left|\\frac{|a+b|}{2}-\\frac{|a-b|}{2}\\right|$$\n数列 不动点原理 ​ 【例题】求$a_1 = 1 , a_{n+1}=2a_n +1$的通项公式 ​ 其特征函数为$f(x)=2x+1$，令$f(x)=x$,解得$x=-1$ ​ 带入得$a_{n+1}-(-1)=2(a_n-(-1))$，即$a_{n+1}+1=2(a_n+1)$，之后根据等比数列可得$a_n=2^n -1$\n组合数学 容斥原理 ​ 建议根据韦恩图解题\n伯努利装错信封问题 ​ n封信与n个信封全部错位的组合数为 ​ $$f(n)=n!\\left[ \\frac{1}{2!}-\\frac{1}{3!}+\\frac{1}{4!}-\\dots +(-1)^n \\frac{1}{n!} \\right] $$\n向量 极化恒等式 ​ 重要恒等式:$4ab=(a+b)^2-(a-b)^2$ ​ 极化恒等式:$4\\boldsymbol{a}\\cdot \\boldsymbol{b}=(\\boldsymbol{a}+\\boldsymbol{b})^2-(\\boldsymbol{a}-\\boldsymbol{b})^2$\n分点恒等式 ​ 在$\\triangle ABC$中，M为BC上一等分点 ​ \\indent 当$\\overrightarrow{BM}=\\lambda \\overrightarrow{MC}时$，有 ​ $$\\overrightarrow{AM}=\\frac{1}{1+\\lambda}\\overrightarrow{AB}+\\frac{\\lambda}{1+\\lambda}\\overrightarrow{AC}$$\n三点共线定理 ​ 在平面中A、B、P三点共线的充要条件是：对于该平面内任意一点O，存在唯一的实数$x,y$使得： ​ $$\\overrightarrow{OP}=x\\overrightarrow{OA}+y\\overrightarrow{OB} $$ ​ 且 ​ $$x+y=1$$ ​ 特别的有：当P在线段AB上时，$x\u0026gt;0,y\u0026gt;0$ ​ P在线段AB之外时,$xy\u0026lt;0$\n向量中值定理 ​ 在$\\triangle ABC$中，M为BC的中点，则 ​ $$AB^2+AC^2=2(AM^2+BM^2)$$ ​ 对应的向量公式有: ​ $$\\boldsymbol{a}^2+\\boldsymbol{b}^2=2\\left[\\left(\\frac{\\boldsymbol{a}+\\boldsymbol{b}}{2}\\right)^2 + \\left(\\frac{\\boldsymbol{a}-\\boldsymbol{b}}{2}\\right)^2 \\right] $$\n向量数乘余弦定理 ​ 在$\\triangle ABC$中,有 ​ $$\\overrightarrow{AB}\\cdot \\overrightarrow{AC}=\\frac{AB^2+AC^2-BC^2}{2}$$\n三角 和差化积 ​ $$sin\\alpha+sin\\beta=2sin\\frac{\\alpha+\\beta}{2}\\cdot cos\\frac{\\alpha-\\beta}{2}$$ ​ $$sin\\alpha-sin\\beta=2cos\\frac{\\alpha+\\beta}{2}\\cdot sin\\frac{\\alpha-\\beta}{2}$$ ​ $$cos\\alpha+cos\\beta=2cos\\frac{\\alpha+\\beta}{2}\\cdot cos\\frac{\\alpha-\\beta}{2}$$ ​ $$cos\\alpha-cos\\beta=-2sin\\frac{\\alpha+\\beta}{2}\\cdot sin\\frac{\\alpha-\\beta}{2}$$\n积化和差 ​ $$sin\\alpha cos\\beta=\\frac{1}{2}\\left[sin(\\alpha+\\beta)+sin(\\alpha-\\beta)\\right]$$ ​ $$cos\\alpha sin\\beta=\\frac{1}{2}\\left[sin(\\alpha+\\beta)-sin(\\alpha-\\beta)\\right]$$ ​ $$cos\\alpha cos\\beta=\\frac{1}{2}\\left[cos(\\alpha+\\beta)+cos(\\alpha-\\beta)\\right]$$ ​ $$sin\\alpha sin\\beta=-\\frac{1}{2}\\left[cos(\\alpha+\\beta)-cos(\\alpha-\\beta)\\right]$$\n半角公式 ​ $$sin\\frac{\\theta}{2}=\\pm \\sqrt{\\frac{1-cos\\alpha}{2}}$$ ​ $$sin\\frac{\\theta}{2}=\\pm \\sqrt{\\frac{1+cos\\alpha}{2}}$$ ​ $$tan\\frac{\\theta}{2}=\\pm \\sqrt{\\frac{1-cos\\alpha}{1+cos\\alpha}}=\\frac{sin\\alpha}{1+cos\\alpha}=\\frac{1-cos\\alpha}{sin\\alpha}$$\n辅助角公式 ​ $$asin\\theta\\pm bcos\\theta=\\sqrt{a^2+b^2}sin(\\theta\\pm\\varphi),\\quad tan\\varphi=\\frac{b}{a}$$\n统计、概率、分布 期望、方差、标准差 ​ 数学期望：我们称$E\\xi = x_1 p_1+x_2 p_2+\\dots+x_n p_n$为离散型随机变量$\\xi$的数学期望 ​ 方差和标准差：我们称$D\\xi = \\sum_{i=1}^{n}(x_i-E\\xi)^2 p_i$为离散型随机变量$\\xi$的方差，其算数平方根$\\sqrt{D\\xi}=\\sigma\\xi$叫做离散型随机变量$\\xi$的标准差 ​ ​ 定理一： ​ $$E(a\\xi+b)=aE\\xi+b$$ ​ $$D(a\\xi+b)=a^2 D\\xi$$ ​ 定理二： ​ $$E(a\\xi _1+b\\xi _2)=aE\\xi _1+bE\\xi _2$$\n二项分布 ​ n次试验中事件A恰好发生k次 ​ $$P(E) ={n \\choose k}p^k (1-p)^{n-k}\\quad k=1,2,3,\\dots$$ ​ 我们称$\\xi$服从二项分布，记作$\\xi \\sim B(n,p)$ ​ 定理：$E\\xi = np$, $D\\xi = np(1-p)$\n正态分布 ​ $$f_\\xi (x)=\\frac{1}{\\sigma\\sqrt{2\\pi}}e^{-\\frac{(x-\\mu)^2}{2\\sigma ^2}} \\quad x\\in R,\\sigma\u0026gt;0$$ ​ 记作$\\xi \\sim N(\\mu,\\sigma ^2)$ ​ 性质：1.其正态曲线关于$x=\\mu$对称，最高点为$\\frac{1}{\\sigma\\sqrt{2\\pi}}$ ​ 2.$E\\xi=\\mu,D\\xi=\\sigma ^2$ ​ 3.$\\sigma$越大，正态曲线越“矮胖”，表示分布越分散，$\\sigma$越小，正态曲线越“瘦高”，表示分布越集中\n几何分布 ​ 在n次伯努利试验中，试验k次才得到第一次成功的机率。 ​ 记为$P(\\xi=k)=g(k,p)=q^{k-1}p$,其中$q=1-p$，也记为$\\xi \\sim GE(p)$ ​ 定理：$E\\xi=\\frac{1}{p},D\\xi=\\frac{q}{p^2}$\n超几何分布 ​ 它描述了从有限N个物件（其中包含M个指定种类的物件）中抽出n个物件，成功抽出该指定种类的物件的次数（不放回） ​ 记为$\\eta \\sim H(n,M,N)$ ​ $$P ( \\eta=m ) = \\frac{\\binom{M}{m}\\cdot \\binom{N-M}{n-m}}{\\binom{N}{n}}\\quad m=0,1,2,\\dots,min { n,M }$$\n其中有：\n​ $$E(X)=\\frac{nM}{N}$$\n​ $$D(X)=\\frac{nM}{N}\\left(1-\\frac{M}{N}\\right)\\frac{N-n}{N-1}$$\n方程 立方和分解 ​ $$a^3+b^3=(a+b)(a^2-ab+b^2)$$\n立方差分解 ​ $$a^3-b^3=(a-b)(a^2+ab+b^2)$$\n比例性质 ​ 若$\\frac{a}{b}=\\frac{c}{d}$则有：\n​ 合比性质\n​ $$\\frac{a+b}{b}=\\frac{c+d}{d}$$\n​ 分比性质\n​ $$\\frac{a-b}{b}=\\frac{c-d}{d}$$\n​ 合分比性质\n​ $$\\frac{a+b}{a-b}=\\frac{c+d}{c-d}$$\n​ 等比性质\n​ $$\\frac{a}{b}=\\frac{c}{d}=\\frac{a+c}{b+d}=\\frac{ma+nc}{mb+nd}$$\n几何 射影定理 ​ 射影定理，又称“欧几里德定理”：在直角三角形中，斜边上的高是两条直角边在斜边射影的比例中项，每一条直角边又是这条直角边在斜边上的射影和斜边的比例中项。 ​ ​ 在$Rt\\bigtriangleup ABC$中,$\\angle ABC=90^\\circ$,$BD$为斜边$AC$上的高，则有射影定理如下： ​ $$BD^2=AD\\cdot CD$$ ​ $$AB^2=AC\\cdot AD$$ ​ $$BC^2=CD\\cdot AC$$\n阿波罗尼斯圆 ​ 平面内到两个定点的距离之比为常数$k(k\\neq1)$的点的轨迹是圆\n角平分线定理 ​ 在$\\bigtriangleup ABC$中，$AM$为$\\angle BAC$的角平分线，$M$在$BC$上，则有： ​ $$\\frac{AB}{AC}=\\frac{MB}{MC}$$\n三角形五心 重心 ​ 三角形的三条边的中线交于一点，该点叫三角形的重心 ​ 重心的性质： ​ 1、重心到顶点的距离与重心到对边中点的距离之比为2:1。 ​ 2、重心和三角形任意两个顶点组成的3个三角形面积相等。即重心到三条边的距离与三条边的长成反比。 ​ 3、重心到三角形3个顶点距离的平方和最小。 ​ 4、在平面直角坐标系中，重心的坐标是顶点坐标的算术平均数，即其重心坐标为 ​ $$P_1= ​ \\begin{bmatrix} ​ x_1\\ ​ y_1 ​ \\end{bmatrix} ​ P_2= ​ \\begin{bmatrix} ​ x_2\\ ​ y_2 ​ \\end{bmatrix} ​ p_3= ​ \\begin{bmatrix} ​ x_3\\ ​ y_3 ​ \\end{bmatrix} ​ $$ ​ $$ ​ \\begin{bmatrix} ​ x\\ ​ y ​ \\end{bmatrix} ​ =\\frac{1}{3}(P_1+P_2+P_3)=\\frac{1}{3} ​ \\begin{bmatrix} ​ x_1+x_2+x_3\\ ​ y_1+y_2+y_3 ​ \\end{bmatrix} ​ $$ ​ 5. 以重心为起点，以三角形三顶点为终点的三条向量之和等于零向量。\n外心 ​ 三角形外接圆的圆心，叫做三角形的外心。 ​ 外心的性质： ​ 1、三角形的三条边的垂直平分线交于一点，该点即为该三角形的外心。 ​ 2、若O是$\\bigtriangleup$ABC的外心，则$\\angle$BOC=2$\\angle$A（$\\angle$A为锐角或直角）或$\\angle$BOC=360°-2$\\angle$A（$\\angle$A为钝角）。 ​ 3、当三角形为锐角三角形时，外心在三角形内部；当三角形为钝角三角形时，外心在三角形外部；当三角形为直角三角形时，外心在斜边上，与斜边的中点重合。 ​ 4、外心到三顶点的距离相等\n垂心 ​ 三角形的三条高（所在直线）交于一点，该点叫做三角形的垂心。 ​ 垂心的性质： ​ 1、三角形三个顶点，三个垂足，垂心这7个点可以得到6个四点圆。 ​ 2、三角形外心O、重心G和垂心H三点共线，且OG:GH=1:2。（此直线称为三角形的欧拉线（Euler line））（除正三角形） ​ 3、垂心到三角形一顶点距离为此三角形外心到此顶点对边距离的2倍。 ​ 4、垂心分每条高线的两部分乘积相等\n内心 ​ 三角形内切圆的圆心，叫做三角形的内心。 ​ 内心的性质： ​ 1、三角形的三条内角平分线交于一点。该点即为三角形的内心。 ​ 2、直角三角形的内心到边的距离等于两直角边的和与斜边的差的二分之一。 ​ 3、P为$\\bigtriangleup$ABC所在空间中任意一点，点O是ΔABC内心的充要条件是：$\\overrightarrow{PO}=(a×\\overrightarrow{PA} +b×\\overrightarrow{PB} +c×\\overrightarrow{PC} )/(a+b+c)$. ​ 4、O为三角形的内心，A、B、C分别为三角形的三个顶点，延长AO交BC边于N，则有AO:ON=AB:BN=AC:CN=(AB+AC):BC ​ 5、(欧拉定理)⊿ABC中，R和r分别为外接圆为和内切圆的半径，O和I分别为其外心和内心，则$OI^2=R^2-2Rr$． ​ 6、（内角平分线分三边长度关系） ​ △ABC中，0为内心，∠A 、∠B、 ∠C的内角平分线分别交BC、AC、AB于Q、P、R，　则BQ/QC=c/b, CP/PA=a/c, BR/RA=a/b. ​ 7、内心到三角形三边距离相等。\n旁心 ​ 三角形的旁切圆（与三角形的一边和其他两边的延长线相切的圆）的圆心，叫做三角形的旁心。 ​ 旁心的性质： ​ 1、三角形一内角平分线和另外两顶点处的外角平分线交于一点，该点即为三角形的旁心。 ​ 2、每个三角形都有三个旁心。 ​ 3、旁心到三边的距离相等。\n法向量叉乘求法 ​ 已知不共线的两个向量$\\boldsymbol{a}=(x_1,y_1,z_1)$,$\\boldsymbol{b}=(x_2,y_2,z_2)$\n​ 则它们所确定的平面的法向量为：\n​ $$\\boldsymbol{n}=(y_1 z_2-z_1 y_2,z_1 x_2-x_1 z_2,x_1 y_2-y_1 x_2)$$\n方法 主元法 ​ 【例题】对任意$m\\in [-1,1]$,函数$f(x)=x^2+(m-4)x+4-2m$的值恒大于零，求$x$的取值范围。 ​ $$f(x)=x^2+(m-4)x+4-2m=(x-2)m+x^2-4x+4$$ ​ 令 ​ $$g(m)=(x-2)m+x^2-4x+4$$ ​ 所以有 ​ $$\\begin{cases} ​ g(-1)=(x-2)(-1)+x^2-4x+4\u0026gt;0 ​ \\ ​ g(1)=(x-2)\\cdot 1+x^2-4x+4\u0026gt;0 ​ \\end{cases}$$ ​ 解得$x\u0026lt;1 $或 $x\u0026gt;3$\n裂项 ​ $$\\frac{1}{n(n+1)}=\\frac{1}{n}-\\frac{1}{n+1}$$ ​ $$\\frac{1}{n(n+1)(n+2)}=\\frac{1}{2}\\left[\\frac{1}{n(n+1)}-\\frac{1}{(n+1)(n+2)}\\right] $$ ​ $$\\frac{1}{\\sqrt{n+1}+\\sqrt{n}}=\\sqrt{n+1}-\\sqrt{n}$$ ​ $$a_n=(a_n-a_{n-1})+(a_{n-1}-a_{n-2})+\\dots+(a_2-a_1)+a_1$$ ​ $$a_n=\\frac{a_n}{a_{n-1}}\\bullet\\frac{a_{n-1}}{a_{n-2}}\\bullet\\dots\\bullet\\frac{a_2}{a_1}\\bullet a_1$$ ​ $$n\\cdot n!=(n+1)!-n!$$ ​ $$C^{m}{n}=C^{m}{n+1}-C^{m-1}{n}$$ ​ $$n(n+1)=\\frac{1}{3}\\left[n(n+1)(n+2)-(n-1)n(n+1)\\right]$$ ​ $$\\frac{1}{C^{1}{n+1}C^{2}_{n}}=\\frac{2}{(n+1)n(n-1)}=\\frac{1}{n(n-1)}-\\frac{1}{(n+1)n}$$ ​ $$\\frac{1}{2^n(2^n-1)}=\\frac{1}{2^n-1}-\\frac{1}{2^n}$$ ​ $$\\frac{n}{(n+1)!}=\\frac{1}{n!}-\\frac{1}{(n+1)!}$$\n放缩 ​ $$\\frac{1}{n^2}=\\frac{4}{4n^2}\u0026lt;\\frac{4}{4n^2 -1}=2\\left(\\frac{1}{2n-1}-\\frac{1}{2n+1}\\right)$$ ​ $$\\left(1+\\frac{1}{n}\\right)^n\u0026lt;1+1+\\frac{1}{2\\times 1}+\\frac{1}{3\\times 2}+\\dots+\\frac{1}{n(n-1)}\u0026lt;\\frac{5}{2}$$ ​ $$\\frac{1}{\\sqrt{n+2}}\u0026lt;\\frac{1}{\\sqrt{n+2}}-\\frac{1}{\\sqrt{n}}$$ ​ $$2(\\sqrt{n+1}-\\sqrt{n})\u0026lt;\\frac{1}{\\sqrt{n}}\u0026lt;2(\\sqrt{n}-\\sqrt{n-1})$$ ​ $$\\frac{2^n}{(2^n-1)^2}\u0026lt;\\frac{2^n}{(2^n-1)(2^n-2)}=\\frac{2^{n-1}}{(2^n-1)(2^{n-1}-1)}=\\frac{1}{2^{n-1}-1}-\\frac{1}{2^n-1}$$\n​ $$\\frac{1}{\\sqrt{n^3}}=\\frac{1}{\\sqrt{n\\cdot n^2}}\u0026lt;\\frac{1}{\\sqrt{n(n-1)(n+1)}}=\\left(\\frac{1}{\\sqrt{n(n-1)}}\n​ -\\frac{1}{\\sqrt{n(n+1)}}\\right)\\frac{1}{\\sqrt{n+1}-\\sqrt{n-1}}$$ ​ $$=\\left(\\frac{1}{\\sqrt{n-1}}-\\frac{1}{\\sqrt{n+1}}\n​ \\right)\\frac{\\sqrt{n+1}+\\sqrt{n-1}}{2\\sqrt{n}}\u0026lt;\\frac{1}{\\sqrt{n-1}}-\\frac{1}{\\sqrt{n+1}}$$\n​ $$\\frac{1}{\\sqrt{n(n+1)}}\u0026lt;\\sqrt{n}-\\sqrt{n-1}$$\n​ $$e^x\\geq x+1$$ ​ $$e^x\\leq \\frac{1}{1-x}$$ ​ $$ln(x+1)\\leq x$$ ​ $$ln(x+1)\\geq \\frac{x}{x+1}$$ ​ $$ln(x+1)\\geq x-\\frac{x^2}{2}$$ ​ $$e^x\\geq 1+x+\\frac{x^2}{2}$$ ​ $$tanx\\geq x+\\frac{x^2}{3}$$ ​ $$sinx\\geq x-\\frac{x^3}{6}$$ ​ $$sinx\\leq x$$ ​ $$cosx\\geq 1-\\frac{x^2}{2}$$\n","date":"2020-12-13T13:10:39Z","permalink":"https://kegalas.top/p/%E6%88%91%E7%9A%84%E9%AB%98%E4%B8%AD%E8%B5%84%E6%96%99%E6%95%B4%E7%90%86/","title":"我的高中资料整理"},{"content":"这是一个测试文档\n","date":"2020-12-13T12:30:53Z","permalink":"https://kegalas.top/p/%E6%B5%8B%E8%AF%95/","title":"测试"}]