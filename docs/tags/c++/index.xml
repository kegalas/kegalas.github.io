<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>C&#43;&#43; on KegalaS的个人博客</title>
    <link>https://kegalas.uk/tags/c&#43;&#43;/</link>
    <description>Recent content in C&#43;&#43; on KegalaS的个人博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 11 May 2025 15:42:58 +0800</lastBuildDate><atom:link href="https://kegalas.uk/tags/c++/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>C&#43;&#43;结构体内存对齐和数组内存步幅</title>
      <link>https://kegalas.uk/p/c-%E7%BB%93%E6%9E%84%E4%BD%93%E5%86%85%E5%AD%98%E5%AF%B9%E9%BD%90%E5%92%8C%E6%95%B0%E7%BB%84%E5%86%85%E5%AD%98%E6%AD%A5%E5%B9%85/</link>
      <pubDate>Sun, 11 May 2025 15:42:58 +0800</pubDate>
      
      <guid>https://kegalas.uk/p/c-%E7%BB%93%E6%9E%84%E4%BD%93%E5%86%85%E5%AD%98%E5%AF%B9%E9%BD%90%E5%92%8C%E6%95%B0%E7%BB%84%E5%86%85%E5%AD%98%E6%AD%A5%E5%B9%85/</guid>
      <description>内存对齐 众所周知，计组这门课告诉我们，对齐与没对齐的数据在访问时有效率差别，而C/C++作为一个接近底层和关注速度的语言，可以操控内存对齐。</description>
    </item>
    
    <item>
      <title>使用perf生成火焰图</title>
      <link>https://kegalas.uk/inferior/%E4%BD%BF%E7%94%A8perf%E7%94%9F%E6%88%90%E7%81%AB%E7%84%B0%E5%9B%BE/</link>
      <pubDate>Sat, 01 Mar 2025 19:07:37 +0800</pubDate>
      
      <guid>https://kegalas.uk/inferior/%E4%BD%BF%E7%94%A8perf%E7%94%9F%E6%88%90%E7%81%AB%E7%84%B0%E5%9B%BE/</guid>
      <description>对于性能优化的需求，我们经常会用到火焰图这个方法。Linux下确实有一种比较简单的生成方法，他需要用到perf来生成具体的运行统计信息，然后</description>
    </item>
    
    <item>
      <title>C&#43;&#43;并发支持库用法速查</title>
      <link>https://kegalas.uk/inferior/c&#43;&#43;%E5%B9%B6%E5%8F%91%E6%94%AF%E6%8C%81%E5%BA%93%E7%94%A8%E6%B3%95%E9%80%9F%E6%9F%A5/</link>
      <pubDate>Tue, 21 May 2024 23:42:42 +0800</pubDate>
      
      <guid>https://kegalas.uk/inferior/c&#43;&#43;%E5%B9%B6%E5%8F%91%E6%94%AF%E6%8C%81%E5%BA%93%E7%94%A8%E6%B3%95%E9%80%9F%E6%9F%A5/</guid>
      <description>thread C++启动一个新线程，只要构造一个std::thread对象就可以了。使用join()方法可以等待线程汇入，使用detach()可以不等待</description>
    </item>
    
    <item>
      <title>CMU15445(2023 Fall)数据库组件功能速查</title>
      <link>https://kegalas.uk/inferior/cmu154452023fall%E6%95%B0%E6%8D%AE%E5%BA%93%E7%BB%84%E4%BB%B6%E5%8A%9F%E8%83%BD%E9%80%9F%E6%9F%A5/</link>
      <pubDate>Mon, 29 Apr 2024 14:09:51 +0800</pubDate>
      
      <guid>https://kegalas.uk/inferior/cmu154452023fall%E6%95%B0%E6%8D%AE%E5%BA%93%E7%BB%84%E4%BB%B6%E5%8A%9F%E8%83%BD%E9%80%9F%E6%9F%A5/</guid>
      <description>为了应对面试官的拷打，写下此文，方便我复习这个数据库的实现方法。 Project 1 Task 1 这一部分主要是要求实现一个LRU-K的替换算法。 LRU是最近最少使用</description>
    </item>
    
    <item>
      <title>现代C&#43;&#43;学习笔记</title>
      <link>https://kegalas.uk/p/%E7%8E%B0%E4%BB%A3c-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Wed, 06 Sep 2023 21:52:23 +0800</pubDate>
      
      <guid>https://kegalas.uk/p/%E7%8E%B0%E4%BB%A3c-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</guid>
      <description>本笔记会记录一些C++中，自己以前不常用、不是很熟悉需要记录来复习的、新标准（相较于C++11）引入的、可能有用的功能。不适合详细阅读过某一</description>
    </item>
    
  </channel>
</rss>
